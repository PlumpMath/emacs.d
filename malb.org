#+STARTUP: overview indent
#+SETUPFILE: theme-readtheorg.setup
#+TYP_TODO: TRY(y) TEST(t) IMPLEMENT(i) TODO(o) | DONE(d)
#+TODO: | DISABLED(d)

* Assumptions

We assume that the following variables are defined:

- ~malb/projects-dir~ - a superepository of which all of my projects are subprojects
- ~malb/literature-dir~ - PDFs of papers
- ~malb/literature-notes-dir~ - notes on papers
- ~malb/documents-dir~ - documents
- ~malb/sync-dir~ - documents that are syncronised
- ~malb/solarized-p~ - do we want solarized?
- ~malb/paradox-github-token~ - github login
- ~malb/org-files-dir~ - org files go here
- ~malb/org-mode-ics~ - icalendar file
- ~malb/private-org~ - this is where I store tasks
- ~malb/inbox-org~ - this is where I store tasks
- ~malb/org-files~ - org files go here
- ~malb/common-file-targets~ - for helm
- ~malb/projectile-ignored-projects~ - ignored projects
- ~malb/sage-executable~ - full path of Sage executable
- ~malb/mu4e-name-replacements~ - email name replacements

* TLS

Enable TLS cert checking ([[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][source]])

#+BEGIN_SRC emacs-lisp
(let ((trustfile (replace-regexp-in-string
                  "\\\\" "/" (replace-regexp-in-string
                              "\n" "" (shell-command-to-string "python -m certifi")))))
  (setq tls-program (list
                     (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                             (if (eq window-system 'w32) ".exe" "") trustfile))
        gnutls-verify-error t
        gnutls-trustfiles (list trustfile)
        tls-checktrust t))

;; (let ((bad-hosts
;;        (loop for bad
;;              in `("https://wrong.host.badssl.com/"
;;                   "https://self-signed.badssl.com/")
;;              if (condition-case e
;;                     (url-retrieve
;;                      bad (lambda (retrieved) t))
;;                   (error nil))
;;              collect bad)))
;;   (if bad-hosts
;;       (error (format "tls misconfigured; retrieved %s ok"
;;                      bad-hosts))
;;     (url-retrieve "https://badssl.com"
;;                   (lambda (retrieved) t))))
#+END_SRC

* Package Management

Configure package repositories

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ;; ("org" . "http://orgmode.org/elpa/") ;; no TLS :(
))
#+END_SRC

Get the package manager going, but do not autoload packages.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Use [[https://github.com/jwiegley/use-package/][use-package]] to keep our configuration readable.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

[[https://github.com/Bruce-Connor/paradox/][Paradox]] is a better package list

- Visit the package's homepage with =v=
- View a list of recent commits with =l=
- Shortcuts for package filtering:
  - =f r= filters by regexp (occur)
  - =f u= display only packages with upgrades
  - =f k= filters by keyword
  - =f c= clear filter
- Hit =h= to see all keys

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure paradox
  :commands (paradox-list-packages)
  :config (setq paradox-github-token malb/paradox-github-token
                paradox-automatically-star t))
#+END_SRC

** Try out packages

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* Fullscreen

Maximise the window as soon as possible

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Startup

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

* Disable Clutter

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

* Memory

We have RAM, lots of it.

#+BEGIN_SRC emacs-lisp
(setq global-mark-ring-max 128
      mark-ring-max 128
      kill-ring-max 128)
#+END_SRC

([[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][source]])


#+BEGIN_SRC emacs-lisp
(defun malb/minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun malb/minibuffer-exit-hook ()
  (setq gc-cons-threshold 1048576))

(add-hook 'minibuffer-setup-hook #'malb/minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'malb/minibuffer-exit-hook)
#+END_SRC

*Note:* Don’t set ~gc-cons-threshold~ to something much bigger as it will cause to hang occasionally
for a long-ish time.

* Keyboard Shortcuts

We use ~Super~ (in our case: ~CapsLock~) as a menu of sorts:

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'f2-global-map)
(bind-key "<f2>" #'f2-global-map)

(defun malb/set-menu-key (char func)
  (bind-key (concat "s-" char) func)
  (bind-key char func f2-global-map))
#+END_SRC

** Key Chords

Key chords allow to execute actions by pressing one or two keys really fast. Sometimes we might want
to use those. However, mostly, we don’t as the slight delay they introduce (to check if a key chord
should be executed or the text inserted) is annoying.

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config (progn
            (setq key-chord-one-key-delay 0.2
                  key-chord-two-keys-delay 0.1)
            (key-chord-mode 1)))
#+END_SRC

* Window Management
** Splitting

When splitting windows open the previous buffer in it.

#+BEGIN_SRC  emacs-lisp
(defun malb/vsplit-last-buffer ()
  "Split the window vertically and display the previous buffer."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun malb/hsplit-last-buffer ()
  "Split the window horizontally and display the previous buffer."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'malb/vsplit-last-buffer)
(bind-key "C-x 3" 'malb/hsplit-last-buffer)
#+END_SRC

Don’t split horizontally.

#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 70
      split-height-threshold nil)

(defun malb/split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             (= (length (window-list)) 1)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it vertically disregarding
             ;; the value of `split-height-threshold'.
             (let ((split-height-threshold 0))
               (when (window-splittable-p window)
                 (with-selected-window window
                   (split-window-below))))))))

(setq split-window-preferred-function #'malb/split-window-sensibly)
#+END_SRC

Resize windows to accommodate new ones.

#+BEGIN_SRC emacs-lisp
(setq window-combination-resize t)
#+END_SRC

** Restoring Configurations

[[http://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode. When activated, it allows to “undo” (and “redo”) changes in the window configuration.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Multiple Window Configurations

[[https://github.com/wasamasa/eyebrowse][eyebrowse]] is a simple-minded way of managing window configuration.

[[http://s22.postimg.org/aqd1em8xd/spacemacs_eyebrowse_demo.gif]] ([[https://www.reddit.com/r/emacs/comments/34htzr/eyebrowse_i3_window_manager_inside_emacs/][source]])

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :diminish eyebrowse-mode
  :init (setq eyebrowse-keymap-prefix (kbd "C-c C-\\"))
  :config (progn
            (setq eyebrowse-wrap-around t)
            (eyebrowse-mode t)

            (defun malb/eyebrowse-new-window-config ()
              (interactive)
              (let ((done nil))
                (dotimes (i 10)
                  ;; start at 1 run till 0
                  (let ((j (mod (+ i 1) 10)))
                    (when (and (not done)
                               (not (eyebrowse--window-config-present-p j)))
                      (eyebrowse-switch-to-window-config j)
                      (call-interactively 'eyebrowse-rename-window-config j)
                      (setq done t)
                      ))
                  )))

            (require 'latex-preview-pane)

            (defun malb/close-latex-preview-pane-before-eyebrowse-switch ()
              ;; latex-preview-pane uses window-parameters which are not preserved by eyebrowse, so
              ;; we close the preview pane before switching, it will be regenerated when we edit the
              ;; TeX file.
              (when (lpp/window-containing-preview)
                (delete-window (lpp/window-containing-preview))))

            (add-to-list 'eyebrowse-pre-window-switch-hook
                         #'malb/close-latex-preview-pane-before-eyebrowse-switch)))
#+END_SRC

** Switching

[[https://github.com/abo-abo/ace-window][ace-window]] for switching windows, but we only call it as a subroutine from a =hydra= below.

[[http://oremacs.com/download/ace-window.gif]] ([[http://oremacs.com/download/ace-window.gif][source]])

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config (progn
            (setq aw-keys   '(?a ?s ?d ?f ?j ?k ?l)
                  aw-dispatch-always nil
                  aw-dispatch-alist
                  '((?x aw-delete-window     "Ace - Delete Window")
                    (?c aw-swap-window       "Ace - Swap Window")
                    (?n aw-flip-window)
                    (?v aw-split-window-vert "Ace - Split Vert Window")
                    (?h aw-split-window-horz "Ace - Split Horz Window")
                    (?g delete-other-windows "Ace - Maximize Window")
                    (?b balance-windows)
                    (?u winner-undo)
                    (?r winner-redo)))))
#+END_SRC

Quickly jump back and forth between buffers ([[http://www.emacswiki.org/emacs/SwitchingBuffers#toc4][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

Bind =M-1= and =M-2= to cycle through buffers.

#+BEGIN_SRC emacs-lisp
(bind-key "M-1" #'previous-buffer)
(bind-key "M-2" #'next-buffer)
#+END_SRC

** Special windows

Some buffers should behave like pop ups:

- display at the bottom with 0.3 height
- display as a side-window

We then use =malb/quit-bottom-side-windows= to close them.

#+BEGIN_SRC emacs-lisp
(defvar malb/popup-windows '("\\`\\*helm flycheck\\*\\'"
                             "\\`\\*Flycheck errors\\*\\'"
                             "\\`\\*helm projectile\\*\\'"
                             "\\`\\*Helm all the things\\*\\'"
                             "\\`\\*Helm Find Files\\*\\'"
                             "\\`\\*Help\\*\\'"
                             "\\`\\*anaconda-doc\\*\\'"
                             "\\`\\*Google Translate\\*\\'"
                             "\\` \\*LanguageTool Errors\\* \\'"
                             "\\`\\*Edit footnote .*\\*\\'"
                             "\\`\\*TeX errors*\\*\\'"
                             "\\`\\*mu4e-update*\\*\\'"
                             "\\`\\*prodigy-.*\\*\\'"
                             "\\`\\*Org Export Dispatcher\\*\\'"
                             "\\`\\*Helm Swoop\\*\\'"))

(dolist (name malb/popup-windows)
  (add-to-list 'display-buffer-alist
               `(,name
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 ;; height only applies when golden-ratio-mode is off
                 (window-height   . 0.3))))
#+END_SRC

*** Closing side windows

In case we just want to kill the bottom window, set a shortcut do to this.

#+BEGIN_SRC emacs-lisp
(defun malb/quit-bottom-side-windows ()
  "Quit side windows of the current frame."
  (interactive)
  (dolist (window (window-at-side-list))
    (delete-window window)))

(bind-key "C-§" #'malb/quit-bottom-side-windows)
(key-chord-define-global "qq" #'malb/quit-bottom-side-windows)
#+END_SRC

*** Compilation window

If there is no compilation window, open one at the bottom, spanning the complete width of the frame. Otherwise, reuse existing window. In the former case, if there was no error the window closes automatically.

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             `(,(rx bos "*compilation*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (reusable-frames . visible)
               (side            . bottom)
               (window-height   . 0.3)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/compilation-exit-autoclose (status code msg)
  ;; If M-x compile exists with a 0
  (when (and (eq status 'exit) (zerop code))
    ;; and delete the *compilation* window
    (let ((compilation-window (get-buffer-window (get-buffer "*compilation*"))))

      (when (and (not (window-at-side-p compilation-window 'top))
                 (window-at-side-p compilation-window 'left)
                 (window-at-side-p compilation-window 'right))
        (delete-window compilation-window))))
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))

(setq compilation-exit-message-function #'malb/compilation-exit-autoclose)
#+END_SRC

If you change the variable ~compilation-scroll-output~ to a ~non-nil~ value, the compilation buffer scrolls automatically to follow the output. If the value is ~first-error~, scrolling stops when the first error appears, leaving point at that error. For any other non-nil value, scrolling continues until there is no more output.

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

** Golden Ratio

[[https://github.com/roman/golden-ratio.el][Golden Ratio]] for resizing windows is enabled by default. We also inhibit when modes in =golden-ratio-exclude-modes= are active any window, not only in the target window.

[[https://camo.githubusercontent.com/26b1ac5fec67a2c557cfbe87382a0134d3443fd0/68747470733a2f2f7261772e6769746875622e636f6d2f726f6d616e2f676f6c64656e2d726174696f2e656c2f6173736574732f676f6c64656e5f726174696f5f656c2e676966][screenshot]] ([[https://github.com/roman/golden-ratio.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t
  :diminish golden-ratio-mode
  :config (progn

            (require 'ispell)
            (setq golden-ratio-adjust-factor 1.0
                  golden-ratio-exclude-modes '(eshell-mode
                                               pdf-view-mode
                                               mu4e-view-mode
                                               mu4e-main-mode
                                               mu4e-headers-mode
                                               calendar-mode
                                               compilation-mode))

            (defun malb/golden-ratio-inhibit-functions ()
              (cond
               ;; which function is exempt
               ((bound-and-true-p which-key--current-page-n))
               ;; helm is exempt
               ((bound-and-true-p helm-alive-p))
               ;; embrace is exempt
               ((eq this-command 'embrace-commander))
               ;; if ispell is running let's not golden ratio
               ((get-buffer ispell-choices-buffer))
               ;; any olivetti mode buffer disables gr
               ;; we also block if any buffer has inhibit major-mode not only target
               (t (catch 'inhibit
                    (dolist (window (window-list))
                      (with-current-buffer (window-buffer window)
                        (if (or (memq major-mode golden-ratio-exclude-modes)
                                (bound-and-true-p olivetti-mode))
                            (throw 'inhibit t))))
                    (throw 'inhibit nil)))))

            (setq golden-ratio-exclude-buffer-regexp malb/popup-windows)

            (setq golden-ratio-inhibit-functions
                  '(malb/golden-ratio-inhibit-functions))))
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
(defhydra malb/hydra-window ()
  "
^Misc^        ^Split^         ^Buffer^         ^Resize^           ^Eyebrowse^      ^Olivetti^
^----^--------^-----^---------^------^---------^------^-----------^---------^------^--------^
_←_ ←         _v_ertical      _H_elm-omni      _q_ X←             _[_ \\/ new    oli_V_etti
_↓_ ↓         _h_orizontal    _p_revious buf   _w_ X↓             _;_ \\/ ←         _,_ O←
_↑_ ↑         _z_ undo        _n_ext buf       _e_ X↑             _'_ \\/ →         _._ O→
_→_ →         _Z_ reset       _t_oggle buf     _r_ X→             _]_ \\/ close
_T_oggle ded  _d_lt this      _a_ce 1       max_i_mize            _!_ \\/ rename
_SPC_ cancel  _D_lt other     _s_wap           _g_olden-ratio
_j_ump        _o_nly this     _S_ave
"
  ("<left>" windmove-left )
  ("<down>" windmove-down )
  ("<up>" windmove-up )
  ("<right>" windmove-right )
  ("j" avy-goto-word-1 :color blue)
  ("q" shrink-window-horizontally)
  ("w" shrink-window)
  ("e" enlarge-window)
  ("r" enlarge-window-horizontally)
  ("g" golden-ratio-mode)
  ("H" malb/helm-omni :color blue)
  ("1" previous-buffer)
  ("2" next-buffer)
  ("p" previous-buffer)
  ("n" next-buffer)
  ("t" malb/switch-to-previous-buffer :color blue)
  ("T" dedicated-mode)
  ("a" (lambda () (interactive) (ace-window 1)) :color blue)
  ("v" malb/vsplit-last-buffer)
  ("h" malb/hsplit-last-buffer)
  ("s" (lambda () (interactive) (ace-window 4)) :color blue)
  ("S" save-buffer)
  ("d" delete-window)
  ("D" (lambda () (interactive) (ace-window 16)) :color blue)
  ("o" delete-other-windows :color blue)
  ("i" ace-maximize-window :color blue)
  ("z" (progn (winner-undo) (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("[" malb/eyebrowse-new-window-config :color blue)
  (";" (lambda () (interactive) (eyebrowse-prev-window-config nil)) :color blue)
  ("'" (lambda () (interactive) (eyebrowse-next-window-config nil)) :color blue)
  ("]" eyebrowse-close-window-config :color blue)
  ("!" eyebrowse-rename-window-config :color blue)
  ("V" olivetti-mode)
  ("," olivetti-shrink)
  ("." olivetti-expand)
  ("SPC" nil)
  ("`" nil))

(key-chord-define-global "z`" #'malb/hydra-window/body)
(bind-key "C-x o" #'malb/hydra-window/body)
(bind-key "±" #'other-window)
#+END_SRC

* Clean Mode Line

Use [[http://www.eskimo.com/~seldon/diminish.el][diminish.el]] to remove mentions of minor modes from the mode-line as we’re using a quite few of them and don’t want to waste the real estate. Most diminishing is done by the ~:diminish~ parameter to =use-package=.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

[[http://www.emacswiki.org/emacs/DelightedModes][delight.el]] allows us to rewrite mode-line statuses of minor modes. Which we use when the diminish
keyword is not enough.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t)
#+END_SRC

* Jumping around

[[https://raw.githubusercontent.com/wiki/nloyola/avy/images/avy-goto-char.png]] ([[https://github.com/abo-abo/avy][source]])

See [[http://emacsrocks.com/e10.html][Emacs Rocks #10]] which is on ~ace-jump-mode~ which inspired [[https://github.com/abo-abo/avy][avy]].


#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c C-SPC" . avy-goto-word-1)
  :config (progn
            (setq avy-background t)
            (key-chord-define-global "jj"  #'avy-goto-word-1)))
#+END_SRC


** Jumping to links

#+BEGIN_QUOTE
Currently, to jump to a link in an =Info-mode= or =help-mode= or =woman-mode= or =org-mode= or =eww-mode= or =compilation-mode= buffer, you can tab through the links to select the one you want. This is an O(N) operation, where the N is the amount of links. This package turns this into an O(1) operation, or at least O(log(N)) if you manage to squeeze thousands of links in one screen. It does so by assigning a letter to each link using avy. ([[https://github.com/abo-abo/ace-link][source]])
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :ensure t
  :config (ace-link-setup-default))
#+END_SRC

** Jumping through edit points

Use [[http://www.emacswiki.org/emacs/GotoChg][goto-chg]] to jump through edit points ([[http://pragmaticemacs.com/emacs/move-through-edit-points/][source]])

#+BEGIN_SRC emacs-lisp
(use-package goto-chg
  :ensure t
  :config (progn
            (bind-key "C-c b ," #'goto-last-change)
            (bind-key "C-c b ." #'goto-last-change-reverse)))
#+END_SRC

*Tip* =C-u 0 C-c b ,​= description of the change at a particular stop on your tour

* Snippets

#+BEGIN_QUOTE
[[https://github.com/capitaomorte/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. ([[https://github.com/capitaomorte/yasnippet][source]])
#+END_QUOTE

[[http://blog.refu.co/wp-content/uploads/2015/07/wpid-yasnippet1.gif]] ([[http://blog.refu.co/?p=1355][source]])

Also, see [[http://emacsrocks.com/e06.html][Emacs Rocks #06]] which is on ~yasnippet~.

Call ~yas-decribe-tables~ to see currently defined snippets.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config (progn
            (yas-global-mode)
            (setq yas-verbosity 1)))
#+END_SRC

** Auto YASnippet

#+BEGIN_QUOTE
This is a hybrid of keyboard macros and yasnippet. You create the snippet on the go, usually to be used just in the one place. It's fast, because you're not leaving the current buffer, and all you do is enter the code you'd enter anyway, just placing ~ where you'd like yasnippet fields and mirrors to be.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
  :ensure t
  :bind (("C-c y c" . aya-create)
         ("C-c y e" . aya-expand)))
#+END_SRC

* Auto Completion

Use [[https://github.com/company-mode/company-mode][company-mode]] for auto-completion.

[[https://company-mode.github.io/images/company-elisp.png]] ([[https://company-mode.github.io/images/company-elisp.png][source]])

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :bind (("C-<tab>"    . company-complete)
         ("M-/"        . company-complete))

  :config (progn
            (setq company-tooltip-limit 20 ; bigger popup window
                  company-idle-delay 0.6   ; delay for popup
                  company-echo-delay 0     ; remove blinking
                  company-show-numbers t   ; show numbers for easy selection
                  company-selection-wrap-around t
                  company-require-match nil
                  company-dabbrev-ignore-case t
                  company-dabbrev-ignore-invisible t
                  company-dabbrev-other-buffers t
                  company-dabbrev-downcase nil
                  company-dabbrev-code-everywhere t
                  company-tooltip-align-annotations t
                  company-minimum-prefix-length 1
                  company-global-modes '(not)
                  company-lighter-base "C")

            (global-company-mode 1)

            (add-to-list 'company-backends #'company-c-headers)
            (add-to-list 'company-backends #'company-anaconda)

            (bind-key "C-n"   #'company-select-next company-active-map)
            (bind-key "C-p"   #'company-select-previous company-active-map)
            (bind-key "<tab>" #'company-complete company-active-map)
            (bind-key "M-?"   #'company-show-doc-buffer company-active-map)
            (bind-key "M-."   #'company-show-location company-active-map)
            (bind-key "M-/"   #'company-complete-common org-mode-map)))
#+END_SRC


Use [[https://github.com/expez/company-quickhelp][company-quickhelp]] to display quick help.

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :config (company-quickhelp-mode 1))
#+END_SRC

** C/C++

For C/C++ use [[https://github.com/company-mode/company-mode/blob/master/company-semantic.el][company-semantic]] (and [[https://github.com/randomphrase/company-c-headers][company-c-headers]]) which can be a bit tricky to set up, but works very well once that is done.

#+BEGIN_SRC emacs-lisp
(use-package company-c-headers
  :ensure t
  :config (progn
            (defun malb/ede-object-system-include-path ()
              "Return the system include path for the current buffer."
              (when ede-object
                (ede-system-include-path ede-object)))

            (setq company-c-headers-path-system
                  #'malb/ede-object-system-include-path)
            ))
#+END_SRC

** Python

For Python use [[https://github.com/proofit404/company-anaconda][company-anaconda]].

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :ensure t)
#+END_SRC

** LaTeX

For LaTeX use [[https://github.com/alexeyr/company-auctex][company-auctex]] but insert unicode symbols via [[https://github.com/vspinu/company-math][company-math]], hence we manage what to add when carefully below.

#+BEGIN_SRC emacs-lisp
(use-package company-math
  :ensure t)

(use-package company-auctex
  :ensure t
  :config (progn
            (defun company-auctex-labels (command &optional arg &rest ignored)
              "company-auctex-labels backend"
              (interactive (list 'interactive))
              (case command
                (interactive (company-begin-backend 'company-auctex-labels))
                (prefix (company-auctex-prefix "\\\\.*ref{\\([^}]*\\)\\="))
                (candidates (company-auctex-label-candidates arg))))

            (add-to-list 'company-backends
                         '(company-auctex-macros
                           company-auctex-environments
                           company-math-symbols-unicode))

            (add-to-list 'company-backends #'company-auctex-labels)
            (add-to-list 'company-backends #'company-auctex-bibs)
            (setq company-math-disallow-unicode-symbols-in-faces nil)))
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :ensure t
  :config (progn
            (setq company-shell-modes '(sh-mode shell-mode))
            (add-to-list 'company-backends 'company-shell)
            ))
#+END_SRC

** YaSnippet

Add yasnippet support for all company backends. ([[https://github.com/syl20bnr/spacemacs/pull/179][source]])

*Note:* Do this at the end of =company-mode= config.

#+BEGIN_SRC emacs-lisp
(defvar malb/company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun malb/company-mode/backend-with-yas (backend)
  (if (or (not malb/company-mode/enable-yas)
          (and (listp backend)
               (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends
      (mapcar #'malb/company-mode/backend-with-yas company-backends))
#+END_SRC

** Tab DWIM

=yas-expand= is run first and does what it has to, then it calls =malb/indent-or-complete=.

This function then hopefully does what I want:

- if a region is active, just indent
- if we’re looking at a space after a non-whitespace character, we try some company-expansion
- otherwise call whatever would have been called otherwise.

([[http://emacs.stackexchange.com/q/21182/8930][source]], [[http://emacs.stackexchange.com/q/7908/8930][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/indent-or-complete (&optional arg)
  (interactive "P")
  (cond
   ;; if a region is active, indent
   ((use-region-p)
    (indent-region (region-beginning)
                   (region-end)))
   ;; if the next char is space or eol, but prev char not whitespace
   ((and (not (active-minibuffer-window))
         (or (looking-at " ")
             (looking-at "$"))
         (looking-back "[^[:space:]]")
         (not (looking-back "^")))

    (company-complete-common))
   ;; by default just call whatever was bound
   (t
    (let ((fn (or (lookup-key (current-local-map) (kbd "TAB"))
                  'indent-for-tab-command)))
      (if (not (called-interactively-p 'any))
          (fn arg)
        (setq this-command fn)
        (call-interactively fn))))))

(bind-key "<tab>" #'malb/indent-or-complete)
#+END_SRC

* Helm

[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs.

[[https://tuhdo.github.io/static/helm_projectile.gif]] ([[https://tuhdo.github.io/helm-intro.html][source]])

See [[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]] for a nice introduction.

| *Combo* | *Command*             |
|---------+-----------------------|
| =C-w=   | yanks word at point   |
| =M-n=   | yanks symbol at point |
| =C-h f= | ~describe-function~   |
| =C-h v= | ~describe-variable~   |
| =C-h w= | ~where-is~            |

** Buffers, Files

[[https://github.com/emacs-helm/helm/raw/master/doc/helm-buffers-list.gif]] ([[https://github.com/emacs-helm/helm/raw/master/doc/helm-buffers-list.gif][source]])

Don’t use the vanilla =helm-buffers= command for =C-x C-b= but combine many sources to create =malb/helm-omni.= ([[http://stackoverflow.com/a/19284509][source]])

*Tip:* Use =@foo= to search for content =foo= in buffers when in =helm-omni=. Use =*lisp= to search for buffers in ~lisp-mode~. Use =*!list= to search for buffers not in ~lisp-mode~.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-omni (&rest arg)
  ;; just in case someone decides to pass an argument, helm-omni won't fail.
  (interactive)
  (unless helm-source-buffers-list
    (setq helm-source-buffers-list
          (helm-make-source "Buffers" 'helm-source-buffers)))
  (helm-other-buffer
   (append

    (if (projectile-project-p)
        '(helm-source-projectile-buffers-list
          helm-source-buffers-list)
      '(helm-source-buffers-list)) ;; list of all open buffers

    `(((name . "Virtual Workspace")
       (candidates . ,(--map (cons  (eyebrowse-format-slot it) (car it))
                             (eyebrowse--get 'window-configs)))
       (action . (lambda (candidate)
                   (eyebrowse-switch-to-window-config candidate))
               )))

    (if (projectile-project-p)
        '(helm-source-projectile-recentf-list
          helm-source-recentf)
      '(helm-source-recentf)) ;; all recent files

    ;; always make some common files easily accessible
    '(((name . "Common Files")
       (candidates . malb/common-file-targets)
       (action . (("Open" . (lambda (x) (find-file (eval x))))))))

    '(helm-source-files-in-current-dir) ;; files in current directory

    '(helm-source-locate               ;; file anywhere
      helm-source-baloo                ;; baloo search
      helm-source-bookmarks            ;; bookmarks too
      helm-source-buffer-not-found     ;; ask to create a buffer otherwise
      )

    ;; adding helm-source-imenu-anywhere does some weird pre-filtering
    '(((name . "imenu-anywere")
       (candidates . helm-imenu-anywhere-candidates)
       (action .
               #[(elm)
                 "\301\302\"\207"
                 [elm imenu-anywhere--goto-function ""]
                 3])))
    ) "*Helm all the things*"))
#+END_SRC

Use helm for switching buffers, opening files, calling interactive functions.

The default ~C-x c~ is quite close to =C-x C-c=, which quits Emacs. Changed to =C-c h=. We must set =C-c h= globally, because we cannot change =helm-command-prefix-key= once =helm-config= is loaded. ([[https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el][source]])

We also use ~(helm-all-mark-rings)~ to jump around marks (set with =C-SPC C-SPC= et al.).

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure helm
  :diminish helm-mode
  :bind (("M-x"     . helm-M-x)
         ("C-x C-b" . malb/helm-omni)
         ("C-x C-f" . helm-find-files)
         ("C-h C-<SPC>" . helm-all-mark-rings))
  :config (progn
            (require 'helm-config)
            (bind-key "C-c h" #'helm-command-prefix)
            (unbind-key "C-x c")

            (setq helm-adaptive-mode t
                  helm-bookmark-show-location t
                  helm-buffer-max-length 48
                  helm-display-header-line t
                  helm-ff-skip-boring-files t
                  helm-lisp-fuzzy-completion t
                  helm-input-idle-delay 0.01
                  helm-org-headings-fontify t
                  helm-quick-update t
                  helm-split-window-in-side-p t
                  helm-truncate-lines nil)

            (when (executable-find "curl")
              (setq helm-google-suggest-use-curl-p t))

            (helm-mode t)

            ;; manipulating these lists must happen after helm-mode was called
            (add-to-list 'helm-boring-buffer-regexp-list "\\*CEDET Global\\*")
            (add-to-list 'helm-boring-buffer-regexp-list "\\`\\*prodigy-.*\\*\\'")

            (delete "\\.bbl$" helm-boring-file-regexp-list)
            (add-to-list 'helm-boring-file-regexp-list "\\.nav" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.out" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.snm" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.synctex.gz" t)

            ;; rebind tab to do persistent action
            (bind-key "<tab>" 'helm-execute-persistent-action helm-map)
            ;; make TAB works in terminal
            (bind-key "C-i"   'helm-execute-persistent-action helm-map)
            ;; list actions using C-z
            (bind-key "C-z"   'helm-select-action             helm-map)

            ;; see https://github.com/emacs-helm/helm/commit/1de1701c73b15a86e99ab1c5c53bd0e8659d8ede
            (assq-delete-all 'find-file helm-completing-read-handlers-alist)))
#+END_SRC

** Helm Flx

[[https://github.com/PythonNut/helm-flx][helm-flx]] implements intelligent helm fuzzy sorting, provided by [[https://github.com/lewang/flx][flx]].

#+BEGIN_SRC emacs-lisp
(use-package helm-flx
  :ensure t
  :config (progn
            ;; these are helm configs, but they kind of fit here nicely
            (setq helm-M-x-fuzzy-match                  t
                  helm-bookmark-show-location           t
                  helm-buffers-fuzzy-matching           t
                  helm-completion-in-region-fuzzy-match t
                  helm-file-cache-fuzzy-match           t
                  helm-imenu-fuzzy-match                t
                  helm-mode-fuzzy-match                 t
                  helm-locate-fuzzy-match               nil
                  helm-quick-update                     t
                  helm-recentf-fuzzy-match              nil
                  helm-semantic-fuzzy-match             t)
            (helm-flx-mode +1)))
#+END_SRC

** Helm-ring

=helm-ring= makes the kill ring actually useful, let’s use it.

#+BEGIN_SRC emacs-lisp
(use-package helm-ring
  :bind (("M-y" . helm-show-kill-ring)))
#+END_SRC

** Helm Swoop

[[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]] for buffer searching.

[[https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif]] ([[https://github.com/ShingoFukuyama/helm-swoop][source]])

*Tip*: You can edit =helm-swoop= buffers by pressing =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-swoop-pre-fill ()
  (thing-at-point 'symbol)) ;; I’m going back and forth what I prefer

(setq malb/helm-swoop-ignore-major-mode
      '(dired-mode paradox-menu-mode doc-view-mode pdf-view-mode mu4e-headers-mode org-mode markdown-mode latex-mode))

(defun malb/swoop-or-search ()
  (interactive)
  (if (or (> (buffer-size) 1048576) ;; helm-swoop can be slow on big buffers
          (memq major-mode malb/helm-swoop-ignore-major-mode))
      (isearch-forward)
    (helm-swoop)))

(use-package helm-swoop
  :ensure t
  :bind (("C-c o" . helm-multi-swoop-org)
         ("C-s"   . malb/swoop-or-search)
         ("C-M-s" . helm-multi-swoop-all))
  :config (progn
            (setq helm-swoop-pre-input-function  #'malb/helm-swoop-pre-fill
                  helm-swoop-split-with-multiple-windows nil
                  helm-swoop-split-direction #'split-window-horizontally
                  helm-swoop-split-window-function 'helm-default-display-buffer
                  helm-swoop-speed-or-color t)
            (bind-key "C-S-s" #'helm-swoop-from-isearch isearch-mode-map)
            (bind-key "C-S-s" #'helm-multi-swoop-all-from-helm-swoop helm-swoop-map)
            (bind-key "C-r"   #'helm-previous-line helm-swoop-map)
            (bind-key "C-s"   #'helm-next-line helm-swoop-map)
            (bind-key "C-r"   #'helm-previous-line helm-multi-swoop-map)
            (bind-key "C-s"   #'helm-next-line helm-multi-swoop-map)))
#+END_SRC

** Helm-ag

[[http://beyondgrep.com][Ack]] is “a tool like grep, optimized for programmers“. [[https://github.com/ggreer/the_silver_searcher][Ag]] is like =ack=, but faster. [[https://github.com/syohex/emacs-helm-ag][Helm-ag]] is a helm interface to =ag=. We use =helm-ag= mainly via =helm-projectile-ag=, which allows us to =grep= through all project files quickly.

[[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif]] ([[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif][source]])

*Note:* You can switch to edit mode with =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t
  :config (setq helm-ag-base-command "ag --nocolor --nogroup"
                helm-ag-command-option "--all-text"
                helm-ag-insert-at-point 'symbol
                helm-ag-fuzzy-match t
                helm-ag-use-grep-ignore-list t
                helm-ag-use-agignore t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/helm-ag-projects ()
  "run helm-ag in projects directory"
  (interactive)
  (let* ((ignored (mapconcat (lambda (i)
                              (concat "--ignore " i))
                            (append grep-find-ignored-files grep-find-ignored-directories)
                            " "))
        (helm-ag-base-command (concat helm-ag-base-command " " ignored)))
    (helm-do-ag (file-name-as-directory malb/projects-dir)))
  )
#+END_SRC

** Helm-themes

Switch themes with helm.

#+BEGIN_SRC emacs-lisp
(use-package helm-themes
  :ensure t)
#+END_SRC

** DISABLED Helm-commandlinefu

[[https://github.com/xuchunyang/helm-commandlinefu][Helm-commandlinefu]] is a helm interface to http://www.commandlinefu.com/.

#+BEGIN_SRC emacs-lisp
;; (use-package helm-commandlinefu
;;   :ensure t)
#+END_SRC

** Helm Locate

#+BEGIN_SRC emacs-lisp
(use-package helm-locate
  :config (progn
            (setq helm-locate-command
                  (let ((databases (concat
                                    "/var/lib/mlocate/mlocate.db:"
                                    (expand-file-name ".locate.db" (getenv "HOME")))))
                    (concat "locate -d " databases  " %s -e --regex %s")))

            (helm-add-action-to-source "Attach to Email" #'mml-attach-file helm-source-locate)
            ))
#+END_SRC

** Helm-Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package helm-c-yasnippet
  :ensure t
  :bind ("C-c h y" .  helm-yas-complete)
  :config (progn
            (setq helm-yas-space-match-any-greedy t)))
#+END_SRC

* Recent Files

Don’t include boring or remote stuff in list of recently visited files.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config  (progn
             (setq recentf-max-saved-items 50
                   recentf-exclude '("COMMIT_EDITMSG"
                                     "~$"
                                     "/tmp/"
                                     "/ssh:"
                                     "/sudo:"
                                     "/scp:"
                                     (expand-file-name malb/mu4e-maildir)))
             (loop for ext in helm-boring-file-regexp-list
                   do (add-to-list 'recentf-exclude ext t))
             ))
#+END_SRC

* IMenu

Make sure to auto automatically rescan for imenu change.

#+BEGIN_SRC emacs-lisp
(set-default 'imenu-auto-rescan t)
#+END_SRC

[[https://github.com/vspinu/imenu-anywhere][IMenu items for all buffers]] with the same major mode as the current one.

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :ensure t)
#+END_SRC

** TODO do we need ~helm-imenu-anywhere~ or is ~helm-imenu-in-all-buffers~ sufficient?

* Parenthesis

See [[https://ebzzry.github.io/emacs-pairs.html][here]] for an introduction to [[https://github.com/Fuco1/smartparens][smartparens]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn
            (require 'smartparens-config)
            (require 'smartparens-latex)

            (smartparens-global-mode t)
            (setq sp-autodelete-wrap t)
            (setq sp-cancel-autoskip-on-backward-movement nil)

            (setq-default sp-autoskip-closing-pair t)
            (setq sp-autoescape-string-quote nil) ;; don't escape quotes in strings
            (bind-key "C-M-d" 'sp-down-sexp sp-keymap)
            (bind-key "C-M-u" 'sp-backward-up-sexp sp-keymap)

            (bind-key "C-M-a" 'sp-beginning-of-sexp sp-keymap)
            (bind-key "C-M-e" 'sp-end-of-sexp sp-keymap)

            (bind-key "M-<right>" 'sp-next-sexp sp-keymap)
            (bind-key "M-<left>" 'sp-previous-sexp sp-keymap)

            (bind-key "C-M-t" 'sp-transpose-sexp sp-keymap)
            (bind-key "M-d" 'sp-kill-sexp sp-keymap)
            (bind-key "M-<backspace>" 'sp-backward-unwrap-sexp sp-keymap)

            (bind-key "C-<right>" 'sp-forward-slurp-sexp sp-keymap)
            (bind-key "C-<left>" 'sp-forward-barf-sexp sp-keymap)

            (bind-key "C-M-<backspace>" 'sp-splice-sexp-killing-backward sp-keymap)
            (bind-key "C-S-<backspace>" 'sp-splice-sexp-killing-around sp-keymap)


            (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
            (sp-pair "{" "}" :wrap "C-{")

            (add-to-list 'sp-ignore-modes-list 'org-mode) ; too slow
            (add-to-list 'sp-ignore-modes-list 'python-mode) ; too slow
            (add-to-list 'sp-ignore-modes-list 'cython-mode) ; too slow
            (add-to-list 'sp-navigate-consider-stringlike-sexp 'latex-mode)
            ))
#+END_SRC

** Misc

A better ~C-a~. ([[http://www.wilfred.me.uk/.emacs.d/init.html][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/beginning-of-line-dwim ()
  "Toggles between moving point to the first non-whitespace character, and
  the start of the line."
  (interactive)
  (let ((start-position (point)))
    ;; Move to the first non-whitespace character.
    (back-to-indentation)

    ;; If we haven't moved position, go to start of the line.
    (when (= (point) start-position)
      (move-beginning-of-line nil))))


(bind-key "C-a" #'malb/beginning-of-line-dwim)
(bind-key "<home>"  #'malb/beginning-of-line-dwim lisp-mode-map)

#+END_SRC

* Projects

#+BEGIN_QUOTE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. […]

This library provides easy project management and navigation. The concept of a project is pretty basic – just a folder containing special file. Currently git, mercurial, darcs and bazaar repos are considered projects by default. So are lein, maven, sbt, scons, rebar and bundler projects. If you want to mark a folder manually as a project just create an empty =.projectile= file in it. Some of Projectile's features:

- jump to a file in project
- jump to files at point in project
- jump to a directory in project
- jump to a file in a directory
- jump to a project buffer
- jump to a test in project
- toggle between files with same names but different extensions (e.g. =.h= <-> =.c/.cpp=, =Gemfile= <-> =Gemfile.lock=)
- toggle between code and its test (e.g. =main.service.js= <-> =main.service.spec.js=)
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- =multi-occur= in project buffers
- grep in project
- regenerate project =etags= or =gtags= (requires =ggtags=).
- visit project in =dired=
- run make in a project with a single key chord
#+END_QUOTE

[[https://raw.githubusercontent.com/bbatsov/projectile/master/screenshots/projectile.png]] ([[https://github.com/bbatsov/projectile/blob/master/screenshots/projectile.png][source]])

*Commands:*

- =C-c p D=   ~projectile-dired~
- =C-c p F=   ~helm-projectile-find-file-in-known-projects~
- =C-c p P=   ~projectile-test-project~
- =C-c p S=   ~projectile-save-project-buffers~
- =C-c p b=   ~helm-projectile-switch-to-buffer~
- =C-c p f=   ~helm-projectile-find-file~
- =C-c p g=   ~helm-projectile-find-file-dwim~
- =C-c p h=   ~helm-projectile~
- =C-c p p=   ~helm-projectile-switch-project~
- =C-c p r=   ~projectile-replace~
- =C-c p s s= ~helm-projectile-ag~

*When switching projects:*

- ~C-d~ open Dired in project's directory
- ~M-g~ open project root in vc-dir or magit
- ~M-e~ switch to Eshell: Open a project in Eshell.
- ~C-s~ grep in projects (add prefix C-u to recursive grep)
- ~C-c~ Compile project: Run a compile command at the project root.
- ~M-D~ Remove project(s): Delete marked projects from the list of known projects.
- ~C-c @~ insert the current file that highlight bar is on as an org link.

*Note*: =next-error= has nothing to do with projectile, but =<f5>= and =<f6>= kind of go together. ~previous-error~ is bound to =M-g p=.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind (("<f5>" . projectile-compile-project)
         ("<f6>" . next-error))
  :config (progn
            (require 'magit) ;; this is ugly but we need it here for now
            (require 'helm-projectile)
            (helm-projectile-on)

            (defun malb/projectile-ignore-projects (project-root)
              (progn
                (or (file-remote-p project-root)
                    ;; don't litter project list with cryptobib subprojects
                    (and  (string-match (rx-to-string `(: "cryptobib/" eos) t)
                                        project-root) t)
                    (and  (string-match (rx-to-string `(: bos "/tmp/" ) t)
                                        project-root) t))))

            (setq projectile-make-test-cmd "make check"
                  projectile-ignored-projects malb/projectile-ignored-projects
                  projectile-ignored-project-function #'malb/projectile-ignore-projects
                  projectile-switch-project-action 'helm-projectile
                  projectile-mode-line  '(:eval
                                          (format "▸[%s]"
                                                  (projectile-project-name))))

            (projectile-global-mode)))

#+END_SRC

** [[https://tuhdo.github.io/helm-projectile.html][Helm-projectile]]

*Commands:*

- =C-c p h= for =helm-projectile= which combines buffer, file and project switching
- =C-c p F= for =helm-projectile-find-file-in-known-projects=

We add a “Create file“ action ([[https://www.reddit.com/r/emacs/comments/3m8i5r/helmprojectile_quickly_findcreate_new_file_in/][source]]) and replace =grep= by =ag=.

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :config (progn
            (defvar malb/helm-source-file-not-found
              (helm-build-dummy-source
                  "Create file"
                :action 'find-file))
            (add-to-list
             'helm-projectile-sources-list
             malb/helm-source-file-not-found t)

            (helm-delete-action-from-source
             "Grep in projects `C-s'"
             helm-source-projectile-projects)

            (helm-add-action-to-source
             "Grep in projects `C-s'"
             'helm-do-ag helm-source-projectile-projects 4)))
#+END_SRC

* Org-mode all the things!

See [[http://orgmode.org/guide/Introduction.html][here]] for an introduction to [[http://orgmode.org/][org-mode]].

*Note:* Ideally, we’d want to put all org-mode stuff into one big =:config= blog, but that makes it harder to read/explain.

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda))
  :mode ("\\.org$" . org-mode)
  :diminish (orgstruct-mode orgstruct++-mode orgtbl-mode))
#+END_SRC

** Files

#+BEGIN_SRC emacs-lisp
(setq org-directory malb/org-files-dir
      org-agenda-files malb/org-files
      org-default-notes-file malb/inbox-org)
#+END_SRC

** Options

#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t          ; enforce todo dependencies
      org-habit-graph-column 117
      org-use-speed-commands t
      org-catch-invisible-edits 'smart
      org-tags-column -110
      org-startup-folded 'fold
      org-log-into-drawer t
      org-log-done t
      org-return-follows-link nil             ; don’t follow links by pressing ENTER
      org-clock-persist 'history
      org-special-ctrl-a/e t                   ; begin/end of line to skip starts …
      org-special-ctrl-k t                     ; special keys for killing a headline
      org-edit-src-content-indentation 0       ; don't indent source code
      org-src-preserve-indentation t           ; preserve indentation in code
      org-src-window-setup 'current-window     ; when hitting C-c '
      org-reverse-note-order t
      org-footnote-auto-adjust t               ; renumber footnotes automagically
      org-confirm-elisp-link-function nil      ;
      org-startup-with-inline-images t         ; show images when opening a file.
      )

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

(bind-key "<home>" #'org-beginning-of-line org-mode-map)
(bind-key "<end>" #'org-end-of-line org-mode-map)
(bind-key "C-c C-." #'org-time-stamp org-mode-map) ; ede binds C-c . too
(bind-key "C-c C-," #'org-time-stamp-inactive org-mode-map) ; fylcheck binds C-c !
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
(setq org-agenda-tags-column -117
      org-agenda-include-diary nil
      org-agenda-dim-blocked-tasks t
      org-agenda-default-appointment-duration 60
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-agenda-ignore-drawer-properties '(effort appt category)
      org-agenda-window-setup 'current-window  ; Current window gets agenda
      org-agenda-sticky t                      ; Use sticky agenda's so they persist
      org-agenda-compact-blocks t              ; Compact the block agenda view
      org-agenda-span 14                       ; span 14 days of agenda
      org-agenda-start-on-weekday nil          ; start today not on Monday
      )

(add-hook 'org-agenda-finalize-hook 'hl-line-mode)
#+END_SRC

** Look

#+BEGIN_SRC emacs-lisp
(setq org-hide-mphasis-markers nil ; don’t hide markers for like *foo*
      org-ellipsis "⤵"
      org-highlight-latex-and-related '(latex)
      org-src-fontify-natively t        ; fontify code blocks
      org-image-actual-width '(1024))
#+END_SRC

** Org Babel

Working with source code in org-mode.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :config (progn
            ;; load more languages for org-babel
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((python . t)
               (sh . t)
               (latex . t)
               (ditaa . t)
               (clojure . t)
               (plantuml . t)
               (makefile . t)))

            (setq org-confirm-babel-evaluate nil
                  org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

            (add-to-list 'org-src-lang-modes (quote ("plantuml" . puml)))))
#+END_SRC

*** Org iPython

[[https://github.com/gregsexton/ob-ipython][source]]

#+BEGIN_SRC emacs-lisp
(use-package ob-ipython
  :ensure t
  :config (progn
            (add-to-list 'org-structure-template-alist
                         '("ip" "#+BEGIN_SRC ipython\n?\n#+END_SRC"
                           "<src lang=\"python\">\n?\n</src>"))

            (setq org-babel-default-header-args:ipython
                  '((:results . "output replace")
                    (:session . nil)
                    (:exports . "both")
                    (:cache .   "no")
                    (:noweb . "no")
                    (:hlines . "no")
                    (:tangle . "no")))))
#+END_SRC

** ToDo Keywords & Scheduling

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)"
                  "WAITING(w@)"
                  "|"
                  "DELEGATED(e@/!)"
                  "DONE(d)"
                  "CANCELLED(c@/!)") ;;generic

        (sequence "EXPLORE"
                  "WRITEUP"
                  "READ(r)"
                  "COAUTHOR(!)"
                  "REWRITE(!)"
                  "SUBMITTED(@/!)"
                  "|"
                  "PUBLISHED(p!)"
                  "ONHOLD(h@/!)"
                  "STALLED(s)") ;; papers

        (sequence "REVIEW(v)"
                  "INFO(i@/!)"
                  "|"
                  "REVIEWED(V!)") ;; reviews

        (type "BLOG(b)"
              "REPLY(r)"
              "TALK(k)"
              "STUDY(y)"
              "LOAD"
              "|" "DONE") ))

(org-clock-persistence-insinuate)
#+END_SRC

delete SCHEDULED if new state is WAITING

#+BEGIN_SRC emacs-lisp
(defun malb/org-after-todo-state-change ()
  (when (or
         (string-equal org-state "WAITING")
         (string-equal org-state "COAUTHOR")
         (string-equal org-state "NATIVE")
         (string-equal org-state "SUBMITTED"))
    (org-remove-timestamp-with-keyword org-scheduled-string)))

(add-hook 'org-after-todo-state-change-hook 'malb/org-after-todo-state-change)
#+END_SRC

** Tags

#+BEGIN_SRC emacs-lisp
(setq org-tag-persistent-alist '((:startgroup)
                                 ("@office" . ?o)
                                 ("@train" . ?t)
                                 ("quick" . ?q)
                                 (:endgroup)))
#+END_SRC

** Tables

Bind =org-table-*= command when the point is in an org table ([[http://emacs.stackexchange.com/a/22457/115][source]]).

#+BEGIN_SRC emacs-lisp
(bind-keys
 :map org-mode-map
 :filter (org-at-table-p)
 ("C-c ?" . org-table-field-info)
 ("C-c SPC" . org-table-blank-field)
 ("C-c +" . org-table-sum)
 ("C-c =" . org-table-eval-formula)
 ("C-c `" . org-table-edit-field)
 ("C-#" . org-table-rotate-recalc-marks)
 ("C-c }" . org-table-toggle-coordinate-overlays)
 ("C-c {" . org-table-toggle-formula-debugger))
#+END_SRC

** Templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("m" "#+BEGIN_SRC markdown\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("more" "#+HTML:<!--more-->\n?"))
(add-to-list 'org-structure-template-alist '("lh" "#+LATEX_HEADER: " ""))
(add-to-list 'org-structure-template-alist '("lc" "#+LATEX_CLASS: " ""))
(add-to-list 'org-structure-template-alist '("ao" "#+ATTR_ORG: " ""))
(add-to-list 'org-structure-template-alist '("al" "#+ATTR_LATEX: " ""))
(add-to-list 'org-structure-template-alist '("ca" "#+CAPTION: " ""))
(add-to-list 'org-structure-template-alist '("tn" "#+TBLNAME: " ""))
(add-to-list 'org-structure-template-alist '("n" "#+NAME: " ""))
#+END_SRC

** Speed Commands

([[https://raw.githubusercontent.com/jkitchin/scimax/][source]])

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree)) ;; Mark a subtree
(add-to-list 'org-speed-commands-user (cons "S" 'widen)) ;; Widen
(add-to-list 'org-speed-commands-user (cons "k" (lambda () ;; kill a subtree
                                                  (org-mark-subtree)
                                                  (kill-region
                                                   (region-beginning)
                                                   (region-end)))))
(add-to-list 'org-speed-commands-user (cons "J" (lambda () ;; Jump to headline
                                                  (avy-with avy-goto-line
                                                    (avy--generic-jump "^\\*+" nil avy-style)))))
#+END_SRC

** Refiling

Targets include this file and any file contributing to the agenda - up to 9 levels deep
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 9))))
#+END_SRC

Stop using paths for refile targets - we file directly with helm
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path nil)
#+END_SRC

Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes '(confirm))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/verify-refile-target () ; Exclude DONE state tasks from refile targets
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'malb/verify-refile-target)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
;; source http://endlessparentheses.com/ispell-and-org-mode.html
(defun malb/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))

(add-hook 'org-mode-hook #'malb/org-ispell)
(add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC

** Diminish Minor Modes

#+BEGIN_SRC emacs-lisp
(defun malb/diminish-org-indent-mode ()
  (ignore-errors
    (diminish 'org-indent-mode)))

(add-hook 'org-mode-hook #'malb/diminish-org-indent-mode)
#+END_SRC

** Archiving

Archive with tags intact and some order in target file preserved. ([[http://orgmode.org/worg/org-hacks.html][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/org-inherited-no-file-tags ()
  (let ((tags (org-entry-get nil "ALLTAGS" 'selective))
        (ltags (org-entry-get nil "TAGS")))
    (mapc (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (concat tag ":") "" tags)))
          (append org-file-tags (when ltags (split-string ltags ":" t))))
    (if (string= ":" tags) nil tags)))

(defadvice org-archive-subtree (around malb/org-archive-subtree-low-level activate)
  (let ((tags (malb/org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (> (org-outline-level) 1))
             (concat (car (split-string org-archive-location "::"))
                     "::* "
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))
#+END_SRC

** Habit

#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :config (add-to-list 'org-modules 'org-habit))
#+END_SRC

** Protocol

#+BEGIN_SRC emacs-lisp
(use-package org-protocol)
#+END_SRC

** Bullets

Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.

[[https://raw.githubusercontent.com/sabof/org-bullets/master/screenshot.png]] ([[https://raw.githubusercontent.com/sabof/org-bullets/master/screenshot.png][source]])

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :commands org-bullets-mode
  :init  (progn

           (defun malb/enable-org-bullets ()
             (org-bullets-mode 1))

           (add-hook 'org-mode-hook #'malb/enable-org-bullets)
           (setq org-bullets-bullet-list '("●" "▲" "■" "✶" "◉" "○" "○"))))
#+END_SRC

** Export

UTF-8 everywhere.

#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8
      org-export-in-background nil
      org-export-babel-evaluate nil
      org-export-with-timestamps 'active
      org-export-async-init-file (expand-file-name "org-export-init.el" user-emacs-directory))
#+END_SRC

*** iCalendar

iCal export is triggered after 600 seconds of inactivity.

*Note*: this code is definitely from somewhere else. I don’t remember where, though.

#+BEGIN_SRC emacs-lisp
(use-package ox-icalendar
  :config (progn
            (setq org-icalendar-include-todo t
                  org-icalendar-combined-agenda-file malb/org-mode-ics
                  org-icalendar-categories '(category)
                  org-icalendar-use-scheduled '(todo-start event-if-not-todo)
                  org-icalendar-use-deadline '(todo-due)
                  org-icalendar-with-timestamps 'active)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar malb/org-icalendar-export-timer nil
  "Timer that `malb/org-icalendar-export-timer' used to reschedule itself, or nil.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/org-icalendar-export-with-delay (secs)
  "Export after `secs' seconds unless the file changed in the mean time."
  (when malb/org-icalendar-export-timer
    (cancel-timer malb/org-icalendar-export-timer))
  (setq malb/org-icalendar-export-timer
        (run-with-idle-timer
         (* 1 secs) nil (lambda ()
                          ;; async, check org-export-init.el
                          (org-icalendar-combine-agenda-files t)
                          (org-agenda-redo)
                          ))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/ox-export-after-save-hook ()
  "Save after 600 seconds of no changes."
  (if (eq major-mode 'org-mode)
      (malb/org-icalendar-export-with-delay 600)))

(add-hook 'after-save-hook 'malb/ox-export-after-save-hook)
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package ox-md)
#+END_SRC

*** LaTeX

- Use [[http://www.xelatex.org][XeLaTeX]] because UTF-8 and fonts.
- Drop =\usepackage[T1]{fontenc}= because XeLaTeX doesn’t need and like it it.
- We add [[https://www.ctan.org/pkg/tufte-latex?lang=en][tufte-handout]] as a class for our … handouts.

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :config (progn
            (setq org-latex-listings 't)
            (add-to-list 'org-latex-packages-alist '("" "listings"))
            (add-to-list 'org-latex-packages-alist '("" "xcolor"))
            (add-to-list 'org-latex-packages-alist '("" "amssymb"))
            (add-to-list 'org-latex-packages-alist '("" "amsmath"))
            (add-to-list 'org-latex-packages-alist '("" "gensymb"))
            (add-to-list 'org-latex-packages-alist '("" "nicefrac"))
            (add-to-list 'org-latex-packages-alist '("" "units"))

            (setq org-latex-pdf-process '("latexmk -xelatex -output-directory=%o -pdf %f")
                  org-latex-caption-above nil
                  org-latex-default-packages-alist (remove* '("T1" "fontenc" t)
                                                            org-latex-default-packages-alist :test 'equal)
                  org-latex-default-packages-alist (remove '("AUTO" "inputenc" t)
                                                           org-latex-default-packages-alist)
                  org-latex-hyperref-template  (concat "\\hypersetup{\n"
                                                       "pdfauthor={%a},\n"
                                                       "pdftitle={%t},\n"
                                                       "pdfkeywords={%k},\n"
                                                       "pdfsubject={%d},\n"
                                                       "pdfcreator={%c},\n"
                                                       "pdflang={%L},\n"
                                                       "colorlinks,\n"
                                                       "citecolor=gray,\n"
                                                       "filecolor=gray,\n"
                                                       "linkcolor=gray,\n"
                                                       "urlcolor=gray\n"
                                                       "}\n"))

            (add-to-list 'org-latex-classes
                         (list "handout"
                               (concat "\\documentclass{tufte-handout}\n"
                                       "\\usepackage{fontspec}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       "[EXTRA]\n")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

            (add-to-list 'org-latex-classes
                         (list "org-report"
                               (concat "\\documentclass{report}\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\usepackage[a4paper,includeheadfoot,margin=2.54cm]{geometry}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "\\parskip 1em\n"
                                       "\\parindent 0pt\n"
                                       "\\linespread{1.25}\n"
                                       "[EXTRA]\n")
                               '("\\chapter{%s}" . "\\chapter*{%s}")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

            (add-to-list 'org-latex-classes
                         (list "marticle"
                               (concat "\\documentclass{article}\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\usepackage[a4paper,includeheadfoot,margin=2.54cm]{geometry}\n"
                                       "\\usepackage{unicodesymbols}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       "\\usepackage[backend=bibtex,style=alphabetic,maxnames=8,citestyle=alphabetic]{biblatex}\n"
                                       "\\DeclareFieldFormat{title}{\\textbf{#1}}\n"
                                       "\\DeclareFieldFormat[book]{title}{\\textbf{#1}}\n"
                                       "\\DeclareFieldFormat[thesis]{title}{\\textbf{#1}}\n"
                                       "\\DeclareFieldFormat[inproceedings]{title}{\\textbf{#1}}\n"
                                       "\\DeclareFieldFormat[article]{title}{\\textbf{#1}}\n"
                                       "\\DeclareFieldFormat[misc]{title}{\\textbf{#1}}\n"
                                       "\\parskip 1em\n"
                                       "\\parindent 0pt\n"
                                       "\\lstdefinelanguage{Sage}[]{Python}{morekeywords={True,False,sage,cdef,cpdef,ctypedef,self},sensitive=true}\n"
                                       "\\lstset{frame=none,showtabs=False, showspaces=False, showstringspaces=False,\n"
                                       "         commentstyle={\\color{gray}}, keywordstyle={\\color{black}\\textbf},\n"
                                       "         stringstyle={\\color{darkgray}}, frame=single, basicstyle=\\tt\\scriptsize\\relax,\n"
                                       "         inputencoding=utf8, literate={…}{{\\ldots}}1, belowskip=0.0em,}\n"
                                       "[EXTRA]\n")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
            ))

(use-package ox-koma-letter
  :config (progn
            (add-to-list 'org-latex-classes
                         (list "letter"
                               (concat "\\documentclass{scrlttr2}\n"
                                       "\\usepackage{fontspec}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[EXTRA]\n")))))
#+END_SRC

**** TODO using latexmk (like this) means we get less feedback than we’d like

*** Beamer

_underline_ becomes *bold* in Beamer. ([[https://xgarrido.github.io/emacs-starter-kit/starter-kit-org.html][source]])

#+BEGIN_SRC emacs-lisp
(use-package ox-beamer
  :config (progn
            (add-to-list 'org-beamer-environments-extra
                         '("lemma" "l" "\\begin{lemma}%a" "\\end{lemma}"))
            (defun malb/beamer-underline (contents backend info)
              (when (eq backend 'beamer)
                (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))

            (add-to-list 'org-export-filter-underline-functions 'malb/beamer-underline)

            (add-to-list 'org-latex-classes
                         (list "mbeamer"
                               (concat  "\\documentclass[presentation,smaller]{beamer}\n"
                                        (with-temp-buffer
                                          (insert-file-contents
                                           (expand-file-name "talk-header.tex" user-emacs-directory))
                                          (buffer-string)))
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC

*** ODT

#+BEGIN_SRC emacs-lisp
(use-package ox-odt
  :init (progn
          (setq org-odt-styles-file
                (expand-file-name "org-export-template.odt" user-emacs-directory))))
#+END_SRC

Enable inline comments in org-export ([[https://gist.github.com/andersjohansson/6baa1e42ad4d7353e125][source]])

#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "local/ox-inline-comments.el" user-emacs-directory))
#+END_SRC

**** TODO org-odt-style-file doesn’t seem to take

*** JSON

([[https://github.com/mattduck/org-toggl-py/blob/master/org-export-json.el][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/org-json-export-as-json ()
  (interactive)
  (let* ((tree
          (save-restriction
            (org-narrow-to-subtree)
            (org-element-parse-buffer 'object nil))))
    (org-element-map tree (append org-element-all-elements
                                  org-element-all-objects '(plain-text))
      (lambda (x)
        (if (org-element-property :parent x)
            (org-element-put-property x :parent nil))
        (if (org-element-property :structure x)
            (org-element-put-property x :structure nil))
        ))
    (save-excursion
      (generate-new-buffer "*org-json*")
      (switch-to-buffer-other-window "*org-json*")
      (json-mode)
      (insert (json-encode tree))
      (json-mode-beautify))
    ))
#+END_SRC

**** TODO the output of =malb/org-json-export-as-json= is way too messy

*** Reveal.js

[[https://github.com/yjwen/org-reveal][ox-reveal]] — Presentations using [[http://lab.hakim.se/reveal-js/][reveal.js]].

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t
  :config
  (progn
    (setq org-reveal-root (expand-file-name "reveal.js/" user-emacs-directory)
          org-reveal-hlevel 2
          org-reveal-head-preamble "<style type=\"text/css\">.reveal p {text-align: left;}</style>"
          org-reveal-theme "solarized" ; beige blood moon night serif simple sky solarized
          org-reveal-mathjax t)))
#+END_SRC

*** Bootstrap

[[https://github.com/marsmining/ox-twbs][ox-twbs]] - Twitter Bootstrap.

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :ensure t)
#+END_SRC

*** Pandoc

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :ensure t
  :init (progn
          (setq org-pandoc-menu-entry  '((113 "to commonmark and open." org-pandoc-export-to-commonmark-and-open)
                                         (81 "as commonmark." org-pandoc-export-as-commonmark)
                                         (120 "to docx and open." org-pandoc-export-to-docx-and-open)
                                         (88 "to docx." org-pandoc-export-to-docx)
                                         (51 "to epub and open." org-pandoc-export-to-epub-and-open)
                                         (35 "to epub." org-pandoc-export-to-epub)
                                         (101 "to epub3 and open." org-pandoc-export-to-epub3-and-open)
                                         (69 "to epub3." org-pandoc-export-to-epub3)
                                         (106 "to json and open." org-pandoc-export-to-json-and-open)
                                         (74 "as json." org-pandoc-export-as-json)
                                         (58 "to rst and open." org-pandoc-export-to-rst-and-open)
                                         (42 "as rst." org-pandoc-export-as-rst)))))
#+END_SRC

*** Rich Text Clipboard

Place rich text version of selection in clipboard ([[https://melpa.org/#/ox-clip][source]])

#+BEGIN_SRC emacs-lisp
(use-package ox-clip
  :ensure t)
#+END_SRC

** Capture

If we are in a project we might add a TODO entry to the appropriate entry in =projects.org=.

#+BEGIN_SRC emacs-lisp
(defun malb/org-capture-projectile ()
  (if (projectile-project-p)
      (progn
        (let ((malb/projectile-name
               (projectile-project-name)))
          (find-file (expand-file-name "projects.org" malb/org-files-dir))
          (goto-char (point-min))
          (if (re-search-forward (concat "^\* " malb/projectile-name ".*\n") nil t)
              (newline 1)
            (progn
              (goto-char (point-max))
              (insert (concat "* " malb/projectile-name))
              (newline 1)
              ))))
    (progn
      (find-file malb/private-org)
      (goto-char (point-min))
      (re-search-forward "^\* Tasks" nil t)
      (newline 1))
    ))
#+END_SRC

*Template Expansions*

- =%[file]= Insert the contents of the file given by file.
- =%(sexp)= Evaluate Elisp sexp and replace with the result. For convenience, =%:keyword= (see below) placeholders within the expression will be expanded prior to this. The sexp must return a string.
- =%<...>= The result of format-time-string on the … format specification.
- =%t= Timestamp, date only.
- =%T= Timestamp, with date and time.
- =%u, %U= Like the above, but inactive timestamps.
- =%i= Initial content, the region when capture is called while the region is active. The entire text will be indented like =%i= itself.
- =%a= Annotation, normally the link created with ~org-store-link~.
- =%A= Like =%a=, but prompt for the description part.
- =%l= Like =%a=, but only insert the literal link.
- =%c= Current kill ring head.
- =%x= Content of the X clipboard.
- =%K= Link to the currently clocked task.
- =%k= Title of the currently clocked task.
- =%n= User name (taken from user-full-name).
- =%f= File visited by current buffer when org-capture was called.
- =%F= Full path of the file or directory visited by current buffer.
- =%:keyword= Specific information for certain link types, see below.
- =%^g= Prompt for tags, with completion on tags in target file.
- =%^G= Prompt for tags, with completion all tags in all agenda files.
- =%^t= Like %t, but prompt for date. Similarly =%^T=, =%^u=, =%^U=. You may define a prompt like =%^{Birthday}t=.
- =%^L= Like %^C, but insert as link.
- =%^C= Interactive selection of which kill or clip to use.
- =%^{prop}p= Prompt the user for a value for property prop.
- =%^{prompt}= prompt the user for a string and replace this sequence with it. You may specify a default value and a completion table with =%^{prompt|default|completion2|completion3...}=. The arrow keys access a prompt-specific history.
- =%\n= Insert the text entered at the nth =%^{prompt}=, where n is a number, starting from 1.
- =%?= After completing the template, position cursor here.

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :bind ("<f9>" . org-capture)
  :config (setq org-capture-templates
                '(("t" "task"
                   entry (file malb/inbox-org)
                   "** TODO %?\n%i" :prepend t)

                  ("p" "project task" plain (function malb/org-capture-projectile)
                   "** TODO %?\n%a\n" :prepend t)

                  ("k" "respond to email (KMail)"
                   entry (file+headline malb/inbox-org "Email")
                   "* REPLY to [[mailto:%link][%:description]]\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n\n[[mailto:%:link][%:link]] wrote:\n#+BEGIN_QUOTE\n%x\n#+END_QUOTE\n\n"
                   :immediate-finish t
                   :prepend t)

                  ("r" "respond ro email (mu4e)"
                   entry (file+headline malb/inbox-org "Email")
                   "* REPLY to [[mailto:%:fromaddress][%:fromname]] on %a\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n%U\n\n"
                   :immediate-finish t
                   :prepend t)

                  ("f" "file email (mu4e)"
                   entry (file+headline malb/inbox-org "Email")
                   "* %a by [[mailto:%:fromaddress][%:fromname]]\n%U\n\n%i%?\n"
                   :immediate-finish nil
                   :prepend nil)

                  ("j" "journal entry"
                   entry (file+datetree (expand-file-name "journal.org" malb/org-files-dir))
                   "** research\n%?\n** critique\n\n"))))
#+END_SRC

** Org EWW

Paste websites to org-mode with ~org-eww-copy-for-org-mode~.

#+BEGIN_SRC emacs-lisp
(use-package org-eww)
#+END_SRC

** [#C] Meeting Notes

#+BEGIN_QUOTE
I've notice that while I really like taking notes in a meeting, I don't always like the multiple windows I have opened, so I created this function that I can easily call to eliminate distractions enduring a meeting. ([[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org][source]])
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
  should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)                              ;; Select org-mode section
  (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
  (deactivate-mark)
  (delete-other-windows)                              ;; Get rid of other windows
  (text-scale-set 2)                                  ;; Text is now readable by others
  (fringe-mode 0)
  (olivetti-mode 1)
  (olivetti-set-width 110)
  (olivetti-toggle-hide-modeline)
  (message "When finished taking your notes, run meeting-done."))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)                                       ;; Opposite of narrow-to-region
  (text-scale-set 0)                            ;; Reset the font size increase
  (fringe-mode 1)
  (olivetti-toggle-hide-modeline)
  (olivetti-mode 0)
  (winner-undo))                                ;; Put the windows back in place
#+END_SRC

** [#C] Org Tree Slide

#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :ensure t
  :config (progn
            (bind-key "C-<left>"
                      #'org-tree-slide-move-previous-tree org-tree-slide-mode-map)
            (bind-key "C-<right>"
                      #'org-tree-slide-move-next-tree org-tree-slide-mode-map)
            (bind-key "<f11>"
                      #'org-tree-slide-content org-tree-slide-mode-map)
            (setq org-tree-slide-skip-outline-level 2)))
#+END_SRC

** Auto Completion

#+BEGIN_SRC emacs-lisp
(defun malb/org-mode-complete-hook ()
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'malb/org-mode-complete-hook)
#+END_SRC

** Eldoc

Activate eldoc and show footnotes in minibuffer.

#+BEGIN_SRC emacs-lisp
(use-package org-eldoc
  :config (progn
            (add-hook 'org-mode-hook #'org-eldoc-load)
            (add-hook 'org-mode-hook #'eldoc-mode)))

(defun malb/org-eldoc-get-footnote ()
  (save-excursion
    (let ((fn (org-between-regexps-p "\\[fn:" "\\]")))
      (when fn
        (save-match-data
          (nth 3 (org-footnote-get-definition (buffer-substring (+ 1 (car fn)) (- (cdr fn) 1)))))))))

(advice-add 'org-eldoc-documentation-function
            :before-until #'malb/org-eldoc-get-footnote)
#+END_SRC

** Functions

([[http://emacs.stackexchange.com/a/10712/115][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/org-delete-link ()
  "Replace an org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole org link.
In both the cases, save the LINK to the kill-ring.
Execute this command while the point is on or after the hyper-linked org link."
  (interactive)
  (when (derived-mode-p 'org-mode)
    (let ((search-invisible t) start end)
      (save-excursion
        (when (re-search-backward "\\[\\[" nil :noerror)
          (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                   nil :noerror)
            (setq start (match-beginning 0))
            (setq end   (match-end 0))
            (kill-new (match-string-no-properties 1)) ; Save link to kill-ring
            (replace-regexp "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" "\\2"
                            nil start end)))))))
#+END_SRC

** Tips
*** Agenda commands

| ~F~         | ~(org-agenda-follow-mode)~           | Toggle Follow mode                                     |
| ~L~         | ~(org-agenda-recenter)~              | Display original location and recenter that window.    |
| ~o~         |                                      | Delete other windows.                                  |
| ~f~         | ~(org-agenda-later)~                 | Go forward in time to display                          |
| ~b~         | ~(org-agenda-earlier)~               | Go backward in time to display earlier dates           |
| ~r~ and ~g~ | ~(org-agenda-redo)~                  | Recreate the agenda buffer.                            |
| ~C-c C-s~   | ~(org-agenda-schedule)~              | Schedule this item.                                    |
| ~C-c C-d~   | ~(org-agenda-deadline)~              | Set a deadline for this item.                          |
| ~S-<right>~ | ~(org-agenda-do-date-later)~         | Change the timestamp by one day into the future.       |
| ~S-<left>~  | ~(org-agenda-do-date-earlier)~       | Change the timestamp by one day into the past.         |
| ~>~         | ~(org-agenda-date-prompt)~           | Change the timestamp associated with the current line. |
| ~m~         | ~(org-agenda-bulk-mark)~             | Mark the entry at point for bulk action.               |
| ~*~         | ~(org-agenda-bulk-mark-all)~         | Mark all visible agenda entries for bulk action.       |
| ~u~         | ~(org-agenda-bulk-unmark)~           | Unmark entry at point for bulk action.                 |
| ~U~         | ~(org-agenda-bulk-remove-all-marks)~ | Unmark all marked entries for bulk action.             |
| ~B~         | ~(org-agenda-bulk-action)~           | Bulk action: act on all marked entries in the agenda.  |
#+TBLFM:

*** Commands I easily forget

- =C-c C-j= calls ~(org-goto)~ which jumps to headlines in a file
- =C-c /= calls ~(org-sparse-tree)~ which reduces the tree to the nodes with some attribute

*** Style

In org-mode we can style inline elements with *bold*, /italic/, _underlined_, =verbatim=, and ~code~. But this breaks if the character just inside the styling code is a non-smart single or double quote. =C-c ;= is styled; =C-c '= is not. We can fix that by inserting a zero-width space between the apostrophe and the = . The first time, we can put the cursor between the apostrophe and the = and enter ~C-x 8 RET ZERO WIDTH SPACE RET~, at which point =C-c '​= will display correctly.

*** Batch Exporting

*Note* the order matters, i.e. open the file first then call =org-latex-export-to-pdf=

#+BEGIN_SRC sh :tangle no
emacs --batch -l ~/.emacs.d/org-export-init.el file.org -f org-latex-export-to-pdf
#+END_SRC

* Git
** Magit

[[http://magit.vc][Magit]] is a very nice Git interface.

[[http://magit.vc/img/shot/top.png]] ([[http://magit.vc][source]])

We enable [[https://github.com/magit/magit-svn][magit-svn]] whenever necessary.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands (magit-status
             magit-diff
             magit-commit
             magit-log
             magit-push
             magit-stage-file
             magit-unstage-file)
  :bind ("<f7>" . magit-status)
  :config (progn
            (setq magit-push-always-verify nil
                  magit-last-seen-setup-instructions "2.1.0")

            ;; we use magit, not vc for git
            (delete 'Git vc-handled-backends)
            ))

(use-package magit-svn
  :ensure t
  :config (progn
            (defun malb/magit-svn ()
              (if (file-exists-p (magit-git-dir "svn"))
                  (magit-svn-mode)))
            (add-hook 'magit-mode-hook #'malb/magit-svn)))
#+END_SRC

** GitHub Pull Requests

Handle [[https://github.com/sigma/magit-gh-pulls][pull requests]] from magit

*Commands:*

- Press ~# g g~ to refresh the list of pull requests.
- Highlighting the desired PR and pressing ~# g f~ will fetch the commits associated with the PR.
- Press ~# g b~ on the PR to create a topic branch for this PR.
- Press ~# g m~ to merge the PR on top of the currently checked out branch.

#+BEGIN_SRC emacs-lisp
(require 'ert) ;; https://github.com/sigma/magit-gh-pulls/issues/32
(use-package magit-gh-pulls
  :ensure t)
#+END_SRC

*** TEST if =magit-gh-pulls= can be enabled by default without causing delay

** Org Links for Magit Buffers

[[https://github.com/magit/orgit][orgit]]

#+BEGIN_SRC emacs-lisp
(use-package orgit
  :ensure t)
#+END_SRC

** Git Timemachine

I don’t often use [[https://github.com/pidu/git-timemachine#start-of-content][git-timemachine]] but when I do …

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t)
#+END_SRC

** Git Link

[[https://github.com/sshaw/git-link][git-link]]:

#+BEGIN_QUOTE
functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories. =git-link= returns the URL for the current buffer's file location at the current line number or active region. =git-link-commit= returns the URL for a commit. URLs are added to the kill ring.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package git-link
  :ensure t)
#+END_SRC

** Gists

To list [[https://github.com/defunkt/gist.el][gists]], run ~gist-list~:

- =g= - reload the gist list from server
- =e= - edit current gist description
- =k= - delete current gist
- =+= - add a file to the current gist
- =–= - remove a file from the current gist

- =C-x C-s= - save a new version of the gist
- =C-x C-w= - rename some file

From a dired buffer, you can: =@= - make a gist out of marked files (with a prefix, make it private)

~gist-region-or-buffer~ - Post either the current region, or if mark is not set, the current buffer as a new paste at https://gist.github.com . Copies the URL into the kill ring. With a prefix argument, makes a private paste.

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :config (progn
            (setq gist-ask-for-description t)))
#+END_SRC

* Email

Email is fetched by [[http://isync.sourceforge.net/mbsync.html][mbsync]] and parsed by [[http://www.djcbsoftware.nl/code/mu/][mu]]. Then, we use [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]].

#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :config  (setq mu4e-headers-skip-duplicates t
                 mu4e-use-fancy-chars t
                 mu4e-view-show-images t
                 message-kill-buffer-on-exit t
                 mu4e-hide-index-messages t
                 mu4e-auto-retrieve-keys t
                 mu4e-compose-dont-reply-to-self t
                 mu4e-compose-in-new-frame t
                 mu4e-split-view 'horizontal
                 mu4e-headers-visible-columns 122
                 mu4e-headers-visible-lines 16
                 mu4e-context-policy 'pick-first
                 mu4e-compose-context-policy 'ask
                 mu4e-change-filenames-when-moving t
                 mu4e-confirm-quit nil))
#+END_SRC

** Prettier ([[https://github.com/Bronsa/.emacs.d/blob/master/config/mu4e.el][source]])

#+BEGIN_SRC emacs-lisp
(setq mu4e-use-fancy-chars t
      mu4e-headers-draft-mark     '("D" . "⚒ ") ; draft
      ;; mu4e-headers-seen-mark      '("S" . "☑ ")  ; seen
      ;; mu4e-headers-unread-mark    '("u" . "☐ ")  ; unseen
      mu4e-headers-new-mark       '("N" .  "")
      mu4e-headers-seen-mark      '("S" . "")    ; seen
      mu4e-headers-unread-mark    '("u" . "")    ; unseen
      mu4e-headers-flagged-mark   '("F" .  "⚵ ") ; flagged
      mu4e-headers-new-mark       '("N" .  "✉ ")  ; new
      mu4e-headers-replied-mark   '("R" . "↵ ")  ; replied
      mu4e-headers-passed-mark    '("P" . "⇉ ")  ; passed
      mu4e-headers-encrypted-mark '("x" . "⚷ ")   ; encrypted
      mu4e-headers-signed-mark    '("s" . "✍ ")  ; signed
      mu4e-headers-empty-parent-prefix '("-" . "○")
      mu4e-headers-first-child-prefix '("\\" . "▶")
      mu4e-headers-has-child-prefix '("+" . "●"))
#+END_SRC

** Folders

#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir malb/mu4e-maildir
      mu4e-drafts-folder "/[Google Mail]/.Drafts"
      mu4e-sent-folder   "/[Google Mail]/.Sent Mail"
      mu4e-trash-folder  "/[Google Mail]/.Bin")

(setq mu4e-maildir-shortcuts
      '(("/Inbox"                     . ?i)
        ("/[Google Mail]/.Drafts"     . ?d)
        ("/[Google Mail]/.Sent Mail"  . ?s)
        ("/[Google Mail]/.Bin"        . ?t)))
#+END_SRC

** Queries

#+BEGIN_SRC emacs-lisp
(add-to-list
 'mu4e-bookmarks
 '("flag:unread NOT flag:trashed AND (flag:list OR from:trac@sagemath.org OR maildir:/bulk OR maildir:/research/.lists)"
   "Unread bulk messages" ?l))

(add-to-list
 'mu4e-bookmarks
 '("flag:unread NOT flag:trashed AND NOT flag:list AND (maildir:\"/royal holloway\" OR maildir:/INBOX)"
   "Unread messages addressed to me" ?i))

(add-to-list
 'mu4e-bookmarks
 '("mime:application/* AND NOT mime:application/pgp* AND (maildir:\"/royal holloway\" OR maildir:/INBOX)"
   "Messages with attachments for me." ?d) t)

(add-to-list
 'mu4e-bookmarks
 '("flag:flagged"
   "Flagged messages" ?f) t)

(add-to-list
 'mu4e-bookmarks
 '("(maildir:\"/[Google Mail]/.Sent Mail\" OR maildir:\"/royal holloway/.sent\") AND date:7d..now"
   "Sent in last 7 days" ?s) t)
#+END_SRC

** Retrieving Mail

#+BEGIN_SRC emacs-lisp
(setq mu4e-get-mail-command "timelimit -t 180 -T 180 mbsync googlemail-default"
      mu4e-update-interval nil)
#+END_SRC

** Sending Email

email is sent with [[https://www.opensmtpd.org][opensmtpd]]’s =sendmail=.

Set =format=flowed= ([[https://github.com/djcb/mu/issues/569][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/compose-setup ()
  "Use hard newlines, so outgoing mails will have format=flowed."
  (use-hard-newlines t 'guess))
#+END_SRC

Set email width to 72 characters

#+BEGIN_SRC emacs-lisp
(defun malb/fill-column-72 ()
  (set-fill-column 72))
#+END_SRC

To use a bit of org-mode’s magic as well by pulling in [[http://orgmode.org/manual/Orgtbl-mode.html][orgtbl-mode]] and [[http://orgmode.org/manual/Orgstruct-mode.html][orgstruct++-mode]]. We also enable footnotes, to add a footnote try =C-c ! a=

#+BEGIN_SRC emacs-lisp
(add-hook 'mu4e-compose-mode-hook #'malb/fill-column-72)
(add-hook 'mu4e-compose-mode-hook #'malb/mu4e-compose-frame)
(add-hook 'message-mode-hook #'flyspell-mode)
(add-hook 'message-mode-hook #'turn-on-orgstruct)
(add-hook 'message-mode-hook #'turn-on-orgstruct++)
(add-hook 'message-mode-hook #'turn-on-orgtbl)
(add-hook 'message-mode-hook #'typo-mode)
(add-hook 'message-mode-hook #'olivetti-mode)
(add-hook 'message-mode-hook #'adict-guess-dictionary)
(add-hook 'message-mode-hook #'footnote-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org
;; TODO: this means the header does not end
;; (defun malb/strip-message-mode-problematic-text-props ()
;;   (save-excursion
;;     (goto-char (point-min))
;;     (when (search-forward-regexp (concat "^" mail-heaqder-separator) nil t)
;;       (remove-text-properties (match-beginning 0) (match-end 0) '(rear-nonsticky)))))

;; (add-hook 'message-mode-hook #'malb/strip-message-mode-problematic-text-props)
;; (add-hook 'mu4e-compose-mode-hook #'malb/iqbal-strip-message-mode-problematic-text-props)
#+END_SRC

Don’t add an empty line when quoting email ([[https://lists.gnu.org/archive/html/info-gnus-english/2010-04/msg00019.html][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/message-insert-citation-line ()
  "Insert a simple citation line."
  (when message-reply-headers
    (newline)
    (insert (mail-header-from message-reply-headers) " writes:")
    (newline)))

(setq message-citation-line-function #'malb/message-insert-citation-line)
#+END_SRC

Put attachments at end of buffer ([[http://mbork.pl/2015-11-28_Fixing_mml-attach-file_using_advice][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/mml-attach-file--go-to-eob (orig-fun &rest args)
  "Go to the end of buffer before attaching files."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-max))
      (apply orig-fun args))))

(advice-add 'mml-attach-file :around #'malb/mml-attach-file--go-to-eob)
#+END_SRC

Yell at me when I forget to attach attachment ([[http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/message-attachment-present-p ()
  "Return t if an attachment is found in the current message."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (when (search-forward "<#part" nil t) t))))

(defcustom malb/message-attachment-intent-re
  (regexp-opt '("I attach"
                "I have attached"
                "I've attached"
                "I have included"
                "I've included"
                "see the attached"
                "see the attachment"
                "attached file"))
  "A regex which - if found in the message, and if there is no
attachment - should launch the no-attachment warning.")

(defcustom malb/message-attachment-reminder
  "Are you sure you want to send this message without any attachment? "
  "The default question asked when trying to send a message
containing `malb/message-attachment-intent-re' without an
actual attachment.")

(defun malb/message-warn-if-no-attachments ()
  "Ask the user if s?he wants to send the message even though
there are no attachments."
  (when (and (save-excursion
               (save-restriction
                 (widen)
                 (goto-char (point-min))
                 (re-search-forward malb/message-attachment-intent-re nil t)))
             (not (malb/message-attachment-present-p)))
    (unless (y-or-n-p malb/message-attachment-reminder)
      (keyboard-quit))))

(add-hook 'message-send-hook #'malb/message-warn-if-no-attachments)
#+END_SRC

** Viewing Email

Render HTML emails in =eww= = =shr=

#+BEGIN_SRC emacs-lisp
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(use-package mu4e-contrib
  :config (setq mu4e-html2text-command 'mu4e-shr2text))
#+END_SRC

Use =<TAB>= to preview messages and =q= to close previews.

#+BEGIN_SRC emacs-lisp
(require 'mu4e-view)
(require 'mu4e-headers)

(defun malb/preview-message ()
  (interactive)
  (mu4e-headers-view-message)
  (sleep-for 0.1) ;; this is a HACK
  (select-window (previous-window)))

;; based on (mu4e-select-other-view)
(defun malb/close-message-view ()
  (interactive)
  (let* ((other-buf mu4e~view-buffer)
         (other-win (and other-buf (get-buffer-window other-buf))))
    (if (window-live-p other-win)
        (progn
          (select-window other-win)
          (sleep-for 0.1)
          (mu4e~view-quit-buffer))
      (mu4e~headers-quit-buffer))
    ))

(bind-key "<tab>" #'malb/preview-message mu4e-headers-mode-map)
(bind-key "q" #'malb/close-message-view mu4e-headers-mode-map)
(bind-key "z" #'malb/close-message-view mu4e-headers-mode-map)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-fields '((:human-date . 12)
                            (:flags . 6)
                            (:mailing-list . 22)
                            (:from . 32)
                            (:subject)))
#+END_SRC

View emails with width restriction (110 so that HTML crap doesn’t break too easily either)

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-view-mode-hook ()
  (setq olivetti-body-width 110)
  (olivetti-mode))

(add-hook 'mu4e-view-mode-hook #'malb/mu4e-view-mode-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("browser" . mu4e-action-view-in-browser) t)

(bind-key "<home>" #'beginning-of-visual-line mu4e-view-mode-map)
(bind-key "<end>" #'end-of-visual-line mu4e-view-mode-map)
#+END_SRC

** Contacts

- My uni likes “Lastname, Firstname (Year)” which is weird, so we fix it.
- Some people like to YELL their LASTNAME and then write the first name, we also canonicalise that

#+BEGIN_SRC emacs-lisp
(defun malb/canonicalise-contact-name (name)
  (let ((case-fold-search nil))
    (setq name (or name ""))
    (if (string-match-p "^[^ ]+@[^ ]+\.[^ ]" name)
        ""
      (progn
        (setq name (replace-regexp-in-string "^\\(.*\\) [^ ]+@[^ ]+\.[^ ]" "\\1" name)) ;; drop email address
        (setq name (replace-regexp-in-string "^\"\\(.*\\)\"" "\\1" name)) ;; strip quotes
        (setq name (replace-regexp-in-string "^\\(\\<[[:upper:]]+\\>\\) \\(.*\\)" "\\2 \\1" name)) ;; deal with YELL’d last names
        (setq name (replace-regexp-in-string "^\\(.*\\), \\([^ ]+\\).*" "\\2 \\1" name)) ;; Foo, Bar becomes Bar Foo
        (setq name (or (cdr (assoc name malb/mu4e-name-replacements)) name)) ;; look up names and replace
        ))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-contact-rewrite-function (contact)
  (let* ((name (or (plist-get contact :name) ""))
         (mail (plist-get contact :mail))
         (case-fold-search nil))
    (plist-put contact :name (malb/canonicalise-contact-name name))
    contact))

(setq mu4e-contact-rewrite-function #'malb/mu4e-contact-rewrite-function)
#+END_SRC

Useful in email templates

#+BEGIN_SRC emacs-lisp
(defun malb/yas-get-names-from-fields (fields)
  (let (names
        ret
        name
        point-end-of-line
        (search-regexp (mapconcat (lambda (arg)
                                    (concat "^" arg ": "))
                                  fields "\\|"))
        (case-fold-search nil))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward search-regexp nil t)
        (save-excursion
          (setq point-end-of-line (re-search-forward "$")))
        (setq name (buffer-substring-no-properties (point) point-end-of-line))
        (setq name (split-string name "[^ ]+@[^ ]+," t " ")) ;; split on email@address,
        (setq names (append names name)))
      (dolist (name names)
        (setq name (malb/canonicalise-contact-name name))
        (if (string-match "\\([^ ,]+\\)" name)
            (progn
              (setq name (match-string 1 name))
              (setq name (capitalize name))
              (if ret
                  (setq ret (concat ret ", " name))
                (setq ret name)))))
      (if ret ret "there"))))

(defun malb/yas-get-names-from-to-fields ()
  (interactive)
  (malb/yas-get-names-from-fields '("To")))
#+END_SRC

Ignore some email addresses when auto completing:

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-complete-ignore-address-regexp (rx  (or (seq "no" (zero-or-one "-") "reply")
                                                           (seq "replyto-" (one-or-more char) "@plus.google.com")
                                                           (seq "@" (one-or-more char) ".twitter.com")
                                                           (seq "do-not-reply" (zero-or-more char) "@"))))
#+END_SRC

** Dedicated Email Frame

Create a new mu4e session in a new frame.

#+BEGIN_SRC emacs-lisp
(defun malb/mail ()
  (interactive)
  (select-frame (make-frame-command))
  (sleep-for 0.1) ;; this is a HACK
  (toggle-frame-maximized)
  (sleep-for 0.1) ;; this is a HACK
  (set-frame-size (selected-frame) 200 64)
  (mu4e))
#+END_SRC

Kill mu4e frame.

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-quit-session ()
  (interactive)
  (kill-buffer)
  (delete-frame))

(bind-key "Q" #'malb/mu4e-quit-session mu4e-main-mode-map)
(bind-key "Q" #'malb/mu4e-quit-session mu4e-headers-mode-map)
#+END_SRC

** Window Management

I patched mu4e to be way less clever about window management after sending an email, my local =mu4e~compose-handler= looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
(defun* mu4e~compose-handler (compose-type &optional original-msg includes)
  …
  (when mu4e-compose-in-new-frame
    ;; make sure to close the frame when we're done with the message these are
    ;; all buffer-local;
    ;; (push 'delete-frame message-exit-actions)
    ;; (push 'delete-frame message-postpone-actions)
    )
)
#+END_SRC

and my =mu4e-message-kill-buffer= looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
(defun mu4e-message-kill-buffer ()
  "Wrapper around `message-kill-buffer'.
It restores mu4e window layout after killing the compose-buffer."
  (interactive)
  (let ((current-buffer (current-buffer)))
    (message-kill-buffer)
    ;; Compose buffer killed
    (when (not (equal current-buffer (current-buffer)))
      ;; Restore mu4e
      ;; (if mu4e-compose-in-new-frame
      ;; 	  (delete-frame)
      ;; 	(if (buffer-live-p mu4e~view-buffer)
      ;; 	    (switch-to-buffer mu4e~view-buffer)
      ;; 	  (if (buffer-live-p mu4e~headers-buffer)
      ;; 	      (switch-to-buffer mu4e~headers-buffer)
      ;; 	    ;; if all else fails, back to the main view
      ;; 	    (when (fboundp 'mu4e) (mu4e)))))
      )))
#+END_SRC

I set my compose frame to be a dedicated window, which then takes care of all window management for me.

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-compose-frame ()
  (toggle-frame-maximized)
  (sleep-for 0.25) ;; this is a HACK
  (set-frame-size (selected-frame) 80 80)
  (set-window-dedicated-p (get-buffer-window (current-buffer)) t))
#+END_SRC

** PGP

#+BEGIN_SRC emacs-lisp
(setq mml2015-encrypt-to-self t)
(define-key mu4e-compose-mode-map (kbd "C-c s") 'mml-secure-message-sign-pgpmime)
(define-key mu4e-compose-mode-map (kbd "C-c e") 'mml-secure-message-encrypt-pgpmime)
(setq epg-gpg-program "gpg2")
#+END_SRC

** Org-MU4E

Link to mu4e messages and threads.

#+BEGIN_SRC emacs-lisp
(use-package org-mu4e
  :config (setq org-mu4e-link-query-in-headers-mode t))
#+END_SRC

** Search in Email

Search mu with [[https://github.com/emacs-helm/helm-mu][helm-mu]].

#+BEGIN_SRC emacs-lisp
(use-package helm-mu
  :ensure t
  :config (progn
            (bind-key "S" #'helm-mu mu4e-main-mode-map)))
#+END_SRC

[[http://puntoblogspot.blogspot.de/2016/02/with-this-little-trick-helm-dash-gets.html][Tip:]] =C-c C-f= aka =helm-follow-mode= is your friend.

* Programming (languages)
** General
*** REPL
**** Comint

We want to pick previous inputs based on prefix ([[https://emacs.stackexchange.com/questions/14072/replicate-ipython-history-behaviour-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(use-package comint
  :config (progn
            (dolist (key '("C-<up>" "M-<up>" "M-p"))
              (bind-key key #'comint-previous-matching-input-from-input comint-mode-map))
            (dolist (key '("C-<down>" "M-<down>" "M-n"))
              (bind-key key #'comint-next-matching-input-from-input comint-mode-map))

            (bind-key "M-r" #'helm-comint-input-ring comint-mode-map)

            (setq comint-scroll-to-bottom-on-input t  ; always insert at the bottom
                  comint-input-ignoredups t           ; no duplicates in command history
                  comint-prompt-read-only t           ; don’t overwrite prompt
                  )

            (defun malb/kill-buffer-delete-window ()
              (interactive)
              (let ((kill-buffer-query-functions nil))
                (kill-buffer)))

            (bind-key "C-S-w" #'malb/kill-buffer-delete-window comint-mode-map)))
#+END_SRC

***** Comint History Across Sessions

[[https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/][source]]

Directory where comint history will be stored

  #+BEGIN_SRC emacs-lisp
(defvar comint-history-dir (locate-user-emacs-file "comint-history"))

(unless (file-exists-p comint-history-dir)
  (make-directory comint-history-dir))
  #+END_SRC

Function to write comint history on exit

  #+BEGIN_SRC emacs-lisp
(defun comint-write-history-on-exit (process event)
  (comint-write-input-ring)
  (let ((buf (process-buffer process)))
    (when (buffer-live-p buf)
      (with-current-buffer buf
        (insert (format "\nProcess %s %s" process event))))))
  #+END_SRC

Function to setup comint history

  #+BEGIN_SRC emacs-lisp
(defun turn-on-comint-history ()
  (let ((process (get-buffer-process (current-buffer))))
    (when process
      (setq comint-input-ring-file-name
            (expand-file-name (format "inferior-%s-history"
                                      (process-name process))
                              comint-history-dir))
      (comint-read-input-ring t)
      (add-hook 'kill-buffer-hook 'comint-write-input-ring t t)
      (set-process-sentinel process
                            #'comint-write-history-on-exit))))
  #+END_SRC

Setup comint history on comint start

  #+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook 'turn-on-comint-history)
  #+END_SRC

Save comint history when emacs is killed

  #+BEGIN_SRC emacs-lisp
(defun comint-write-input-ring-all-buffers ()
  (mapc (lambda (buffer) (with-current-buffer buffer (comint-write-input-ring)))
        (buffer-list)))

(add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)
  #+END_SRC

**** [[https://github.com/ffevotte/isend-mode.el][isend]] (poor person’s REPL)

1. Open, say, *Sage*.

2. =M-x= ~isend-associate~ RET *Sage* RET

3. Hitting =C-RET= will send the current line to the interpreter. If a region is active, all lines spanned by the region will be sent (i.e. no line will be only partially sent).

#+BEGIN_SRC emacs-lisp
(use-package isend-mode
  :ensure t
  :config (progn
            ;; If you work with python scripts using iPython
            (add-hook 'isend-mode-hook #'isend-default-ipython-setup)))
#+END_SRC

*** Spell checking

Enable spell checking in comments and documentation.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

*** Flycheck

[[https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png]] ([[http://www.flycheck.org/images/screencast.gif][source]])

Use [[https://github.com/flycheck/flycheck][Flycheck]] to run static checkers on code. We use clang’s checker for flycheck for which we can load per directory configuration using =.dir-locals.el=, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((flycheck-clang-include-path . ("/FULL/PATH/TO/DIR1" "/FULL/PATH/TO/DIR2" ) ))))
#+END_SRC

Make flycheck prettier based on what spacemacs does.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :commands global-flycheck-mode
  :diminish flycheck-mode
  :config (progn
            (global-flycheck-mode)

            (bind-key "C-c f n" #'flycheck-next-error flycheck-mode-map)
            (bind-key "C-c f p" #'flycheck-previous-error flycheck-mode-map)
            (bind-key "C-c f l" #'flycheck-list-errors flycheck-mode-map)

            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (setq flycheck-standard-error-navigation nil)

            (when (fboundp 'define-fringe-bitmap)
              (define-fringe-bitmap 'my-flycheck-fringe-indicator
                (vector #b00000000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00011000
                        #b01111110
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b01111110
                        #b00011000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00000000)))


            (flycheck-define-error-level 'error
              :overlay-category 'flycheck-error-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-error)

            (flycheck-define-error-level 'warning
              :overlay-category 'flycheck-warning-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-warning)

            (flycheck-define-error-level 'info
              :overlay-category 'flycheck-info-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-info)
            ))
#+END_SRC

Use [[https://github.com/yasuyk/helm-flycheck][helm-flycheck]] because reasons.

#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :ensure t
  :config (progn
            (bind-key "C-c f h" #'helm-flycheck flycheck-mode-map)))

#+END_SRC

Use [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to display hints about potential issues.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :ensure t
  :config (progn
            ;; flycheck errors on a tooltip (doesnt work on console)
            (when (display-graphic-p (selected-frame))
              (eval-after-load 'flycheck
                '(custom-set-variables
                  '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
              )
            ))
#+END_SRC

*** Comments

Comments, as I mean, using [[https://github.com/remyferre/comment-dwim-2][comment-dwim-2]].

#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :ensure t
  :bind ("M-;" . comment-dwim-2))
#+END_SRC

Make links in comments and string clickable

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'goto-address-prog-mode)
#+END_SRC

Make bug references in comments and string clickable

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'bug-reference-prog-mode)
#+END_SRC

*** Indenting
**** Obey Project Rules

[[https://github.com/jscheid/dtrt-indent][drt-indent]] guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.

#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :ensure t)
#+END_SRC

**** Agressive Indenting

[[https://github.com/Bruce-Connor/aggressive-indent-mode][aggressive-indent-mode]] for … aggressive indenting.

[[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif]] ([[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif][source]])

Enable it on a per-project basis in order to keep RC check ins clean: use it in own projects but not necessarily in projects where not the main contributor. Use =.dir-locals.el= to enable it, e.g.:

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((aggressive-indent-mode t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
            (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
            (unbind-key "C-c C-q" aggressive-indent-mode-map))
  :diminish aggressive-indent-mode)
#+END_SRC

*** Trailing whitespace

[[https://github.com/lewang/ws-butler][ws-buttler]] for not leaving trailing white spaces without being that guy™.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :config (progn
            ;; adding it to prog-mode-hook causes problems for emacsclient
            (add-hook 'c-mode-common-hook #'ws-butler-mode)
            (add-hook 'python-mode-hook #'ws-butler-mode)
            (add-hook 'cython-mode-hook #'ws-butler-mode)
            (add-hook 'emacs-lisp-mode-hook #'ws-butler-mode)
            ))
#+END_SRC

*** Highlight FIXME and friends

#+BEGIN_SRC emacs-lisp
(defun malb/fixme-highlight ()
  (font-lock-add-keywords nil
                          '(("\\<\\(FIXME\\|BUG\\|TODO\\|HACK\\)" 1
                             font-lock-warning-face t))))

(add-hook 'prog-mode-hook #'malb/fixme-highlight)
(add-hook 'python-mode-hook #'malb/fixme-highlight)
#+END_SRC

*** Which function

Show function in mode-line ([[https://github.com/howardabrams/dot-files/blob/master/emacs-mode-line.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package which-func
  :config (progn
            (which-function-mode 1)
            (setq which-func-unknown ""
                  which-func-maxout 1024
                  which-func-modes '(latex-mode
                                     markdown-mode
                                     c-mode
                                     emacs-lisp-mode
                                     org-mode
                                     c++-mode))

            (setq which-func-format
                  `(" "
                    (:propertize which-func-current local-map
                                 (keymap
                                  (mode-line keymap
                                             (mouse-3 . end-of-defun)
                                             (mouse-2 . narrow-to-defun)
                                             (mouse-1 . beginning-of-defun)))
                                 face which-func
                                 mouse-face mode-line-highlight
                                 help-echo "mouse-1: go to beginning\n\
mouse-2: toggle rest visibility\n\
mouse-3: go to end")
                    " "))
            ))
#+END_SRC

*** Highlight Symbols

#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :diminish highlight-symbol-mode
  :ensure t)
#+END_SRC

*** [#C] Line numbers

#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :ensure t)
#+END_SRC

*** Looking Stuff Up

[[https://github.com/areina/helm-dash][helm-dash]] package uses Dash docsets inside emacs to browse documentation.

#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :ensure t
  :config (progn
            (setq helm-dash-common-docsets '("Bash"
                                             "C"
                                             "C++"
                                             "Emacs Lisp"
                                             "Go"
                                             "HTML"
                                             "Java"
                                             "LaTeX"
                                             "Markdown"
                                             "NumPy"
                                             "Python 2"
                                             "Python 3"
                                             "Vagrant"
                                             "VMware vSphere"
                                             )
                  helm-dash-browser-func 'eww)))
#+END_SRC

[[http://puntoblogspot.blogspot.de/2016/02/with-this-little-trick-helm-dash-gets.html][Tip:]] =C-c C-f= aka =helm-follow-mode= is your friend.

*** GNU Global

Use GNU Global for Java ([[https://tuhdo.github.io/c-ide.html][source]])

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :config (progn  (add-hook 'c-mode-common-hook
                            (lambda ()
                              (when (derived-mode-p 'java-mode)
                                (ggtags-mode t))))

                  (bind-key "C-c g s" #'ggtags-find-other-symbol ggtags-mode-map)
                  (bind-key "C-c g h" #'ggtags-view-tag-history ggtags-mode-map)
                  (bind-key "C-c g r" #'ggtags-find-reference ggtags-mode-map)
                  (bind-key "C-c g f" #'ggtags-find-file ggtags-mode-map)
                  (bind-key "C-c g c" #'ggtags-create-tags ggtags-mode-map)
                  (bind-key "C-c g u" #'ggtags-update-tags ggtags-mode-map)
                  (bind-key "M-," #'pop-tag-mark ggtags-mode-map)))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :ensure t
  :init (setq helm-gtags-prefix-key "\C-cg"
              helm-gtags-suggested-key-mapping t)
  :diminish helm-gtags-mode
  :config (progn  (setq helm-gtags-ignore-case t
                        helm-gtags-auto-update t
                        helm-gtags-use-input-at-cursor t
                        helm-gtags-pulse-at-cursor t)

                  (add-hook 'java-mode-hook #'helm-gtags-mode)

                  (bind-key "C-c g a" #'helm-gtags-tags-in-this-function helm-gtags-mode-map)
                  (bind-key "C-j"     #'helm-gtags-select helm-gtags-mode-map)
                  (bind-key "M-."     #'helm-gtags-dwim helm-gtags-mode-map)
                  (bind-key "M-,"     #'helm-gtags-pop-stack helm-gtags-mode-map)
                  (bind-key "C-c <"   #'helm-gtags-previous-history helm-gtags-mode-map)
                  (bind-key "C-c >"   #'helm-gtags-next-history helm-gtags-mode-map)))
#+END_SRC

*** RTags

[[https://github.com/Andersbakken/rtags][RTags]] can come in handy.

1. create a =compile-commands.json= file using [[https://github.com/rizsotto/Bear][bear]].
2. launch =rdm=
3. tell rtags about the project =cd /project/dir/ && rc -J /path/to/compile-commands.json=

On the other hand, rtags seems to have trouble dealing with inline functions.

#+BEGIN_SRC emacs-lisp
(use-package rtags
  :ensure t
  :config (progn
            (rtags-enable-standard-keybindings)
            (setq rtags-use-helm t)
            (add-hook 'c-mode-common-hook #'rtags-start-process-unless-running)
            (add-hook 'c++-mode-common-hook #'rtags-start-process-unless-running)
            (add-to-list 'company-backends '(company-rtags :with company-yasnippet) t)))
#+END_SRC

*** CamelCase

Convert =CamelCase= to =under_scores= ([[https://stackoverflow.com/questions/9288181/converting-from-camelcase-to-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/toggle-camelcase-underscores ()
  "Toggle between camcelcase and underscore notation for the symbol at point."
  (interactive)
  (save-excursion
    (let* ((bounds (bounds-of-thing-at-point 'symbol))
           (start (car bounds))
           (end (cdr bounds))
           (currently-using-underscores-p (progn (goto-char start)
                                                 (re-search-forward "_" end t)))
           (i 0)
           (case-fold-search nil))
      (if currently-using-underscores-p
          (progn
            (upcase-initials-region start end)
            (replace-string "_" "" nil start end)
            (downcase-region start (1+ start)))
        (while (re-search-forward "\\([a-z]\\)\\([A-Z]\\)" (+ end i) t)
          (replace-match "\\1_\\2" nil nil)
          (setq i (+ i 1)))
        (downcase-region start (+ end i))))))
#+END_SRC

*** Dump Jump

zero-config [[https://github.com/jacktasia/dumb-jump][jump to definition]] for JavaScript, Emacs Lisp, Python, Go, Clojure, …

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :config (dumb-jump-mode))
#+END_SRC

** C/C++ development
*** C/C++ Mode

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config (progn
            (add-hook 'c-mode-common-hook #'malb/c-mode-common-hook)

            (bind-key "<home>"  #'malb/beginning-of-line-dwim c-mode-base-map)
            (bind-key "M-l" #'malb/toggle-camelcase-underscores c-mode-base-map)
            (bind-key "M-u" #'malb/toggle-camelcase-underscores c-mode-base-map)
            (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))))
#+END_SRC

*** Semantic

Enable [[http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html][semantic]] for C and C++ (cf. =malb/inhibit-semantic-p=). Also enable some useful minor modes (documentation from =C-h v RET semantic-default-submodes=):

- ~global-semanticdb-minor-mode~  Maintain tag database.
- ~global-semantic-idle-scheduler-mode~ Reparse buffer when idle.
- ~global-semantic-idle-summary-mode~ Show summary of tag at point.
- ~global-semantic-idle-completions-mode~ Show completions when idle.
- ~global-semantic-decoration-mode~ Additional tag decorations.
- ~global-semantic-highlight-func-mode~ Highlight the current tag.
- ~global-semantic-mru-bookmark-mode~ Provide `switch-to-buffer'-like keybinding for tag names.
- ~global-semantic-idle-local-symbol-highlight-mode~ - Highlight references of the symbol under point.
- ~global-semantic-stickyfunc-mode~ - show the title of a tag in the header line.

#+BEGIN_SRC emacs-lisp
(use-package semantic
  :init (progn
          (use-package semantic/ia)
          (use-package semantic/bovine/gcc)

          (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-local-symbol-highlight-mode)
          (semanticdb-enable-gnu-global-databases 'c-mode t)
          (semanticdb-enable-gnu-global-databases 'c++-mode t)
          (setq semanticdb-default-save-directory (expand-file-name "semantic" user-emacs-directory))

          (semantic-mode 1)
          (global-ede-mode t)
          (ede-enable-generic-projects)

          (setq-default semantic-case-fold t)

          (defun malb/inhibit-semantic-p ()
            (member major-mode '(python-mode cython-mode)))

          (add-to-list 'semantic-inhibit-functions #'malb/inhibit-semantic-p)

          ;; (setq semantic-new-buffer-setup-functions
          ;;       (remove-if (lambda (buffer-setup-function)
          ;;                    (member (car buffer-setup-function)
          ;;                            '(python-mode js-mode scheme-mode html-mode)))
          ;;                  semantic-new-buffer-setup-functions))

          (remove-hook 'python-mode-hook 'wisent-python-default-setup)

          (bind-key "M-?"   #'semantic-analyze-proto-impl-toggle c-mode-base-map)
          (bind-key "M-."   #'semantic-ia-fast-jump c-mode-base-map)
          (bind-key "C-M-." #'semantic-complete-jump c-mode-base-map)
          (bind-key "M-r"   #'semantic-symref-symbol c-mode-base-map)))
#+END_SRC

**** Force semantic parsing

The following code parses a complete project with semantic. This is useful for exploring a new project. ([[https://stackoverflow.com/questions/18230838/semantic-cedet-how-to-force-parsing-of-source-files][source]])

#+BEGIN_SRC emacs-lisp
(defvar malb/c-files-regex ".*\\.\\(c\\|cpp\\|h\\|hpp\\)"
  "A regular expression to match any c/c++ related files under a directory")

(defun malb/semantic-parse-dir (root regex)
  "This function is an attempt of mine to force semantic to
     parse all source files under a root directory. Arguments:
     -- root: The full path to the root directory
     -- regex: A regular expression against which to match all files in the directory"
  (let (
        ;;make sure that root has a trailing slash and is a dir
        (root (file-name-as-directory root))
        (files (directory-files root t ))
        )
    ;; remove current dir and parent dir from list
    (setq files (delete (format "%s." root) files))
    (setq files (delete (format "%s.." root) files))
    (while files
      (setq file (pop files))
      (if (not(file-accessible-directory-p file))
          ;;if it's a file that matches the regex we seek
          (progn (when (string-match-p regex file)
                   (save-excursion
                     (semanticdb-file-table-object file))
                   ))
        ;;else if it's a directory
        (malb/semantic-parse-dir file regex)
        )
      )
    )
  )

(defun malb/semantic-parse-current-dir (regex)
  "Parses all files under the current directory matching regex"
  (malb/semantic-parse-dir (file-name-directory(buffer-file-name)) regex))

(defun malb/parse-curdir-c ()
  "Parses all the c/c++ related files under the current directory
     and inputs their data into semantic"
  (interactive)
  (malb/semantic-parse-current-dir malb/c-files-regex))

(defun malb/parse-dir-c (dir)
  "Prompts the user for a directory and parses all c/c++ related files
     under the directory"
  (interactive (list (read-directory-name "Provide the directory to search in:")))
  (malb/semantic-parse-dir (expand-file-name dir) malb/c-files-regex))
#+END_SRC

**** SRefactor

#+BEGIN_SRC emacs-lisp
(use-package srefactor
  :ensure t
  :config (progn
            (bind-key "M-RET" #'srefactor-refactor-at-point c-mode-base-map)))
#+END_SRC

*** Font Lock

Grey out ~#if 0~ blocks.

#+BEGIN_SRC emacs-lisp
(defun malb/c-mode-font-lock-if0 (limit)
  (save-restriction
    (widen)
    (save-excursion
      (goto-char (point-min))
      (let ((depth 0) str start start-depth)
        (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
          (setq str (match-string 1))
          (if (string= str "if")
              (progn
                (setq depth (1+ depth))
                (when (and (null start) (looking-at "\\s-+0"))
                  (setq start (match-end 0)
                        start-depth depth)))
            (when (and start (= depth start-depth))
              (c-put-font-lock-face start (match-beginning 0) 'font-lock-comment-face)
              (setq start nil))
            (when (string= str "endif")
              (setq depth (1- depth)))))
        (when (and start (> depth 0))
          (c-put-font-lock-face start (point) 'font-lock-comment-face)))))
  nil)

(defun malb/c-mode-common-hook ()
  (font-lock-add-keywords  nil
                           '((malb/c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))
#+END_SRC

Highlight member functions in C/C++ ([[https://www.reddit.com/r/emacs/comments/27eqwm/highlighting_c_member_function_calls/][source]])

#+BEGIN_SRC emacs-lisp
(dolist (major-mode '(c-mode c++-mode))
  (font-lock-add-keywords major-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-function-name-face t))))
#+END_SRC

*** Doxygen

#+BEGIN_SRC emacs-lisp
(use-package doxymacs

  :config (progn
            (defun malb/doxymacs ()
              (doxymacs-mode t)
              (doxymacs-font-lock))

            (add-hook 'c-mode-common-hook #'malb/doxymacs)))
#+END_SRC

**** DISABLED Skeletons

Insert Doxygen skeleton on =C-c M-d=. Adapted from [[https://github.com/abo-abo/function-args][function-args]]'s =moo-doxygen=.

#+BEGIN_SRC emacs-lisp
(defun malb/doxygen ()
  "Generate a doxygen yasnippet and expand it with `aya-expand'.
  The point should be on the top-level function name."
  (interactive)
  (let ((tag (semantic-current-tag)))
    (unless (semantic-tag-of-class-p tag 'function)
      (error "Expected function, got %S" tag))
    (let* ((name (semantic-tag-name tag))
           (attrs (semantic-tag-attributes tag))
           (args (plist-get attrs :arguments))
           (ord 1))
      (setq aya-current
            (format
             "/**
    @brief $1

  %s
    @return $%d
 */

  "
             (mapconcat
              (lambda (x) (format "  @param %-16s $%d" (car x) (incf ord)))
              args
              "\n")
             (incf ord)))
      (malb/beginning-of-line-dwim)
      (aya-expand))))

(bind-key "C-c M-d" #'malb/doxygen c-mode-base-map)
#+END_SRC

*** GDB

#+BEGIN_SRC emacs-lisp
(setq gdb-find-source-frame t
      gdb-many-windows t)
#+END_SRC

*** Valgrind

This code allows to run [[http://valgrind.org/][valgrind]] and step through warnings/errors. We set =--error-errorcode=1= because we bury compilation buffers that finish with exit code zero automatically. By default, valgrind returns the exit code of the program it runs. ([[https://github.com/codemac/config/blob/master/emacs.d/boot.org][source]])

#+BEGIN_SRC emacs-lisp
(require 'compile "compile")

(defgroup valgrind nil
  "Run valgrind as inferior of Emacs, parse error messages."
  :group 'tools
  :group 'processes)


(defcustom valgrind-command "valgrind --error-exitcode=1 --leak-check=full"
  "*Last shell command used to run valgrind; default for next valgrind run.

Sometimes it is useful for files to supply local values for this variable.
You might also use mode hooks to specify it in certain modes, like this:

    (add-hook 'c-mode-hook
       (lambda ()
         (unless (or (file-exists-p \"makefile\")
                     (file-exists-p \"Makefile\"))
           (set (make-local-variable 'valgrind-command)
                (concat \"make -k \"
                        (file-name-sans-extension buffer-file-name))))))"
  :type 'string
  :group 'valgrind)

;; History of compile commands.
(defvar valgrind-history nil)

(defun valgrind (command)
  "Run valgrind.
Runs COMMAND, a shell command, in a separate process asynchronously
with output going to the buffer `*valgrind*'.

You can then use the command \\[next-error] to find the next error message
and move to the source code that caused it."
  (interactive
   (if (or compilation-read-command current-prefix-arg)
       (list (read-from-minibuffer "Valgrind command: "
                                   (eval valgrind-command) nil nil
                                   '(valgrind-history . 1)))
     (list (eval valgrind-command))))
  (unless (equal command (eval valgrind-command))
    (setq valgrind-command command))
  (compilation-start command t))
#+END_SRC

*** Clang Format

Use [[http://clang.llvm.org/docs/ClangFormat.html][ClangFormat]] to … format code.

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :ensure t
  :config (progn
            (setq clang-format-executable "clang-format-3.8")))
#+END_SRC

** Python

We use the “onetwo” style to fill docstrings in Python, i.e.:

#+BEGIN_SRC python :tangle no
"""Process foo, return bar."""

"""
Process foo, return bar.

If processing fails throw ProcessingError.

"""
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package python
  :config (progn
            (setq-default python-indent 4
                          python-fill-docstring-style 'django)

            (setq python-shell-interpreter "ipython"
                  python-shell-interpreter-args ""
                  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                  python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                  python-shell-completion-setup-code
                  "from IPython.core.completerlib import module_completion"
                  python-shell-completion-module-string-code
                  "';'.join(module_completion('''%s'''))\n"
                  python-shell-completion-string-code
                  "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

            (bind-key "<home>"  #'malb/beginning-of-line-dwim python-mode-map)
            ;; http://emacs.stackexchange.com/a/21186/8930
            (add-to-list 'python-indent-trigger-commands 'malb/indent-or-complete)
            ))
#+END_SRC

*** Highlight indentation

It makes sense to [[https://github.com/antonj/Highlight-Indentation-for-Emacs/][highlight indentation]] in Python.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :ensure t
  :diminish highlight-indentation-mode
  :config (progn
            (add-hook 'python-mode-hook #'highlight-indentation-mode)))
#+END_SRC

**** TODO highlight indentation can be slow for huge buffers

 For example, editing Sage’s arguably massive [[https://github.com/sagemath/sage/blob/master/src/sage/rings/polynomial/multi_polynomial_ideal.py][multi_polynomial_ideal.py]] can be very slow.

*** Autocompletion

Use [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] for auto-completion and stuff, it runs [[https://github.com/tkf/emacs-jedi][jedi]] for us. In particular it offers:

|---------+----------------------------------|
| ~C-M-i~ | =anaconda-mode-complete=         |
| ~M-.~   | =anaconda-mode-find-definitions= |
| ~M-,​~   | =anaconda-mode-find-assignments= |
| ~M-r~   | =anaconda-mode-find-references=  |
| ~M-*~   | =anaconda-mode-go-back=          |
| ~M-?~   | =anaconda-mode-show-doc=         |
|---------+----------------------------------|


#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :diminish anaconda-mode
  :config (progn
            (add-hook 'python-mode-hook #'anaconda-mode)
            (add-hook 'python-mode-hook #'anaconda-eldoc-mode)))
#+END_SRC

*** Pydoc

#+BEGIN_SRC emacs-lisp
(use-package helm-pydoc
  :ensure t
  :config (progn
            (bind-key "C-c C-d" #'helm-pydoc python-mode-map)))
#+END_SRC

*** Docstrings
**** [[https://github.com/glyph/python-docstring-mode][Python docstring mode]]

Python docstring mode provides syntax highlighting for docstrings in both ReStructuredText and Epydoc formats, as well as an override for the fill-paragraph function when editing such a docstring that will wrap things according to Python community convention.

Manually fixed bugs:

- [[https://github.com/glyph/python-docstring-mode/issues/9][Problems locating `docstring_wrap.py` #9]]

#+BEGIN_SRC emacs-lisp
(use-package python-docstring
  :ensure t
  :diminish python-docstring-mode
  :config (progn
            (add-hook 'python-mode-hook #'python-docstring-mode)))
#+END_SRC

**** [[https://github.com/naiquevin/sphinx-doc.el][Sphinx-doc]]

An emacs minor mode for inserting docstring skeleton for Python functions and methods (=C-c M-d=). The structure of the docstring is as per the requirement of the Sphinx documentation generator.

#+BEGIN_SRC emacs-lisp
(use-package sphinx-doc
  :ensure t
  :diminish sphinx-doc-mode
  :config (progn
            (add-hook 'python-mode-hook #'sphinx-doc-mode)))
#+END_SRC

*** Cython

#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :ensure t
  :mode (("\\.pyx\\'"  . cython-mode)
         ("\\.spyx\\'" . cython-mode)
         ("\\.pxd\\'"  . cython-mode)
         ("\\.pxi\\'"  . cython-mode)))
#+END_SRC

**** Flycheck

[[https://github.com/lbolla/emacs-flycheck-cython][Flycheck for Cython]]

#+BEGIN_SRC emacs-lisp
(use-package flycheck-cython
  :ensure t)
#+END_SRC

*** AutoPEP8

#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :ensure t
  :config (progn
            (setq py-autopep8-options '("--max-line-length=100"))))
#+END_SRC

*** ElPy

#+BEGIN_QUOTE
[[https://github.com/jorgenschaefer/elpy][Elpy]] is an Emacs package to bring powerful Python editing to Emacs. It combines a number of other packages, both written in Emacs Lisp as well as Python.
#+END_QUOTE

Elpy is quite opinionated and we don’t necessarily share all those opinions. Hence, we only enable a small subset.

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config (progn
            (elpy-module-yasnippet 'global-init)
            (defun malb/elpy-sane-defaults ()
              (elpy-module-sane-defaults 'buffer-init))
            (add-hook 'python-mode-hook #'malb/elpy-sane-defaults)
            ))
#+END_SRC

*** PIP

#+BEGIN_SRC emacs-lisp
(use-package pip-requirements
   :ensure t)
#+END_SRC

*** Sage

Enable [[https://github.com/stakemori/sage-shell-mode][sage-shell-mode]] for running [[http://sagemath.org][Sage]] from within Emacs. It’s available on MELPA and hence easier to keep around when we switch Sage installs all the time. To edit a file in sage-shell-mode put ~# -*- mode: sage-shell:sage -*-~ on top. However, we usually don’t do that but use python-mode directly. For this, our setup is as follows.

In =.emacs.d= create a directory =sage-python/bin= which contains a file called =python= with the following content:

#+BEGIN_SRC bash
#!/bin/bash
sage -python "$@"
#+END_SRC

Then, in each project where we want to use Sage, we can add a =.dir-locals.el= file at the top level with

#+BEGIN_SRC emacs-lisp  :tangle no
((python-mode . ((python-shell-virtualenv-path . (concat user-emacs-directory "sage-devel-python")))))
#+END_SRC

which will tell ~anaconda-mode~ to run Sage’s python process instead of the system-wide one.

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config (progn
            (setq ac-delay 0.3
                  ac-auto-start 2)))

(use-package auto-complete-sage
  :ensure t)

(use-package sage-shell-mode
  :ensure t
  :config (progn
            (eval-after-load "auto-complete"
              '(setq ac-modes (append '(sage-shell-mode sage-shell:sage-mode) ac-modes)))
            (add-hook 'sage-shell:sage-mode-hook #'ac-sage-setup)
            (add-hook 'sage-shell:sage-mode-hook #'auto-complete-mode)
            (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)
            (add-hook 'sage-shell-mode-hook #'ac-sage-setup)
            (add-hook 'sage-shell-mode-hook #'auto-complete-mode)
            (add-hook 'sage-shell-mode-hook #'eldoc-mode)

            (when (boundp 'company-global-modes)
              (add-to-list 'company-global-modes 'sage-shell:sage-mode t)
              (add-to-list 'company-global-modes 'sage-shell-mode t))

            (setq sage-shell:input-history-cache-file (concat user-emacs-directory "sage_shell_input_history")
                  sage-shell:sage-executable malb/sage-executable
                  ac-sage-show-quick-help t)

            (bind-key "C-<up>" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "C-<down>" #'comint-next-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-p" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-n" #'comint-next-matching-input-from-input sage-shell-mode-map)
            (bind-key "C-<return>" #'auto-complete sage-shell:sage-mode-map)
            ))
#+END_SRC

**** Org Babel SageMath

([[https://github.com/stakemori/ob-sagemath][source]])

#+BEGIN_SRC emacs-lisp
(use-package ob-sagemath
  :ensure t
  :config (progn
            (setq org-babel-default-header-args:sage '((:session . t)
                                                       (:results . "output replace")
                                                       (:exports . "both")
                                                       (:cache .   "no")
                                                       (:noweb . "no")
                                                       (:hlines . "no")
                                                       (:tangle . "no")))
            (add-to-list 'org-structure-template-alist
                         '("sg" "#+BEGIN_SRC sage\n?\n#+END_SRC"))))
#+END_SRC

*** [[https://github.com/tkf/emacs-ipython-notebook][iPython Notebook]]

An interface from Emacs to iPython.

[[https://github.com/tkf/emacs-ipython-notebook/raw/data/screenshots/zenburn_plots.png]] ([[https://github.com/tkf/emacs-ipython-notebook/raw/data/screenshots/zenburn_plots.png][source]])

On our system port 8888 is already taken.

#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  :disabled t
  :config (progn
            (setq ein:use-auto-complete t
                  ein:default-url-or-port 8889)
            (add-hook 'ein:notebook-multilang-mode-hook #'auto-complete-mode)
            (when (boundp 'company-global-modes)
              (add-to-list 'company-global-modes 'ein:notebook-multilang-mode t)
              (add-to-list 'company-global-modes 'ein:notebook-python-mode t))))
#+END_SRC

*** Virtual Environments

[[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper]] emulates much of the functionality of [[https://bitbucket.org/dhellmann/virtualenvwrapper/][virtualenvwrapper.sh]].

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :config (progn
            (venv-initialize-interactive-shells)
            (venv-initialize-eshell)
            (setq venv-location (expand-file-name ".virtualenvs" "~"))

            (defun malb/activate-venv ()
              (hack-local-variables)
              (when (boundp 'project-venv-name)
                (venv-workon project-venv-name)))

            (add-hook 'python-mode-hook #'malb/activate-venv)
            (add-hook 'cython-mode-hook #'malb/activate-venv)
            (add-hook 'eshell-mode-hook #'malb/activate-venv)
            ))
#+END_SRC

** Lisp
*** General

#+BEGIN_QUOTE
short and sweet LISP editing ([[https://github.com/abo-abo/lispy][source]])
#+END_QUOTE

| command                       | binding | binding | command           |
| =paredit-forward=             | =C-M-f= | =j=     | =lispy-down=      |
| =paredit-backward=            | =C-M-b= | =k=     | =lispy-up=        |
| =paredit-backward-up=         | =C-M-u= | =h=     | =lispy-left=      |
| =paredit-forward-up=          | =C-M-n= | =l=     | =lispy-right=     |
| =paredit-raise-sexp=          | =M-r=   | =r=     | =lispy-raise=     |
| =paredit-convolute-sexp=      | =M-?=   | =C=     | =lispy-convolute= |
| =paredit-forward-slurp-sexp=  | =C-)=   | =>=     | =lispy-slurp=     |
| =paredit-forward-barf-sexp=   | =C-}=   | =<=     | =lispy-barf=      |
| =paredit-backward-slurp-sexp= | =C-(=   | =>=     | =lispy-slurp=     |
| =paredit-backward-barf-sexp=  | =C-{=   | =<=     | =lispy-barf=      |

#+BEGIN_SRC emacs-lisp
(use-package lispy
  :ensure t)
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :ensure t
  :diminish elisp-slime-nav-mode
  :config (progn

            (defun malb/elisp-hook ()
              (elisp-slime-nav-mode)
              (smartparens-strict-mode)
              (eldoc-mode)
              (lispy-mode 1))

            (setq eldoc-idle-delay 0.3)

            (add-hook 'emacs-lisp-mode-hook #'malb/elisp-hook)
            (add-hook 'lisp-interaction-mode-hook #'malb/elisp-hook)
            (add-hook 'ielm-mode-hook #'elisp-slime-nav-mode)
            (add-hook 'ielm-mode-hook #'smartparens-strict-mode)
            (add-hook 'ielm-mode-hook #'eldoc-mode)

            (bind-key "M-?" #'elisp-slime-nav-describe-elisp-thing-at-point
                      emacs-lisp-mode-map)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-z" #'ielm emacs-lisp-mode-map)
#+END_SRC

[[http://emacsredux.com/blog/2016/03/02/pimp-my-minibuffer/][Eldoc in minibuffer eval]].

#+BEGIN_SRC emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+END_SRC

[[https://github.com/Wilfred/suggest.el][suggest.el]] is an Emacs package for discovering elisp functions based on examples.

#+BEGIN_SRC emacs-lisp
(use-package suggest
  :ensure t)
#+END_SRC


*** Clojure

([[https://github.com/howardabrams/dot-files/blob/master/emacs-clojure.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config (progn
            (add-hook 'clojure-mode-hook #'eldoc-mode)
            (add-hook 'clojure-mode-hook #'smartparens-strict-mode)
            (add-hook 'clojure-mode-hook #'lispy-mode)))
#+END_SRC

**** CIDER

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :config (progn
            (setq cider-repl-use-clojure-font-lock t
                  nrepl-hide-special-buffers t
                  cider-popup-stacktraces nil)
            (add-hook 'cider-mode-hook #'cider-turn-on-eldoc-mode)
            (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)))
#+END_SRC

**** Org-Mode

Enable CIDER in org-mode.

#+BEGIN_SRC emacs-lisp
(use-package ob-clojure
  :config (setq org-babel-clojure-backend 'cider))
#+END_SRC

**** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck-clojure
   :ensure t)
#+END_SRC

*** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :ensure t
  :config (progn
            (add-hook 'hy-mode-hook #'lispy-mode)))
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
    :ensure t)
#+END_SRC

* Editing
** Dragging lines around

([[https://github.com/rejeep/drag-stuff.el][source]])

#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish drag-stuff-mode
    :bind (("M-<up>" . drag-stuff-up)
           ("M-<down>" . drag-stuff-down)))
#+END_SRC

** Visualise the undo tree

([[http://www.dr-qusourceorg/undo-tree/undo-tree.el][source]])

*Tip:* Did you know that Emacs has undo in a region?

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config (progn
            (global-undo-tree-mode)
            (setq undo-tree-visualizer-timestamps t)
            (setq undo-tree-visualizer-diff t))
  )
#+END_SRC

** Highlight last edits

([[https://sourceub.com/k-talo/volatile-highlights.el][source]])

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :commands volatile-highlights-mode
    :config (volatile-highlights-mode t)
    :diminish volatile-highlights-mode)
#+END_SRC

** [#A] Zap up to char

Kill everything up to character, e.g. if we have “Lorem| ipsum” typing ~M-z u~ would leave us with “Lorem|um”.

#+BEGIN_SRC emacs-lisp
(use-package avy-zap
  :ensure t
  :bind ("M-z" . avy-zap-up-to-char-dwim))
#+END_SRC

** Reverting buffers

Automatically revert buffers.

#+BEGIN_SRC emacs-lisp
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)

(global-auto-revert-mode 1)
#+END_SRC

** [[https://github.com/Vifon/focus-autosave-mode.el][Save buffer when loosing focus]]

This can be dangerous, so only enable on per project basis, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((markdown-mode . ((eval . (focus-autosave-local-mode 1)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package focus-autosave-mode
  :ensure t
  :config (progn
            (diminish 'focus-autosave-local-mode " ♻")))
#+END_SRC

** Regexp

Use [[https://github.com/benma/visual-regexp.el][visual-regexp]] for visual regular expressions and use [[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] for modern regexps. This makes Emacs regexp actually usable for me.

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp-steroids
  :ensure t)

(use-package visual-regexp
  :ensure t
  :bind (("C-c m" . vr/mc-mark)
         ("M-%" . vr/query-replace)
         ("C-S-s" . vr/isearch-forward)
         ("C-S-r" . vr/isearch-backward)))
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]

[[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif]] ([[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif?zoom=2&w=620][source]])

Also see [[http://emacsrocks.com/e13.html][Emacs Rocks #13]], which is on ~multiple-cursors~.

([[http://endlessparentheses.com/multiple-cursors-keybinds.html?source=rss][keybinding source]])

Commands are bound to =C-x m …=

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config (progn
            (defun malb/mc-typo-mode ()
              (add-to-list 'mc/unsupported-minor-modes 'typo-mode))
            (add-hook 'multiple-cursors-mode-hook #'malb/mc-typo-mode)

            (bind-key "M-3" #'mc/mark-previous-like-this)
            (bind-key "M-4" #'mc/mark-next-like-this)
            (bind-key "M-£" #'mc/unmark-previous-like-this)
            (bind-key "M-$" #'mc/unmark-next-like-this)

            (define-prefix-command 'malb/mc-map)
            (bind-key "m" 'malb/mc-map ctl-x-map)

            (bind-key "a" #'mc/mark-all-like-this malb/mc-map)
            (bind-key "d" #'mc/mark-all-dwim malb/mc-map)
            (bind-key "s" #'mc/mark-all-symbols-like-this-in-defun malb/mc-map)

            (bind-key "i" #'mc/insert-numbers malb/mc-map)
            (bind-key "l" #'mc/insert-letters malb/mc-map)

            (bind-key "h" #'mc-hide-unmatched-lines-mode malb/mc-map)

            (bind-key "R" #'mc/reverse-regions malb/mc-map)
            (bind-key "S" #'mc/sort-regions malb/mc-map)
            (bind-key "L" #'mc/edit-lines malb/mc-map)

            (bind-key "C-a" #'mc/edit-beginnings-of-lines malb/mc-map)
            (bind-key "C-e" #'mc/edit-ends-of-lines malb/mc-map)
            )
  )
#+END_SRC

** Recursively narrow

#+BEGIN_SRC emacs-lisp
(use-package recursive-narrow
  :ensure t
  :config (progn
            (defun malb/recursive-narrow-dwim-org ()
              (if (derived-mode-p 'org-mode)
                  (cond ((or (org-at-block-p) (org-in-src-block-p)) (org-narrow-to-block))
                        (t (org-narrow-to-subtree))))
              )
            (add-hook 'recursive-narrow-dwim-functions 'malb/recursive-narrow-dwim-org))
  :bind
  (("C-x n w" . recursive-widen)
   ("C-x n n" . recursive-narrow-or-widen-dwim)))
#+END_SRC

** Expand region

See [[http://emacsrocks.com/e09.html][Emacs Rocks #9]] for an intro to [[https://github.com/magnars/expand-region.el][expand-region]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-`" . er/expand-region))
#+END_SRC

** Embrace

#+BEGIN_SRC emacs-lisp
(use-package embrace
  :ensure t
  :config (progn
            (bind-key "M-`" #'embrace-commander)
            (add-hook 'org-mode-hook #'embrace-org-mode-hook)))
#+END_SRC

** Wrap Region

[[https://github.com/rejeep/wrap-region.el][Wrap Region]] is a minor mode for Emacs that wraps a region with punctuations. For "tagged" markup modes, such as HTML and XML, it wraps with tags.

([[http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/][source]])

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :ensure t
  :diminish wrap-region-mode
  :config (wrap-region-add-wrappers
           '(("*" "*" nil org-mode)
             ("~" "~" nil org-mode)
             ("/" "/" nil org-mode)
             ("=" "=" nil org-mode)
             ("_" "_" nil org-mode)
             ("$" "$" nil org-mode)))
  (add-hook 'org-mode-hook 'wrap-region-mode))
#+END_SRC

* Blogging

#+BEGIN_SRC emacs-lisp
(use-package org2blog
  :ensure t
  :config (progn
            (let (credentials)
              (setq credentials (auth-source-user-and-password "martinralbrecht.wordpress.com"))
              (setq org2blog/wp-blog-alist
                    `(("martinralbrecht"
                       :url "https://martinralbrecht.wordpress.com/xmlrpc.php"
                       :username ,(car credentials)
                       :password ,(cadr credentials)))))
            (setq org2blog/wp-use-sourcecode-shortcode nil
                  org2blog/wp-show-post-in-browser nil
                  org2blog/wp-default-categories '("Cryptography" "Sage"))))
#+END_SRC

* Prose
** General
*** Tab completion

Use less tab completion in prose. ([[http://endlessparentheses.com/tab-completion-for-prose.html][souce]])

#+BEGIN_SRC emacs-lisp
(defun malb/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 3)
  (setq-local company-idle-delay 0.5))

(add-hook 'text-mode-hook #'malb/config-prose-completion)
#+END_SRC

*** Line wrapping

Put everything back on one line if =M-q= is pressed twice and use ~visual-line-mode~ to do the work of wrapping text for us. ([[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html?source=rss][source]])

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'turn-on-visual-line-mode)
(diminish 'visual-line-mode)

(setq visual-line-fringe-indicators '(nil right-curly-arrow))

(defun malb/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'malb/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(bind-key [remap fill-paragraph] #'malb/fill-or-unfill)
#+END_SRC

Indent correctly in ~visual-line-mode~ (~org-mode~ has its own thing).

#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :ensure t
  :config (progn
            (add-hook 'markdown-mode-hook #'adaptive-wrap-prefix-mode)
            (add-hook 'LaTeX-mode-hook #'adaptive-wrap-prefix-mode)
            ))
#+END_SRC

For hard wraps, allow for a bit more characters per line.

#+BEGIN_SRC emacs-lisp
(setq fill-column 100)
#+END_SRC

*** Typography

[[https://github.com/jorgenschaefer/typoel][typo]] is a minor mode that will change a number of normal keys to make them insert typographically useful unicode characters. Some of those keys can be used repeatedly to cycle through variations. This includes in particular quotation marks and dashes.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :ensure t
  :diminish typo-mode
  :config (progn
            (setq-default  typo-language "English")
            (add-hook 'markdown-mode-hook #'typo-mode)
            (add-hook 'org-mode-hook #'typo-mode)
            (add-hook 'rst-mode-hook #'typo-mode)))
#+END_SRC

Replace ~’~ with ~​'​~ before sending it to ispell ([[http://endlessparentheses.com/ispell-and-apostrophes.html][source]])

*Note:* Below, we adapt "en_GB" (our default) instead of =nil= (the global default) because otherwise we [[http://endlessparentheses.com/ispell-and-apostrophes.html#comment-2258586606][can’t change dictionaries]].

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :config (progn
            (setq ispell-dictionary "en_GB")

            ;; Tell ispell.el that ’ can be part of a word. ;
            (setq ispell-local-dictionary-alist
                  '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]"
                     "['\x2019]" nil ("-d" "en_GB") nil utf-8)))

            ;; Don't send ’ to the subprocess.
            (defun malb/replace-apostrophe (args)
              (cons (replace-regexp-in-string
                     "’" "'" (car args))
                    (cdr args)))

            (advice-add #'ispell-send-string :filter-args #'malb/replace-apostrophe)

            ;; Convert ' back to ’ from the subprocess.
            (defun malb/replace-quote (args)
              (if (not (or (derived-mode-p 'org-mode)
                           (derived-mode-p 'markdown-mode)
                           (derived-mode-p 'rst-mode)
                           (derived-mode-p 'message-mode)))
                  args
                (cons (replace-regexp-in-string
                       "'" "’" (car args))
                      (cdr args))))

            (advice-add #'ispell-parse-output :filter-args #'malb/replace-quote)))
#+END_SRC

*** Olivetti

Adapt text width to nice to read/edit width.

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure t
  :diminish olivetti-mode
  :config (progn
            (setq-default olivetti-body-width 120)
            (unbind-key "C-c ]" olivetti-mode-map)
            (unbind-key "C-c [" olivetti-mode-map)))
#+END_SRC

*** Sentences

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
(bind-key "C-x C-t" #'transpose-sentences)
#+END_SRC

We [[http://bug-gnu-emacs.gnu.narkive.com/SOVjcGqY/kill-sentence-trailing-whitespace-intentions][also delete trailing whitespaces]] when we delete a sentence.

#+BEGIN_SRC emacs-lisp
(defadvice kill-sentence (after delete-horizontal-space activate)
  "Delete trailing spaces and tabs as well."
  (delete-horizontal-space))
#+END_SRC

*** Highlighting Sentences & Paragraphs

Use [[https://github.com/milkypostman/hl-sentence][hl-sentence-mode]] in ~markdown-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package hl-sentence
    :ensure t
    :config (add-hook 'markdown-mode-hook #'hl-sentence-mode))
#+END_SRC

Also use [[https://github.com/larstvei/Focus][focus-mode]] occationally.

[[https://raw.githubusercontent.com/larstvei/Focus/master/demo-light.gif]] ([[https://github.com/larstvei/Focus][source]])


#+BEGIN_SRC emacs-lisp
  (use-package focus
    :ensure t)
#+END_SRC

*** Spell Checking

Use [[https://github.com/cute-jumper/ace-flyspell][ace-flyspell]] for fixing typos. I find myself pressing =C-.= in other programs these days just to be frustrated that it doesn’t just work™

#+BEGIN_SRC emacs-lisp
(use-package ace-flyspell
  :ensure t
  :bind ("C-." . ace-flyspell-dwim)
  :init (progn
          (eval-after-load "flyspell"
            '(bind-key  "C-." #'ace-flyspell-dwim flyspell-mode-map)))
  )
#+END_SRC

Diminish ~flyspell-mode~ as we always use it.

#+BEGIN_SRC emacs-lisp
(eval-after-load "flyspell"
  '(diminish 'flyspell-mode))
#+END_SRC

Automatically pick dictionary.

#+BEGIN_SRC emacs-lisp
(use-package auto-dictionary
  :ensure t
  :config (progn
            (setf (cdr (rassoc "en" adict-dictionary-list)) "en_GB")
            ))
#+END_SRC

**** Abbreviations

([[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-45][source]])

#+NAME: abbrev
| Base  | Expansion                             |
|-------+---------------------------------------|
| qm    | martinralbrecht@googlemail.com        |
| qb    | https://martinralbrecht.wordpress.com |
| qw    | http://malb.io                        |
| qisg  | Information Security Group            |
| qrhul | Royal Holloway                        |
|-------+---------------------------------------|

#+BEGIN_SRC emacs-lisp :var data=abbrev
(mapc (lambda (x) (define-global-abbrev (car x) (cadr x))) (cddr data))
#+END_SRC

#+RESULTS:
| qb    | [[https://martinralbrecht.wordpress.com]] |
| qw    | [[http://malb.io]]                        |
| qisg  | Information Security Group            |
| qrhul | Royal Holloway                        |

#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
(diminish 'abbrev-mode)
#+END_SRC

*** Grammar Checking

([[https://github.com/mhayashi1120/Emacs-langtool][source]])

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :ensure t
  :config (progn
            (setq langtool-language-tool-jar (expand-file-name "languagetool-commandline.jar"
                                                               (concat user-emacs-directory "langtool"))
                  ; langtool-mother-tongue "de"
                  langtool-default-language "en"
                  langtool-disabled-rules '("WHITESPACE_RULE"
                                            "EN_QUOTES")
                  )

            (bind-key "C-x 4 w" #'langtool-check)
            (bind-key "C-x 4 W" #'langtool-check-done)
            (bind-key "C-x 4 l" #'langtool-switch-default-language)
            (bind-key "C-x 4 4" #'langtool-show-message-at-point)
            (bind-key "C-x 4 c" #'langtool-correct-buffer)
            )
  )
#+END_SRC

*** Style Checking

Prose linting using … [[http://proselint.com][proselint]].

([[http://unconj.ca/blog/linting-prose-in-emacs.html][source]])

#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
            (id (one-or-more (not (any " "))))
            (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode message-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

*** Dictionary

Use [[http://oremacs.com/2015/05/22/define-word/][define-word]] to get a quick reference on a word.

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :bind (("C-c d" . define-word-at-point)
         ("C-c D" . define-word)
         ))
#+END_SRC

*** Translating

#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :ensure t
  :bind ("C-c t" . google-translate-smooth-translate)
  :config (progn
            (setq google-translate-translation-directions-alist
                  '(("de" . "en") ("en" . "de") ("de" . "fr") ("fr" . "de")))))
#+END_SRC

*** Googling

[[https://github.com/steckerhalter/helm-google][helm-google]] is a simple interface for Google which comes in handy when we want to add a quick link for a term.

[[https://raw.githubusercontent.com/steckerhalter/helm-google/master/screenshot.png]] ([[https://github.com/steckerhalter/helm-google/blob/master/screenshot.png][source]])

#+BEGIN_SRC emacs-lisp
(use-package helm-google
  :ensure t
  :bind ("C-c h g" . helm-google)
  :config
  (progn
    (add-to-list 'helm-google-actions
                 '("Copy URL" . (lambda (candidate)
                                  (let ((url
                                         (replace-regexp-in-string
                                          "https://.*q=\\(.*\\)\&sa=.*"
                                          "\\1" candidate)))
                                    (kill-new url)))) t)))
#+END_SRC

** Taking Notes

Use [[http://jblevins.org/projects/deft/][deft]] for random notes and for a listing of blog entries.

[[http://jblevins.org/projects/deft/deft-v0.6.gif]] ([[http://jblevins.org/projects/deft/deft-v0.6.gif][source]])


#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . malb/deft)
  :bind ("S-<f8>" . malb/blog)
  :init (progn
          (setq deft-extensions '("org" "md")
                deft-default-extension "org"
                deft-directory (expand-file-name "deft" malb/sync-dir)
                deft-text-mode 'org-mode
                deft-use-filename-as-title nil
                deft-auto-save-interval 300.0
                deft-use-filter-string-for-filename t
                deft-current-sort-method 'title
                deft-file-naming-rules '((noslash . "-")
                                         (nospace . "-")
                                         (case-fn . downcase)))

          (defun malb/deft-in-dir (dir)
            "Run deft in directory DIR"
            (setq deft-directory dir)
            (switch-to-buffer "*Deft*")
            (kill-this-buffer)
            (deft))

          (defun malb/blog ()
            (interactive)
            (malb/deft-in-dir (expand-file-name "web/blog" malb/projects-dir)))

          (defun malb/deft ()
            (interactive)
            (malb/deft-in-dir (expand-file-name "deft" malb/sync-dir)))

          (add-hook 'deft-mode-hook #'hl-line-mode)))
#+END_SRC

** Markdown

Standard setup and quick preview ([[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-markdown.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.text\\'" . markdown-mode)
         ("\\.txt\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode)
         )
  :config (progn
            (defvar malb/markdown.css
              (expand-file-name "themes/foghorn.css" user-emacs-directory))

            (setq markdown-command (concat "pandoc --smart -s -f markdown -t html -c" malb/markdown.css)
                  markdown-css-paths (list malb/markdown.css)
                  markdown-enable-math t)

            (defun malb/markdown-preview-buffer ()
              (interactive)
              (require 'shr)
              (let* ((buf-this (buffer-name (current-buffer)))
                     (buf-html (get-buffer-create
                                (format "*md-html (%s)*" buf-this))))
                (markdown-other-window (buffer-name buf-html))
                (shr-render-buffer buf-html)
                (kill-buffer buf-html)))

            (bind-key "M-." #'markdown-jump markdown-mode-map)
            (bind-key "C-c C-e o" #'malb/markdown-preview-buffer markdown-mode-map) ;; inspired by org-mode-export
            (add-hook 'markdown-mode-hook #'flyspell-mode)))
#+END_SRC

*** Pandoc

Use [[https://joostkremers.github.io/pandoc-mode/][pandoc-mode]] to call [[http://johnmacfarlane.net/pandoc/][pandoc]] for converting markdown to everything else.

#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :ensure t
  :config (progn
            (add-hook 'markdown-mode-hook #'pandoc-mode)
            (add-hook 'org-mode-hook #'conditionally-turn-on-pandoc)
            (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings)
            (delight 'pandoc-mode
                     '(:eval (concat " ▣[" (pandoc--get 'write) "]")))
            ))
#+END_SRC

** ReST

Python’s distutils [[http://bugs.python.org/issue11913][mandate]] =README.txt= or =README= in ReST. Hence, we add =README.txt= as the kind of file which wants ReST and use [[http://docutils.sourceforge.net/docs/user/emacs.html][rst-mode]] to edit it.

#+BEGIN_SRC emacs-lisp
  (use-package rst-mode
    :commands rst-mode-hook
    :mode "README\\.txt")
#+END_SRC

** LaTeX

| Command       | Explanation     |
|---------------+-----------------|
| ~C-c C-g~     | forward search  |
| ~C-c C-o C-b~ | fold everything |
| ~C-<tab>~     | fold dwim       |

#+BEGIN_SRC emacs-lisp
(use-package tex
  :commands LaTeX-mode-hook
  :ensure auctex
  :defer t
  :config (progn
            (add-hook 'LaTeX-mode-hook #'visual-line-mode)
            (add-hook 'LaTeX-mode-hook #'flyspell-mode)
            (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
            (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
            (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)

            (setq TeX-view-program-list '(("Okular" "okular --unique %o#src:%n%b")
                                          ("Emacs" "emacsclient -n -e '(find-file-other-window \"%o\")'")))

            (setq TeX-view-program-selection '(((output-dvi style-pstricks) "dvips and gv")
                                               (output-dvi "Okular")
                                               (output-pdf "Emacs")
                                               (output-html "xdg-open")))

            (defun malb/latex-add-environments ()
              (LaTeX-add-environments
               '("lemma" LaTeX-env-label)
               '("theorem" LaTeX-env-label)
               '("algorithm" LaTeX-env-label)
               '("corollary" LaTeX-env-label)
               '("definition" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("proposition" LaTeX-env-label)))

            (setq reftex-section-levels '(("part" . 0)
                                          ("chapter" . 1)
                                          ("section" . 2)
                                          ("subsection" . 3)
                                          ("subsubsection" . 4)
                                          ("frametitle" . 5)
                                          ("paragraph" . 6)
                                          ("subparagraph" . 7)
                                          ("addchap" . -1)
                                          ("addsec" . -2)))

            (add-hook 'LaTeX-mode-hook #'malb/latex-add-environments)

            (bind-key "C-<tab>" #'TeX-fold-dwim LaTeX-mode-map)
            (bind-key "M-." #'reftex-goto-label LaTeX-mode-map)

            ;; http://endlessparentheses.com/improving-latex-equations-with-font-lock.html
            (defface malb/unimportant-latex-face
              '((t :height 0.8
                   :inherit font-lock-comment-face))
              "Face used on less relevant math commands.")

            (font-lock-add-keywords
             'latex-mode
             `((,(rx "\\" (or (any ",.!;")
                              (and (or "left" "right" "qquad" "quad")
                                   symbol-end)))
                0 'malb/unimportant-latex-face prepend)) 'end)

            (setq TeX-auto-save t
                  TeX-parse-self t
                  reftex-plug-into-AUCTeX t
                  TeX-PDF-mode t
                  TeX-source-correlate-mode t
                  TeX-save-query nil
                  TeX-error-overview-open-after-TeX-run t)

            (setq-default TeX-master nil)
            (setq-default TeX-auto-local (expand-file-name "auctex-auto" user-emacs-directory))

            (setq font-latex-fontify-sectioning 1.0)

            (add-to-list 'LaTeX-verbatim-environments "lstlisting")))
#+END_SRC

*** LatexMK

#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :ensure t
  :config (progn
            (setq auctex-latexmk-inherit-TeX-PDF-mode t)
            (auctex-latexmk-setup)))
#+END_SRC

*** LaTeX preview pane

[[https://github.com/jsinglet/latex-preview-pane][LaTeX preview pane]]

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :diminish latex-preview-pane-mode
  :ensure t
  :config (progn
            (setq latex-preview-pane-multifile-mode (quote auctex))))
#+END_SRC

*** Setup everything

Setup everything for LaTeX (this can be slow, hence we call it manually)

#+BEGIN_SRC emacs-lisp
(defun malb/latex-init ()
  (interactive)
  (ignore-errors
    (malb/latex-parse-bibtex))          ; don't die if there's no bibtex file
  (olivetti-mode 1)
  (latex-preview-pane-mode 1))
#+END_SRC

** Utility Functions

([[https://sriramkswamy.github.io/dotemacs/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/align-& (start end)
  "Align columns by ampersand"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)&" 1 1 t))

(defun malb/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))

(defun malb/align-= (start end)
  "Align columns by equals sign"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)=" 1 0 t))

(defun malb/align-: (start end)
  "Align columns by equals sign"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\):" 1 0 t))
#+END_SRC

** Scimax

([[https://github.com/jkitchin/scimax/][source]])


#+BEGIN_SRC emacs-lisp
(use-package scimax-email)

(defun malb/words-atd ()
  "Send paragraph at point to After the deadline for spell and grammar checking."
  (interactive)

  (let* ((url-request-method "POST")
         (url-request-data (format
                            "key=some-random-text-&data=%s"
                            (url-hexify-string
                             (thing-at-point 'paragraph))))
         (xml  (with-current-buffer
                   (url-retrieve-synchronously
                    "http://service.afterthedeadline.com/checkDocument")
                 (xml-parse-region url-http-end-of-headers (point-max))))
         (results (car xml))
         (errors (xml-get-children results 'error)))

    (switch-to-buffer-other-window "*ATD*")
    (erase-buffer)
    (org-mode)
    (dolist (err errors)
      (let* ((children (xml-node-children err))
             ;; for some reason I could not get the string out, and had to do this.
             (s (car (last (nth 1 children))))
             ;; the last/car stuff doesn't seem right. there is probably
             ;; a more idiomatic way to get this
             (desc (last (car (xml-get-children children 'description))))
             (type (last (car (xml-get-children children 'type))))
             (suggestions (xml-get-children children 'suggestions))
             (options (xml-get-children (xml-node-name suggestions) 'option))
             (opt-string  (mapconcat
                           (lambda (el)
                             (when (listp el)
                               (car (last el))))
                           options
                           " ")))

        (insert (format "- %s :: %s %s %s
" s opt-string desc type))))))
#+END_SRC

* BibTeX

Force a parse of the BibTeX database ([[http://stackoverflow.com/questions/9682592/setting-up-reftex-tab-completion-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/get-bibtex-keys (file)
  (with-current-buffer (find-file-noselect file)
    (mapcar #'car (bibtex-parse-keys))))

(defun malb/latex-parse-bibtex ()
  (interactive)
  (mapc 'LaTeX-add-bibitems
        (apply 'append
               (mapcar #'malb/get-bibtex-keys (reftex-get-bibfile-list)))))
#+END_SRC

Alice15 or AliBobCha15 or ABCD15 ([[https://nickhigham.wordpress.com/2016/01/06/managing-bibtex-files-with-emacs/#comment-2977][source]])

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :config (progn
            (setq bibtex-align-at-equal-sign t
                  bibtex-comma-after-last-field t
                  bibtex-entry-format '(opts-or-alts
                                        required-fields
                                        sort-fields
                                        page-dashes
                                        whitespace
                                        last-comma
                                        delimiters
                                        numerical-fields
                                        realign
                                        ))

            (defun bibtex-generate-autokey ()
              (let* ((bibtex-autokey-names nil)
                     (bibtex-autokey-year-length 2)
                     (bibtex-autokey-name-separator "\0")
                     (names (split-string (bibtex-autokey-get-names) "\0"))
                     (year (bibtex-autokey-get-year))
                     (name-char (cond ((= (length names) 1)
                                       (length (car names)))
                                      ((<= (length names) 3)
                                       3)
                                      (t 1)))
                     (existing-keys (bibtex-parse-keys))
                     key)
                (setq names (mapcar 'capitalize names))
                (setq names (mapconcat (lambda (x)
                                         (substring x 0 (min (length x) name-char)))
                                       names
                                       ""))
                (setq key (format "%s%s" names year))
                (let ((ret key))
                  (loop for c from ?a to ?z
                        while (assoc ret existing-keys)
                        do (setq ret (format "%s%c" key c)))
                  ret)))
            ))
#+END_SRC

** Helm BibTeX

[[https://github.com/tmalsburg/helm-bibtex/][Helm-bibtex]] is a nice interface for BibTex.

[[https://github.com/tmalsburg/helm-bibtex/raw/master/screenshot.png]] ([[https://github.com/tmalsburg/helm-bibtex/][source]])

My standard BibTeX sources are

- =crypto_crossref.bib= and =abbrev3.bib= are from [[http://cryptobib.di.ens.fr/][crypto.bib]] which has most references relevant to crypto,
- =jacm.bib= is for the Journal of the ACM provided by the [[http://ftp.math.utah.edu/pub/tex/bib/jacm.html][University of Utah]],
- =rfc.bib= is for RFCs and provided by [[http://tm.uka.de/~bless/bibrfcindex.html][Roland Bless]].

These are stored in some =common-latex= folder which has my [[https://bitbucket.org/malb/paper-template][paper-template]] as a subfolder.

#+BEGIN_SRC emacs-lisp
(defvar malb/common-latex (concat (file-name-as-directory malb/projects-dir) "common-latex"))
(defvar malb/crypto-bib (concat (file-name-as-directory
                                 (concat
                                  (file-name-as-directory malb/common-latex) "paper-template")) "cryptobib"))

(use-package helm-bibtex
  :ensure t
  :config (progn
            (setq helm-bibtex-bibliography (list (expand-file-name "crypto_crossref.bib" malb/crypto-bib)
                                                 (expand-file-name "abbrev3.bib" malb/crypto-bib)
                                                 (expand-file-name "rfc.bib" malb/common-latex)
                                                 (expand-file-name "jacm.bib" malb/common-latex)
                                                 (expand-file-name "local.bib" malb/common-latex))
                  helm-bibtex-library-path malb/literature-dir
                  helm-bibtex-notes-path malb/literature-notes-dir)

            (setq reftex-default-bibliography helm-bibtex-bibliography)

            (defun helm-bibtex-find-pdf-in-library (key-or-entry)
              "Searches the directories in `helm-bibtex-library-path' for a
PDF whose names is composed of the BibTeX key plus \".pdf\".  The
path of the first matching PDF is returned."
              (let* ((key (if (stringp key-or-entry)
                              key-or-entry
                            (helm-bibtex-get-value "=key=" key-or-entry)))
                     (path (-first 'f-file?
                                   (--map (f-join it (s-concat (s-replace ":" "_" key) ".pdf"))
                                          (-flatten (list helm-bibtex-library-path))))))
                (when path (list path))))

            (helm-delete-action-from-source "Insert BibTeX key" helm-source-bibtex)
            (helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-key helm-source-bibtex 0)
            ))
#+END_SRC

** Adding References

I like the interface of [[https://github.com/cpitclaudel/biblio.el][biblio]] better, [[https://github.com/cute-jumper/gscholar-bibtex][gscholar-bibtex]] covers mode bases.

*** biblio.el

[[https://github.com/cpitclaudel/biblio.el][biblio]] browses and gathers bibliographic references and publications from various sources, by keywords or by DOI.

#+BEGIN_SRC emacs-lisp
(use-package biblio
  :ensure t)
#+END_SRC

*** gscholar bibtex

[[https://github.com/cute-jumper/gscholar-bibtex][gscholar-bibtex]] grabs BibTeX entries from from Google Scholar, ACM Digital Library, IEEE Xplore and DBLP.

#+BEGIN_SRC emacs-lisp
(use-package gscholar-bibtex
  :ensure t
  :init (progn
            (setq gscholar-bibtex-database-file (expand-file-name "common-latex/local.bib" malb/projects-dir))
            ))
#+END_SRC

** References for Org Mode

#+BEGIN_QUOTE
[[https://github.com/jkitchin/org-ref][Org-ref]] is a library for org-mode that provides rich support for citations, labels and cross-references in org-mode. org-ref is especially suitable for org-mode documents destined for LaTeX export and scientific publication. org-ref is also extremely useful for research documents and notes. org-ref bundles several other libraries that provide functions to create and modify bibtex entries from a variety of sources, but most notably from a DOI.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t
  :defer 2
  :config (progn
            (setq org-ref-default-bibliography reftex-default-bibliography)
            ))
#+END_SRC

* PDF Viewer

[[https://github.com/politza/pdf-tools][PDF tools]] is a reasonable PDF viewer for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :init (progn
          (add-hook 'pdf-view-mode-hook 'auto-revert-mode))
  :config (progn
            (pdf-tools-install)
            (setq-default pdf-view-display-size 'fit-page)
            (bind-key "D" #'dedicated-mode pdf-view-mode-map)))
#+END_SRC

We make ~scroll-other-window~ work for PDF tools ([[https://github.com/politza/pdf-tools/issues/55][source]])

#+BEGIN_SRC emacs-lisp
(defvar malb/scroll-functions
  '(("default" :down scroll-down :up scroll-up)
    (pdf-view-mode :down pdf-view-scroll-down-or-previous-page :up pdf-view-scroll-up-or-next-page)
    (help-mode :down Info-scroll-down :up Info-scroll-up)
    )
  "The functions that should be used when scrolling other windows of a particular buffer type.
If buffer type is not included, 'default' will be used. Used by malb/smart-other-scroll")

(defun malb/smart-other-scroll (dir)
  "Scroll the other window with appropriate function; `dir' should be :up or :down "
  (interactive)
  (let* ((other-buffer-mode (with-current-buffer (window-buffer (other-window-for-scrolling)) major-mode))
         (fun (or (plist-get (cdr (assoc other-buffer-mode malb/scroll-functions)) dir)
                  (plist-get (cdr (assoc "default" malb/scroll-functions)) dir))))
    (if fun
        (with-selected-window (other-window-for-scrolling)
          (call-interactively fun))
      )))

(defun malb/other-scroll-up ()
  "use `malb/smart-other-scroll' :up"
  (interactive) (malb/smart-other-scroll :up))

(defun malb/other-scroll-down ()
  "use `malb/smart-other-scroll' :down"
  (interactive) (malb/smart-other-scroll :down))

(define-key global-map (kbd "C-M-v") 'malb/other-scroll-up)
(define-key global-map (kbd "C-M-S-v") 'malb/other-scroll-down)
#+END_SRC

Extract PDF annotations to temporary org-mode buffer, based on [[https://github.com/machc/pdf-tools-org][pdf-tools-org]].

*Tip:* =C-u= prefix argument produces a compact variant.

#+BEGIN_SRC emacs-lisp
(defun pdf-tools-org-edges-to-region (edges)
  "Attempt to get 4-entry region \(LEFT TOP RIGHT BOTTOM\) from several EDGES.
We need this to import annotations and to get marked-up text, because
annotations are referenced by its edges, but functions for these tasks
need region."
  (let ((left0 (nth 0 (car edges)))
        (top0 (nth 1 (car edges)))
        (bottom0 (nth 3 (car edges)))
        (top1 (nth 1 (car (last edges))))
        (right1 (nth 2 (car (last edges))))
        (bottom1 (nth 3 (car (last edges))))
        (n (safe-length edges)))
    ;; we try to guess the line height to move
    ;; the region away from the boundary and
    ;; avoid double lines
    (list left0
          (+ top0 (/ (- bottom0 top0) 3))
          right1
          (- bottom1 (/ (- bottom1 top1) 3)))))

(defun malb/pdf-annot-export-as-org (compact)
  "Export annotations to Org Buffer."
  (interactive "P")
  (let* ((annots (sort (pdf-annot-getannots) 'pdf-annot-compare-annotations))
         (source-buffer (current-buffer))
         (source-buffer-name (file-name-sans-extension (buffer-name)))
         (source-file-name (buffer-file-name source-buffer))
         (target-buffer-name (format "*Notes for %s*" source-buffer-name))
         (target-buffer (get-buffer-create target-buffer-name)))
    (switch-to-buffer target-buffer)
    (org-mode)
    (erase-buffer)
    (insert (format "#+TITLE: Notes for %s\n" source-buffer-name))
    (insert (format "#+STARTUP: indent\n\n"))
    (insert (format "source: [[%s][%s]]\n\n" source-file-name source-buffer))
    (mapc
     (lambda (annot) ;; traverse all annotations
       (progn
         (insert (if compact "- " "* "))
         (insert (format "page %s" (cdr (assoc 'page annot))))
         ;; insert text from marked-up region in an org-mode quote
         (when (pdf-annot-get annot 'markup-edges)
           (let ((highlighted-text (with-current-buffer source-buffer
                                     (pdf-info-gettext (pdf-annot-get annot 'page)
                                                       (pdf-tools-org-edges-to-region
                                                        (pdf-annot-get annot 'markup-edges))))))
             (if compact
                 (insert (format ": “%s”\n\n" (replace-regexp-in-string "\n" " " highlighted-text)))
               (insert (concat "\n\n#+BEGIN_QUOTE\n"
                               highlighted-text
                               "\n#+END_QUOTE\n\n")))))
         (let ((note (pdf-annot-get annot 'contents)))
           (if (> (length note) 0)
               (insert (format "%s\n\n" note))))))
     (cl-remove-if
      (lambda (annot) (member (pdf-annot-get-type annot) (list 'link)))
      annots)
     )))

(defun malb/pdf-annot-export-as-md (compact)
  "Export annotations to Markdown buffer."
  (interactive "P")
  (let* ((annots (sort (pdf-annot-getannots) 'pdf-annot-compare-annotations))
         (source-buffer (current-buffer))
         (source-buffer-name (file-name-sans-extension (buffer-name)))
         (source-file-name (buffer-file-name source-buffer))
         (target-buffer-name (format "*Notes for %s*" source-buffer-name))
         (target-buffer (get-buffer-create target-buffer-name)))
    (switch-to-buffer target-buffer)
    (markdown-mode)
    (erase-buffer)
    (insert (format "---\ntitle: Notes for %s\n---\n\n" source-buffer-name))
    (insert (format "source: [%s](%s)\n\n" source-buffer source-file-name))
    (mapc
     (lambda (annot) ;; traverse all annotations
       (progn
         (insert (if compact
                     (format "- page %s: " (cdr (assoc 'page annot)))
                   (format "On page %s:  \n" (cdr (assoc 'page annot)))))
         ;; insert text from marked-up region in an org-mode quote
         (when (pdf-annot-get annot 'markup-edges)
           (let ((highlighted-text (with-current-buffer source-buffer
                                     (pdf-info-gettext (pdf-annot-get annot 'page)
                                                       (pdf-tools-org-edges-to-region
                                                        (pdf-annot-get annot 'markup-edges))))))
             (if compact
                 (insert (format "“%s”\n\n" (replace-regexp-in-string "\n" " " highlighted-text)))
               (insert (format "> %s\n\n" (replace-regexp-in-string "\n" "\n> " highlighted-text))))))

         (let ((note (pdf-annot-get annot 'contents)))
           (if (> (length note) 0)
               (insert (format "%s\n\n" note))))))
     (cl-remove-if
      (lambda (annot) (member (pdf-annot-get-type annot) (list 'link)))
      annots)
     )))

(defhydra malb/hydra-pdf-annot (:color blue)
  "export annotations to"
  ("o" (lambda () (interactive) (malb/pdf-annot-export-as-org 1)) "org-mode (compact)")
  ("O" malb/pdf-annot-export-as-org "org-mode")
  ("m" (lambda () (interactive) (malb/pdf-annot-export-as-md  1)) "markdown (compact)")
  ("M" malb/pdf-annot-export-as-md "markdown")
  ("q" nil "cancel"))

(bind-key "x" #'malb/hydra-pdf-annot/body pdf-view-mode-map)
#+END_SRC

* Dired

=dired-listing-switches= explained:

- =l=: Is the only mandatory one.
- =a=: Means to list invisible files.
- =G=: Don't show group information.
- =h=: Human readable sizes, such as M for mebibytes.
- =1v=: Affects the sorting of digits, hopefully in a positive way.
- =--group-directories-first=: self-explanatory

Note, you can use =dired-toggle-read-only= (=C-x C-q=) to make a Dired buffer editable to batch-rename.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config (progn
            (setq dired-listing-switches "-laGh1v --group-directories-first")

            (defvar malb/unimportant-files
              (mapconcat 'identity '("\\.idx" "\\.run\\.xml$" "\\.bcf$" ".blg$"
                                     "-blx.bib$" "\\.snm$"
                                     "\\.synctex\\.gz$" "\\.tex\\.backup$" "\\.bib\\.backup$"
                                     "\\.fdb_latexmk$" "\\.fls$"
                                     "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|out\\|nav\\|orig\\|rej\\|toc\\|vrb\\|pyg\\)\\)\\'")
                         "\\|"))

            (push ".brf" dired-latex-unclean-extensions)
            (push ".bmt" dired-latex-unclean-extensions)
            (push ".out" dired-latex-unclean-extensions)
            (push ".nav" dired-latex-unclean-extensions)
            (push ".snm" dired-latex-unclean-extensions)
            (push ".vrb" dired-latex-unclean-extensions)

            (setq dired-garbage-files-regexp malb/unimportant-files
                  dired-omit-files malb/unimportant-files
                  dired-recursive-copies 'always
                  dired-recursive-deletes 'always
                  dired-dwim-target t
                  dired-auto-revert-buffer t)

            ;; For the few times I’m using Dired, I prefer it not spawning an endless amount of
            ;; buffers. In fact, I’d prefer it using one buffer unless another one is explicitly
            ;; created, but you can’t have everything.
            ;; https://github.com/wasamasa/dotemacs/blob/master/init.org

            (bind-key "RET" #'dired-find-alternate-file dired-mode-map)

            (put 'dired-find-alternate-file 'disabled nil)

            (bind-key "F" 'find-name-dired dired-mode-map)
            (bind-key "M-o" 'dired-omit-mode dired-mode-map)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dired-x)
#+END_SRC

* Diff

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config (progn
            (setq ediff-window-setup-function 'ediff-setup-windows-plain
                  ediff-split-window-function 'split-window-horizontally
                  ediff-diff-options "-w")
            ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq diff-switches "-u")
#+END_SRC

* EShell

Open eshell at point and clean up when closing with =q= ([[http://www.howardism.org/Technical/Emacs/eshell-fun.html][source]]) and other stuff ([[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][source]])


#+BEGIN_SRC emacs-lisp
(use-package eshell
  :config (progn
            (defun malb/eshell-here ()
              "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
              (interactive)
              (let* ((parent (if (buffer-file-name)
                                 (file-name-directory (buffer-file-name))
                               default-directory))
                     (height (/ (window-total-height) 3))
                     (name   (car (last (split-string parent "/" t))))
                     (golden-ratio-mode nil))
                (split-window-vertically (- height))
                (other-window 1)
                (eshell "new")
                (rename-buffer (concat "*eshell: " name "*"))
                (insert (concat "ls"))
                (eshell-send-input)))

            (bind-key "C-!" #'malb/eshell-here)

            (defun malb/eshell-keys ()
              (bind-key "<home>" #'eshell-bol eshell-mode-map)
              (bind-key "M-l" #'helm-eshell-history eshell-mode-map))

            ;; https://github.com/bbatsov/emacs-dev-kit/blob/master/eshell-config.el
            ;; for some reason this needs to be a hook
            (add-hook 'eshell-mode-hook #'malb/eshell-keys)


            (setenv "PAGER" "cat") ;; https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
            (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))

            (defun malb/eshell-add-visual-commands ()
              (add-to-list 'eshell-visual-commands "htop"))

            (add-hook 'eshell-mode-hook #'malb/eshell-add-visual-commands)

            ;; mapped to 'q' in eshell
            (defun eshell/q ()
              (delete-window)
              (eshell/exit))

            (defun malb/config-eshell-completion ()
              (setq pcomplete-cycle-completions t))

            (add-hook 'eshell-mode-hook #'malb/config-eshell-completion)

            (setq eshell-scroll-to-bottom-on-input t)
            ))
#+END_SRC

* Diagrams
** [[http://plantuml.com/][PlantUML]]

#+BEGIN_SRC emacs-lisp
(use-package puml-mode
  :ensure t
  :commands (puml-mode)
  :init (progn
            (setq puml-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")))
#+END_SRC

*Example*

#+BEGIN_SRC plantuml :file foo.svg :tangle no
skinparam monochrome true
skinparam dpi 150
skinparam backgroundColor transparent
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam handwritten true

title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+END_SRC

- [[http://plantuml.com/latex.html][TikZ export]]
- See also https://github.com/josteink/wsd-mode for https://www.websequencediagrams.com/

* Calendar

[[https://github.com/kiwanami/emacs-calfw][calfw]] for displaying calendars, because why not.

#+BEGIN_SRC emacs-lisp
(use-package calfw
  :ensure t)

(use-package calfw-cal)
(use-package calfw-ical)
(use-package calfw-org)
#+END_SRC

* SX

[[https://github.com/vermiculus/sx.el/][Stack Exchange for Emacs]]

[[https://github.com/vermiculus/sx.el/raw/master/list-and-question.png]] ([[https://github.com/vermiculus/sx.el/raw/master/list-and-question.png][source]])

#+BEGIN_SRC emacs-lisp
  (use-package sx
    :ensure t)
#+END_SRC

* Misc
** Settings

Use the built-in ~show-paren-mode~ to highlight matching parentheses.

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0.2)
(show-paren-mode 1)
#+END_SRC

Characterise files with the same name by their path.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config (setq uniquify-buffer-name-style 'forward))
#+END_SRC

I hate tabs.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Pressing =y= or =n= is sufficent.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Overwrite a selection by typing over it.

#+BEGIN_SRC emacs-lisp
(pending-delete-mode t)
#+END_SRC

Kill whole line not just content on =C-k=.

#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC

In emacs minibuffer prompt, when you press the left arrow key, the cursor will move back all the way over the prompt text. This is annoying because user often will hold down ~Alt+b~ to move back by word to edit, and when user starts to type something, emacs will say ’This is read-only’. Then you have to manually move cursor out of the prompt. You can try it now by calling query-replace or shell-command. Here's how to set the cursor not going into prompt. ([[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][source]])

#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties (quote (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
#+END_SRC

A file is large if it is 32MB in my world.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 33554432)
#+END_SRC

Make command history persistent ([[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][source]])

#+BEGIN_SRC emacs-lisp
(savehist-mode t)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

Always prefer to load newer files, instead of giving precedence to the .elc files.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

Smoother scrolling.

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10
      scroll-preserve-screen-position t)
#+END_SRC

Smoother mouse scrolling.

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; one line at a time
      mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
      mouse-wheel-follow-mouse 't)                 ; scroll window under mouse
#+END_SRC

Use ~kill -pUSR1~ to kill Emacs. ([[https://github.com/wasamasa/dotemacs/blob/master/init.org][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/quit-emacs-unconditionally ()
  (interactive)
  (my-quit-emacs '(4)))

(define-key special-event-map (kbd "<sigusr1>") #'malb/quit-emacs-unconditionally)
#+END_SRC

Show key combos

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

Diminish ~eldoc-mode~

#+BEGIN_SRC emacs-lisp
(diminish 'eldoc-mode)
#+END_SRC

When saving a file that starts with =#!=, make it executable.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** Functions

Add a function for renaming the file being edited ([[https://github.com/bodil/ohai-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+END_SRC

Copy filename to clipboard ([[http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** Scratch
*** Unkillable scratch

We don’t want the *scratch* buffer to be killed ever.

#+BEGIN_SRC emacs-lisp
(use-package unkillable-scratch
  :ensure t
  :config (progn
            (unkillable-scratch 1)))
#+END_SRC

*** Get a [[https://github.com/ieure/scratch-el][scratch]] for every mode quickly

#+BEGIN_SRC emacs-lisp
(use-package scratch
  :ensure t)
#+END_SRC

*** We know what scratch is for

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC

** [[https://github.com/Malabarba/elisp-bug-hunter][Bug-hunter]]

Debug startup failures. If your Emacs init file signals an error during startup, but you don't know why, simply issue ~M-x bug-hunter-init-file RET RET~ and The Bug Hunter will find it for you.

#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :ensure t)
#+END_SRC

** [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Emacs from Chrome]]

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :ensure t
  :config (progn
            (edit-server-start)))
#+END_SRC

** [[https://github.com/doublep/logview][Logs]]

#+BEGIN_SRC emacs-lisp
(use-package logview
  :ensure t
  :config (setq logview-auto-revert-mode 'auto-revert-tail-mode))
#+END_SRC

** Transfer.sh

[[https://github.com/Brillow/transfer-sh.el][transfer.sh]] for interfacing with https://transfer.sh.

#+BEGIN_SRC emacs-lisp
(use-package transfer-sh
  :ensure t)
#+END_SRC

* Services

[[https://github.com/rejeep/prodigy.el][Prodigy]] is a way of managing services from Emacs. Use it for IMAP idle via [[https://www.npmjs.com/package/imapnotify][imapnotify]]. For completeness here’s a matching imapnotify config.

#+BEGIN_SRC js :tangle no
var child_process = require('child_process');

function getStdout(cmd) {
  var stdout = child_process.execSync(cmd);
  return stdout.toString().trim();
}

exports.host = "imap.gmail.com";
exports.port = 993;
exports.tls = true;
exports.username = "martinralbrecht@gmail.com";
exports.password = // whatever needs doing
exports.onNewMail = "mbsync googlemail-minimal";
exports.onNewMailPost = "emacsclient  -e '(mu4e-update-index)'";
exports.boxes = [ "INBOX"];
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package prodigy
  :ensure t
  :init (progn
          (prodigy-define-tag
            :name 'email
            :ready-message "Checking Email using IMAP IDLE. Ctrl-C to shutdown.")

          (prodigy-define-service
            :name "imapnotify"
            :command "imapnotify"
            :args (list "-c" (expand-file-name ".config/imapnotify.gmail.js" (getenv "HOME")))
            :tags '(email)
            :kill-signal 'sigkill)

          (prodigy-define-service
            :name "malb.io"
            :cwd (expand-file-name "web/malb.io" malb/projects-dir)
            :command "jekyll"
            :args '("serve" "-P" "4001")
            :port 4001
            :tags '(web))

          (prodigy-define-service
            :name "discrete-subgroup"
            :cwd (expand-file-name "web/lattice-meetings" malb/projects-dir)
            :command "jekyll"
            :args '("serve" "-P" "4002")
            :url "http://127.0.0.1:4002/discrete-subgroup/"
            :tags '(web))))
#+END_SRC

* Page Breaks

Inspired by this [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][post]], make use of page break characters by using [[https://github.com/purcell/page-break-lines][page-break-lines]] and [[https://github.com/david-christiansen/helm-pages][helm-pages]]. ([[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][source]])

- Insert a new page break with =C-q C-l=.

- Use =C-x [= and =C-x ]= to move backward and forward through pages, respectively.

([[http://ericjmritz.name/2015/10/14/some-personal-hydras-for-gnu-emacs/][hydra source]])

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :config (progn
            (global-page-break-lines-mode)
            (add-to-list 'page-break-lines-modes 'c-mode)
            (add-to-list 'page-break-lines-modes 'python-mode)
            (diminish 'page-break-lines-mode)))

(use-package helm-pages
  :ensure t
  :config (progn
            (defhydra hydra-page-breaks (global-map "C-x")
              "pages"
              ("[" backward-page "backward")
              ("]" forward-page "forward")
              ("M-p" helm-pages "helm" :color blue)
              ("RET" nil "quit"))
            ))
#+END_SRC

* X11

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq x-select-enable-clipboard t                  ; use clipboard for copy and paste
        save-interprogram-paste-before-kill t        ; keep a copy of clipboard stuff around
        mouse-yank-at-point t
        x-select-enable-primary t
        x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

Use GTK printing interface.

#+BEGIN_SRC emacs-lisp
(setq lpr-command "gtklp")
#+END_SRC

* Autosave & Backups

Put autosave files (ie =#foo#=) in one place, not scattered across the file system.

#+BEGIN_SRC emacs-lisp
(defvar malb/autosave-dir
  (expand-file-name "autosaves" user-emacs-directory))

(make-directory malb/autosave-dir t)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat malb/autosave-dir
          (if buffer-file-name
              (concat "#" (file-name-nondirectory buffer-file-name) "#")
            (expand-file-name
             (concat "#%" (buffer-name) "#")))))
#+END_SRC

Put backup files (ie =foo~=) in one place too. The ~backup-directory-alist~ list contains regexp → directory mappings. Filenames matching a regexp are backed up in the corresponding directory. Emacs will mkdir it if necessary.

#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "autosaves" user-emacs-directory))
(setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC

* UTF-8

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

(setq current-language-environment "UTF-8")
(setq default-input-method "rfc1345")

(prefer-coding-system 'utf-8)
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
(malb/set-menu-key "<f2>" #'malb/hydra-window/body)
(malb/set-menu-key "a" #'helm-imenu-anywhere)
(malb/set-menu-key "b" #'malb/helm-omni)
(malb/set-menu-key "c" #'helm-calcul-expression)
(malb/set-menu-key "C" #'mu4e-compose-new)
(malb/set-menu-key "e" #'malb/eshell-here)
(malb/set-menu-key "f" #'helm-find-files)
(malb/set-menu-key "i" #'helm-semantic-or-imenu)
(malb/set-menu-key "j" #'avy-goto-word-1)
(malb/set-menu-key "k" #'helm-baloo)
(malb/set-menu-key "l" #'helm-bibtex)
(malb/set-menu-key "m" #'malb/mail)
(malb/set-menu-key "n" #'helm-mu)
(malb/set-menu-key "/" #'malb/helm-ag-projects)
(malb/set-menu-key "o" #'helm-org-agenda-files-headings)
(malb/set-menu-key "P" #'prodigy)
(malb/set-menu-key "p" #'pandoc-main-hydra/body)
(malb/set-menu-key "s" #'helm-swoop)
(malb/set-menu-key "w" #'olivetti-mode)
(malb/set-menu-key "x" #'helm-M-x)
(malb/set-menu-key "z" #'ansi-term)
#+END_SRC

Easily change the text size:

#+BEGIN_SRC emacs-lisp
(defun malb/global-text-scale-increase ()
  "Globally increase font size."
  (interactive)
  (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) 5)))

(defun malb/global-text-scale-decrease ()
  "Globally decrease font size."
  (interactive)
  (set-face-attribute 'default nil :height (- (face-attribute 'default :height) 5)))

(bind-key "C-=" #'text-scale-increase)
(bind-key "C--" #'text-scale-decrease)
(bind-key "C-M-=" #'malb/global-text-scale-increase)
(bind-key "C-M--" #'malb/global-text-scale-decrease)
(bind-key "C-<mouse-4>" #'text-scale-increase)
(bind-key "C-<mouse-5>" #'text-scale-decrease)
(bind-key "C-M-<mouse-4>" #'malb/global-text-scale-increase)
(bind-key "C-M-<mouse-5>" #'malb/global-text-scale-decrease)
#+END_SRC

Remap join-line to ~M-j~ where it's easier to get to. ~join-line~ will join the line you're on with the line above it in a reasonable manner for the type of file you're editing.

#+BEGIN_SRC emacs-lisp
(bind-key "M-j" #'join-line)
#+END_SRC

=C-z= only annoys me, use =C-x C-z= when you need it

#+BEGIN_SRC emacs-lisp
(bind-key "C-z" nil)
#+END_SRC

** Learn key bindings

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config (progn
            (which-key-mode 1)))
#+END_SRC

* Look
** Frame Title

([[https://github.com/wasamasa/dotemacs/blob/master/init.org][source]])

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '("" (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))
        " - " invocation-name))
#+END_SRC


** Stripe Buffer

[[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png]] ([[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png][source]])

[[https://github.com/sabof/stripe-buffer][Stripe Buffer]] makes it vastly easier to read tables and friends. We apply this [[https://github.com/sabof/stripe-buffer/pull/14][patch]] for performance.

#+BEGIN_SRC emacs-lisp
(use-package stripe-buffer
  :ensure t
  :config (progn
            (add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
            (add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
            (set-face-attribute 'stripe-highlight nil :background "gray93")
            ))
#+END_SRC

** Theme

Use a solarized patched to be less yellow by changing

| color     | original  | malb      |
| ~s-base2~ | ~#EEE8D5~ | ~#EEEDEA~ |
| ~s-base3~ | ~#FDF6E3~ | ~#FDFCF9~ |

We also [[./org-block-background.patch][patch]] org-mode to get background colours for source code blocks [[https://emacs.stackexchange.com/questions/14824/org-block-background-font-not-having-effect][back]].

The result looks like this:

[[./screenshot.png]]

*Note:* We don’t set colours directly but instead wait until the first frame is created because we typically run =emacs= as a daemon.

#+BEGIN_SRC emacs-lisp
(when (string-equal malb/theme "solarized")
  (use-package solarized
    :ensure solarized-theme
    :config (progn
              (setq solarized-use-variable-pitch nil
                    solarized-high-contrast-mode-line nil
                    solarized-height-minus-1 1.0
                    solarized-height-plus-1  1.0
                    solarized-height-plus-2  1.0
                    solarized-height-plus-3  1.0
                    solarized-height-plus-4  1.0
                    solarized-use-less-bold nil
                    solarized-emphasize-indicators t
                    solarized-scale-org-headlines nil
                    x-underline-at-descent-line t)

              (defun malb/load-main-theme ()
                (load-theme 'solarized-light t)

                ;; steal org style from Leuven
                (set-face-attribute 'org-checkbox nil :weight 'bold :box '(:line-width 1 :style 'pressed-button) :foreground "white" :background "light gray")
                (set-face-attribute 'org-done nil :weight 'bold :box '(:line-width 1 :color "#BBBBBB") :foreground "#8BB300" :background "#F0F0F0")
                (set-face-attribute 'org-scheduled-previously nil :foreground "#cb4b16")
                (set-face-attribute 'org-tag nil :weight 'normal :box '(:line-width 1 :color "#BBBBBB") :foreground "#9A9FA4")
                (set-face-attribute 'org-todo nil :weight 'bold :box '(:line-width 1 :color "#D8ABA7") :foreground "#cb4b16" :background "#FFE6E4")
                (set-face-attribute 'org-block-begin-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
                (set-face-attribute 'org-block-end-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
                (set-face-attribute 'org-block-background nil :background (solarized-with-color-variables
                                                                            'light
                                                                            (solarized-color-blend base02 base03 0.3)))
                (when (boundp 'hl-sentence-mode)
                  (set-face-attribute 'hl-sentence-face nil :background (solarized-with-color-variables
                                                                            'light
                                                                            (solarized-color-blend base02 base03 0.6))))
                (when (boundp 'which-func-mode)
                  (set-face-attribute 'which-func nil :foreground "#DEB542"))

                ;; steal spacemacs flycheck style
                (eval-after-load "fylcheck"
                  (progn
                    (set-face-attribute 'flycheck-error   nil :underline "#dc322f")
                    (set-face-attribute 'flycheck-warning nil :underline "#b58900")
                    (set-face-attribute 'flycheck-info    nil :underline "#268bd2")
                    (set-face-attribute 'flycheck-fringe-error   nil :background "white" :foreground "#dc322f" :weight 'bold)
                    (set-face-attribute 'flycheck-fringe-warning nil :background "white" :foreground "#DEB542" :weight 'bold)
                    (set-face-attribute 'flycheck-fringe-info    nil :background "white" :foreground "#69B7F0" :weight 'bold)
                    )))
              )))

(when (string-equal malb/theme "dichromacy")
  (progn
    (defun malb/load-main-theme ()
      (load-theme 'dichromacy t)

      ;; steal org style from Leuven
      (set-face-attribute 'org-checkbox nil :weight 'bold :box '(:line-width 1 :style 'pressed-button) :foreground "white" :background "light gray")
      (set-face-attribute 'org-done nil :weight 'bold :box '(:line-width 1 :color "#BBBBBB") :foreground "#8BB300" :background "#F0F0F0")
      (set-face-attribute 'org-scheduled-previously nil :foreground "#cb4b16")
      (set-face-attribute 'org-tag nil :weight 'normal :box '(:line-width 1 :color "#BBBBBB") :foreground "#9A9FA4")
      (set-face-attribute 'org-todo nil :weight 'bold :box '(:line-width 1 :color "#D8ABA7") :foreground "#cb4b16" :background "#FFE6E4")
      (set-face-attribute 'org-block-begin-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
      (set-face-attribute 'org-block-end-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
      (set-face-attribute 'org-block-background nil :background "#F4F4F4")
      (set-face-attribute 'org-table nil :foreground "#d55e00")

      ;; steal spacemacs flycheck style
      (eval-after-load "fylcheck"
        (progn
          (set-face-attribute 'flycheck-error   nil :underline "#dc322f")
          (set-face-attribute 'flycheck-warning nil :underline "#b58900")
          (set-face-attribute 'flycheck-info    nil :underline "#268bd2")
          (set-face-attribute 'flycheck-fringe-error   nil :background "white" :foreground "#dc322f" :weight 'bold)
          (set-face-attribute 'flycheck-fringe-warning nil :background "white" :foreground "#DEB542" :weight 'bold)
          (set-face-attribute 'flycheck-fringe-info    nil :background "white" :foreground "#69B7F0" :weight 'bold)))
      )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("CANCELLED" :foreground "gray" :weight bold)
        ("DISABLED"  :foreground "gray" :weight bold)
        ("ONHOLD"    :foreground "gray" :weight bold)
        ("STALLED"   :foreground "gray" :weight bold)
        ("SUBMITTED" :foreground "gray" :weight bold)
        ("DELEGATED" :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
        ("WAITING"   :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
        ("COAUTHOR"  :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
        ("NATIVE"    :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
        ))
#+END_SRC

Set transparency because reasons ([[https://github.com/codemac/config/blob/master/emacs.d/boot.org][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** Powerline

We use [[https://github.com/TheBB/spaceline/tree/master][Spaceline]] which customises [[https://github.com/milkypostman/powerline][Powerline]].

[[https://github.com/TheBB/spaceline/raw/master/screen.png]] ([[https://github.com/TheBB/spaceline/tree/master][source]])

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config
  :ensure spaceline
  :config (progn
            (defun malb/load-mode-line-theme ()
              (setq spaceline-workspace-numbers-unicode nil)

              ;; https://github.com/TheBB/spaceline/issues/54
              (spaceline-define-segment line-column
                "The current line and column numbers."
                (if (eq major-mode 'pdf-view-mode)
                    (concat (number-to-string (pdf-view-current-page))
                            "/"
                            (number-to-string (pdf-cache-number-of-pages)))
                  mode-line-position
                  "%l:%2c"))

              (spaceline-spacemacs-theme)
              (spaceline-helm-mode)

              (spaceline-toggle-hud-off)
              (spaceline-toggle-buffer-encoding-abbrev-off)

              (set-face-attribute 'powerline-active1 nil :background "grey22" :foreground "white smoke")
              (set-face-attribute 'powerline-active2 nil :background "grey40" :foreground "gainsboro")
              (set-face-attribute 'powerline-inactive1 nil :background "grey55" :foreground "white smoke")
              (set-face-attribute 'powerline-inactive2 nil :background "grey65" :foreground "gainsboro")
              (powerline-reset))))
#+END_SRC

** Rainbow mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'rainbow-mode))
  :diminish rainbow-mode)
#+END_SRC

** Beacon

Send a little [[https://github.com/Malabarba/beacon][beacon]] signal after jumps to make it easier to find the cursor.

[[https://raw.githubusercontent.com/Malabarba/beacon/master/example-beacon.gif]] ([[https://github.com/Malabarba/beacon][source]])

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config (progn

            (defun malb/beacon-disable-hl-line-mode ()
              (bound-and-true-p hl-line-mode))

            (setq beacon-color "#EEAD0E")
            (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode)

            (add-hook 'beacon-dont-blink-predicates
                      #'malb/beacon-disable-hl-line-mode)

            (beacon-mode t)))
#+END_SRC

** Vim-like Empty Line Indicator

#+BEGIN_SRC emacs-lisp
(define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
(setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
(set-fringe-bitmap-face 'tilde 'font-lock-comment-face)
(setq-default indicate-empty-lines t)
#+END_SRC

** Load Theme

#+BEGIN_SRC emacs-lisp
(defvar malb/theme-loaded nil)

(defun malb/load-theme (frame)
  (when (not malb/theme-loaded)
    (select-frame frame)
    (malb/load-main-theme)
    (malb/load-mode-line-theme)
    (setq malb/theme-loaded t)))

(if (daemonp)
    (add-hook 'after-make-frame-functions #'malb/load-theme)
  (malb/load-theme (selected-frame)))
#+END_SRC

* Baloo

[[https://community.kde.org/Baloo][Baloo]] is KDE’s desktop search. Below we implement a tiny helm interface to it.

#+BEGIN_SRC emacs-lisp
(defcustom helm-baloo-file-limit 100
  "Limit number of entries returned by baloo to this number."
  :group 'helm-baloo
  :type '(integer :tag "Limit"))


(defun baloo-search (pattern)
  (start-process "baloosearch" nil "baloosearch" (format "-l %d " helm-baloo-file-limit) pattern))

(defun helm-baloo-search ()
  (baloo-search helm-pattern))

(defun helm-baloo-transform (cs)
  (let '(helm-baloo-clean-up-regexp (rx (or
                                         control
                                         (seq "[0;31m" (+ (not (any "["))) "[0;0m")
                                         "[0;32m"
                                         "[0;0m")))
    (mapcar (function
             (lambda (c)
               (replace-regexp-in-string
                (rx (seq bol (+ space))) ""
                (replace-regexp-in-string helm-baloo-clean-up-regexp "" c))))
            cs)))

(defvar helm-source-baloo
  (helm-build-async-source "Baloo"
    :candidates-process #'helm-baloo-search
    :candidate-transformer #'helm-baloo-transform
    :action '(("Open" . (lambda (x) (find-file x)))
              ("Attach to Email" . (lambda (x) (mml-attach-file x)))
              ("Transfer.sh" . (lambda (x) (transfer-sh-upload-file-async x))))))

(defun helm-baloo ()
  (interactive)
  (helm :sources helm-source-baloo
        :buffer "*helm baloo*"))
#+END_SRC

* ToDos
** TODO get better at jumping around
- =avy-goto-word-1= (=C-c C-<SPC>=)
- =pop-local-mark= (=C-u C-<SPC>=)
- =pop-global-mark= (=C-x C-<SPC>=)
- =helm-all-mark-rings= (=C-h C-<SPC>=)
- next buffer/previous buffer: =C-x <left>= and =C-x <right>=
* Notes
** Stuck Emacs

#+BEGIN_QUOTE
If your instance hangs and won't respond to =C-g=, you can use =pkill -SIGUSR2 emacs= to force emacs to stop whatever it's doing.
#+END_QUOTE

([[http://irreal.org/blog/?p=4763][source]])

** Compile .emacs

#+BEGIN_SRC emacs-lisp :tangle no
(byte-recompile-directory (expand-file-name "elpa" user-emacs-directory) nil t)
#+END_SRC

** Commands to remember

- You can scroll the other window with ~C-M-v~ and ~C-M-S-v~.
- =C-x SPC= rectangle-mark-mode
- =C-u C-SPC= jump back locally
- =C-x C-SPC= jump back globally
- =C-x z= repeat last command (and again with just =z=)
- =align-regexp= to align on regexp
- =C-c == reftex-toc
- =C-h c= invokes describe-key-briefly.
- =%&= in =dired= marks garbage files
- =M-a= and =M-e= to move through sentences and
- =C-<down>= and =C-<up>= to move backwards and forwards through paragraphs
- ~M-|~ to send the contents of a region to a shell command
- =C-x 4 C-o= (~display-buffer~) opens another window, but instead if showing the same buffer, shows another one, the name of which is read from the minibuffer. Note that the newly opened window does not get selected!
- =C-x 4 0= (~kill-buffer-and-window~), which not only deletes the current window (like ~C-x 0~), but also kills its buffer.
- ~C-x 4 c~ (~clone-indirect-buffer-other-window~) splits the current window, clones the current buffer and visits the clone in the newly opened window.
- =C-x <left>= and =C-x <right>= cycle through buffers

** TRAMP syntax

To SSH to host do =/ssh:host:/=

** C++ mode ([[https://stackoverflow.com/questions/3312114/how-to-tell-emacs-to-open-h-file-in-c-mode][source]])

Another approach for using both c-mode and c++-mode as appropriate, is to use directory local variables to set the mode.

Directory variables are evaluated after the mode has been set, so you can actually write a =.dir-locals.el= file for your C++ project containing this:

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((mode . c++))))
#+END_SRC

And Emacs will change the mode to ~c++-mode~ whenever it had initially set it to ~c-mode~.

** Macros ([[https://github.com/howardabrams/pdx-emacs-hackers/blob/master/workshops/keyboard-macros.org][source]])

- =C-x C-k= prefix for macro actions
- =C-x C-k C-c= sets a counter value, =F3= inserts a counter value when defining a macro
- =C-x C-k C-e= to edit macros

* Technical Artefacts

# Local Variables:
# eval: (ws-butler-mode 1)
# End:
