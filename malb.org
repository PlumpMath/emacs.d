#+STARTUP: overview indent
#+SETUPFILE: theme-readtheorg.setup
#+TODO: TEST(t) IMPLEMENT(i) TODO(o) | DONE(d)
#+TODO: | DISABLED(d)

* Assumptions

We assume that the following variables are defined:

- ~malb/projects-dir~ - a superepository of which all of my projects are subprojects
- ~malb/literature-dir~ - PDFs of papers
- ~malb/literature-notes-dir~ - notes on papers
- ~malb/documents-dir~ - documents
- ~malb/sync-dir~ - documents that are syncronised
- ~malb/solarized-p~ - do we want solarized?
- ~malb/paradox-github-token~ - github login
- ~malb/org-files-dir~ - org files go here
- ~malb/org-mode-ics~ - icalendar file
- ~malb/private-org~ - this is where I store tasks
- ~malb/inbox-org~ - this is where I store tasks
- ~malb/org-files~ - org files go here
- ~malb/common-file-targets~ - for helm
- ~malb/projectile-ignored-projects~ - ignored projects
- ~malb/sage-executable~ - full path of Sage executable
- ~malb/mu4e-maildirs-custom-list~ a list of maildirs to highlight in mu4e

* Package Management

Configure package repositories

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/") ))
#+END_SRC

Get the package manager going, but do not autoload packages.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Use [[https://github.com/jwiegley/use-package/][use-package]] to keep our configuration readable.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

[[https://github.com/Bruce-Connor/paradox/][Paradox]] is a better package list

- Visit the package's homepage with =v=
- View a list of recent commits with =l=
- Shortcuts for package filtering:
  - =f r= filters by regexp (occur)
  - =f u= display only packages with upgrades
  - =f k= filters by keyword
  - =f c= clear filter
- Hit =h= to see all keys

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure paradox
  :config (setq paradox-github-token malb/paradox-github-token
                paradox-automatically-star t))
#+END_SRC

* Fullscreen

Maximise the window as soon as possible

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Startup

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

* Disable Clutter

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

* Memory

We have RAM, lots of it.

#+BEGIN_SRC emacs-lisp
(setq global-mark-ring-max 100
      mark-ring-max 100
      kill-ring-max 100
      gc-cons-threshold 16777216)
#+END_SRC

*Note:* Don’t set ~gc-cons-threshold~ to something much bigger as it will cause to hang occasionally
for a long-ish time.

* Keyboard Shortcuts

We use ~Super~ (in our case: ~CapsLock~) as a menu of sorts:

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'f2-global-map)
(bind-key "<f2>" #'f2-global-map)

(defun malb/set-menu-key (char func)
  (bind-key (concat "s-" char) func)
  (bind-key char func f2-global-map))
#+END_SRC

** Key Chords

Key chords allow to execute actions by pressing one or two keys really fast. Sometimes we might want
to use those. However, mostly, we don’t as the slight delay they introduce (to check if a key chord
should be executed or the text inserted) is annoying.

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config (progn
            (setq key-chord-one-key-delay 0.2)
            (key-chord-mode 1)
            ))
#+END_SRC

* Window Management
** Splitting

When splitting windows open the previous buffer in it.

#+BEGIN_SRC  emacs-lisp
(defun malb/vsplit-last-buffer ()
  "Split the window vertically and display the previous buffer."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun malb/hsplit-last-buffer ()
  "Split the window horizontally and display the previous buffer."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'malb/vsplit-last-buffer)
(bind-key "C-x 3" 'malb/hsplit-last-buffer)
#+END_SRC

** Restoring configurations

[[http://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode. When activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands =C-c left= and =C-c right=.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Multiple Window Configurations

[[https://github.com/wasamasa/eyebrowse][eyebrowse]] is a simple-minded way of managing window configuration.

[[http://s22.postimg.org/aqd1em8xd/spacemacs_eyebrowse_demo.gif]] ([[https://www.reddit.com/r/emacs/comments/34htzr/eyebrowse_i3_window_manager_inside_emacs/][source]])

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :diminish eyebrowse-mode
  :init (setq eyebrowse-keymap-prefix (kbd "C-c C-l"))
  :config (progn
            (setq eyebrowse-wrap-around t)
            (bind-key "[" #'eyebrowse-rename-window-config eyebrowse-mode-map)

            (eyebrowse-mode t)

            (defun malb/eyebrowse-new-window-config ()
              (interactive)
              (let ((done nil))
                (dotimes (i 10)
                  ;; start at 1 run till 0
                  (let ((j (mod (+ i 1) 10)))
                    (when (and (not done)
                               (not (eyebrowse--window-config-present-p j)))
                      (eyebrowse-switch-to-window-config j)
                      (eyebrowse-rename-window-config j)
                      (setq done t)
                      ))
                  )))

            (malb/set-menu-key "["  #'malb/eyebrowse-new-window-config)
            (malb/set-menu-key ","  #'eyebrowse-prev-window-config)
            (malb/set-menu-key "."  #'eyebrowse-next-window-config)
            (malb/set-menu-key "]"  #'eyebrowse-close-window-config)))
#+END_SRC

** Switching

Use [[https://github.com/abo-abo/ace-window][ace-window]] for switching windows.

[[http://oremacs.com/download/ace-window.gif]] ([[http://oremacs.com/download/ace-window.gif][source]])

- =C-x o= jump to window (rebound from ~other-window~)
- =±= jump to window (~other-window~)

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind (("C-x o" . ace-window)
         ("M-p" . ace-window)
         ("±" . other-window))
  :config (progn
            (setq aw-keys   '(?a ?s ?d ?f ?j ?k ?l)
                  aw-dispatch-always t
                  aw-dispatch-alist
                  '((?x aw-delete-window     "Ace - Delete Window")
                    (?c aw-swap-window       "Ace - Swap Window")
                    (?n aw-flip-window)
                    (?v aw-split-window-vert "Ace - Split Vert Window")
                    (?h aw-split-window-horz "Ace - Split Horz Window")
                    (?g delete-other-windows "Ace - Maximize Window")
                    (?b balance-windows)
                    (?u winner-undo)
                    (?r winner-redo)))))
#+END_SRC

Also use =windmove= ([[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-29][source]])

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind (("<f2> <right>" . windmove-right)
         ("<f2> <left>" . windmove-left)
         ("<f2> <up>" . windmove-up)
         ("<f2> <down>" . windmove-down)))
#+END_SRC

** Resizing

#+BEGIN_SRC emacs-lisp
(bind-key "S-C-<left>" 'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<down>" 'shrink-window)
(bind-key "S-C-<up>" 'enlarge-window)
#+END_SRC

** Special windows

Some buffers should behave like pop ups:

- display at the bottom with 0.3 height
- display as a side-window

We then use =malb/quit-bottom-side-windows= to close them.

#+BEGIN_SRC emacs-lisp
(defvar malb/popup-windows '("\\`\\*helm flycheck\\*\\'"
                             "\\`\\*Flycheck errors\\*\\'"
                             "\\`\\*helm projectile\\*\\'"
                             "\\`\\*Helm all the things\\*\\'"
                             "\\`\\*Help\\*\\'"
                             "\\`\\*anaconda-doc\\*\\'"
                             "\\`\\*Google Translate\\*\\'"
                             "\\` \\*LanguageTool Errors\\* \\'"))

(dolist (name malb/popup-windows)
  (add-to-list 'display-buffer-alist
               `(,name
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-height   . 0.3))))
#+END_SRC

*** Closing side windows

In case we just want to kill the bottom window, set a shortcut do to this.

#+BEGIN_SRC emacs-lisp
(defun malb/quit-bottom-side-windows ()
  "Quit side windows of the current frame."
  (interactive)
  (dolist (window (window-at-side-list))
    (quit-window nil window)))

(bind-key "C-§" #'malb/quit-bottom-side-windows)
(key-chord-define-global "qq" #'malb/quit-bottom-side-windows)
#+END_SRC

*** Compilation window

If there is no compilation window, open one at the bottom, spanning the complete width of the frame. Otherwise, reuse existing window. In the former case, if there was no error the window closes automatically.

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             `(,(rx bos "*compilation*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (reusable-frames . visible)
               (side            . bottom)
               (window-height   . 0.4)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/compilation-exit-autoclose (status code msg)
  ;; If M-x compile exists with a 0
  (when (and (eq status 'exit) (zerop code))
    ;; and delete the *compilation* window
    (let ((compilation-window (get-buffer-window (get-buffer "*compilation*"))))
      (when (and (not (window-at-side-p compilation-window 'top))
                 (window-at-side-p compilation-window 'left)
                 (window-at-side-p compilation-window 'right))
        (delete-window compilation-window))))
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))

;; Specify my function (maybe I should have done a lambda function)
(setq compilation-exit-message-function #'malb/compilation-exit-autoclose)
#+END_SRC

If you change the variable ~compilation-scroll-output~ to a ~non-nil~ value, the compilation buffer scrolls automatically to follow the output. If the value is ~first-error~, scrolling stops when the first error appears, leaving point at that error. For any other non-nil value, scrolling continues until there is no more output.

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

* Clean Mode Line

Use [[http://www.eskimo.com/~seldon/diminish.el][diminish.el]] to remove mentions of minor modes from the mode-line as we’re using a quite few of them and don’t want to waste the real estate. Most diminishing is done by the ~:diminish~ parameter to =use-package=.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

[[http://www.emacswiki.org/emacs/DelightedModes][delight.el]] allows us to rewrite mode-line statuses of minor modes. Which we use when the diminish
keyword is not enough.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t)
#+END_SRC

* Jumping around

[[https://raw.githubusercontent.com/wiki/nloyola/avy/images/avy-goto-char.png]] ([[https://github.com/abo-abo/avy][source]])

See [[http://emacsrocks.com/e10.html][Emacs Rocks #10]] which is in ~ace-jump-mode~ which inspired [[https://github.com/abo-abo/avy][avy]].


#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c C-SPC" . avy-goto-word-1)
  :config (progn
            (setq avy-background t)))
#+END_SRC

** [[https://github.com/abo-abo/ace-link][Jumping to links]]

#+BEGIN_QUOTE
Currently, to jump to a link in an =Info-mode= or =help-mode= or =woman-mode= or =org-mode= or
=eww-mode= or =compilation-mode= buffer, you can tab through the links to select the one you want.
This is an O(N) operation, where the N is the amount of links. This package turns this into an O(1)
operation, or at least O(log(N)) if you manage to squeeze thousands of links in one screen. It does
so by assigning a letter to each link using avy. ([[https://github.com/abo-abo/ace-link][source]])
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :ensure t
  :config (ace-link-setup-default))
#+END_SRC

* Snippets

#+BEGIN_QUOTE
[[https://github.com/capitaomorte/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. ([[https://github.com/capitaomorte/yasnippet][source]])
#+END_QUOTE

[[http://blog.refu.co/wp-content/uploads/2015/07/wpid-yasnippet1.gif]] ([[http://blog.refu.co/?p=1355][source]])

Also, see [[http://emacsrocks.com/e06.html][Emacs Rocks #06]] which is in ~yasnippet~.

Call ~yas-decribe-tables~ to see currently defined snippets.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config (progn
              (yas-global-mode)
              (setq yas-verbosity 1)))
#+END_SRC

* Auto Completion

Use [[https://github.com/company-mode/company-mode][company-mode]] for auto-completion.

[[https://company-mode.github.io/images/company-elisp.png]] ([[https://company-mode.github.io/images/company-elisp.png][source]])


#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :bind (("C-<return>" . company-complete)
         ("M-/"        . company-dabbrev))

  :config (progn
            (setq company-tooltip-limit 20 ; bigger popup window
                  company-idle-delay 0.3   ; disable delay before autocompletion popup shows
                  company-echo-delay 0     ; remove blinking
                  company-show-numbers t   ; show numbers for easy selection
                  company-selection-wrap-around t
                  company-dabbrev-ignore-case t
                  company-dabbrev-ignore-invisible t
                  company-dabbrev-other-buffers t
                  company-dabbrev-downcase nil
                  company-minimum-prefix-length 2
                  company-global-modes '(not sage-shell:sage-mode
                                             sage-shell-mode
                                             py-ipython-shell-mode
                                             py-python-shell-mode
                                             ein:notebook-multilang-mode
                                             ein:notebook-python-mode)
                  company-lighter-base "")

            (global-company-mode 1)

            (add-to-list 'company-backends #'company-c-headers)
            (add-to-list 'company-backends #'company-anaconda)

            (bind-key "C-n"   #'company-select-next company-active-map)
            (bind-key "C-p"   #'company-select-previous company-active-map)
            (bind-key "<tab>" #'company-complete company-active-map)
            (bind-key "M-?"   #'company-show-doc-buffer company-active-map)
            (bind-key "M-."   #'company-show-location company-active-map)
            (bind-key "M-/"   #'company-complete-common org-mode-map)))
#+END_SRC


Use [[https://github.com/expez/company-quickhelp][company-quickhelp]] to display quick help.

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :config (company-quickhelp-mode 1))
#+END_SRC

** C/C++

For C/C++ use [[https://github.com/company-mode/company-mode/blob/master/company-semantic.el][company-semantic]] (and [[https://github.com/randomphrase/company-c-headers][company-c-headers]]) which can be a bit tricky to set up, but works very well once that is done.

#+BEGIN_SRC emacs-lisp
(use-package company-c-headers
  :ensure t
  :config (progn
            (defun malb/ede-object-system-include-path ()
              "Return the system include path for the current buffer."
              (when ede-object
                (ede-system-include-path ede-object)))

            (setq company-c-headers-path-system #'malb/ede-object-system-include-path)
            ))
#+END_SRC

** Python

For Python use [[https://github.com/proofit404/company-anaconda][company-anaconda]].

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :ensure t)
#+END_SRC

** LaTeX

For LaTeX use [[https://github.com/alexeyr/company-auctex][company-auctex]] but insert unicode symbols via [[https://github.com/vspinu/company-math][company-math]], hence we manage what to add when carefully below.

#+BEGIN_SRC emacs-lisp
(use-package company-math
  :ensure t)

(use-package company-auctex
  :ensure t
  :config (progn
            (add-to-list 'company-backends
                         '(company-auctex-macros company-auctex-environments company-math-symbols-unicode))
            (add-to-list 'company-backends #'company-auctex-labels)
            (add-to-list 'company-backends #'company-auctex-bibs)
            (setq company-math-disallow-unicode-symbols-in-faces nil)))
#+END_SRC

** YaSnippet

Add yasnippet support for all company backends. ([[https://github.com/syl20bnr/spacemacs/pull/179][source]])

*Note:* Do this at the very end.

#+BEGIN_SRC emacs-lisp
  (defvar malb/company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun malb/company-mode/backend-with-yas (backend)
    (if (or (not malb/company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'malb/company-mode/backend-with-yas company-backends))
#+END_SRC

* Helm

[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs.

[[https://tuhdo.github.io/static/helm_projectile.gif]] ([[https://tuhdo.github.io/helm-intro.html][source]])

See [[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]] for a nice introduction.

| *Combo* | *Command*             |
|---------+-----------------------|
| =C-w=   | yanks word at point   |
| =M-n=   | yanks symbol at point |
| =C-h f= | ~describe-function~   |
| =C-h v= | ~describe-variable~   |
| =C-h w= | ~where-is~            |

** Bufers, Files

[[https://github.com/emacs-helm/helm/raw/master/doc/helm-buffers-list.gif]] ([[https://github.com/emacs-helm/helm/raw/master/doc/helm-buffers-list.gif][source]])

Don’t use the vanilla =helm-buffers= command for =C-x C-b= but combine many sources to create =malb/helm-omni.= ([[http://stackoverflow.com/a/19284509][source]])

*Tip:* Use =@foo= to search for content =foo= in buffers when in =helm-omni=. Use =*lisp= to search for buffers in ~lisp-mode~. Use =*!list= to search for buffers not in ~lisp-mode~.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-omni (&rest arg)
  ;; just in case someone decides to pass an argument, helm-omni won't fail.
  (interactive)
  (unless helm-source-buffers-list
    (setq helm-source-buffers-list
          (helm-make-source "Buffers" 'helm-source-buffers)))
  (helm-other-buffer
   (append

    (if (projectile-project-p)
        '(helm-source-projectile-buffers-list
          helm-source-buffers-list)
      '(helm-source-buffers-list)) ;; list of all open buffers

    `(((name . "Virtual Workspace")
       (candidates . ,(--map (cons  (eyebrowse-format-slot it) (car it))
                             (eyebrowse--get 'window-configs)))
       (action . (lambda (candidate)
                   (eyebrowse-switch-to-window-config candidate))
               )))

    (if (projectile-project-p)
        '(helm-source-projectile-recentf-list
          helm-source-recentf)
      '(helm-source-recentf)) ;; all recent files

    ;; always make some common files easily accessible
    '(((name . "Common Files")
       (candidates . malb/common-file-targets)
       (action . (("Open" . (lambda (x) (find-file (eval x))))))))

    (if (projectile-project-p)
        '(helm-source-projectile-files-list
          helm-source-files-in-current-dir)
      '(helm-source-files-in-current-dir)) ;; files in current directory

    '(helm-source-locate               ;; file anywhere
      helm-source-baloo                ;; baloo search
      helm-source-bookmarks            ;; bookmarks too
      helm-source-buffer-not-found     ;; ask to create a buffer otherwise
      )

    ;; adding helm-source-imenu-anywhere does some weird pre-filtering
    '(((name . "imenu-anywere")
       (candidates . helm-imenu-anywhere-candidates)
       (action .
               #[(elm)
                 "\301\302\"\207"
                 [elm imenu-anywhere--goto-function ""]
                 3])))
    ) "*Helm all the things*"))
#+END_SRC

Use helm for switching buffers, opening files, calling interactive functions.

The default ~C-x c~ is quite close to =C-x C-c=, which quits Emacs. Changed to =C-c h=. We must set =C-c h= globally, because we cannot change =helm-command-prefix-key= once =helm-config= is loaded. ([[https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el][source]])

We also use ~(helm-all-mark-rings)~ to jump around marks (set with =C-SPC C-SPC= et al.).

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :bind (("M-x"     . helm-M-x)
         ("C-x C-b" . malb/helm-omni)
         ("C-x C-f" . helm-find-files)
         ("C-h <SPC>" . helm-all-mark-rings))
  :config (progn
            (bind-key "C-c h" #'helm-command-prefix)
            (unbind-key "C-x c")

            (setq helm-adaptive-mode t
                  helm-apropos-fuzzy-match t
                  helm-bookmark-show-location t
                  helm-buffer-max-length 48
                  helm-buffers-fuzzy-matching t
                  helm-completion-in-region-fuzzy-match t
                  helm-display-header-line t
                  helm-ff-skip-boring-files t
                  helm-lisp-fuzzy-completion t
                  helm-imenu-fuzzy-match t
                  helm-input-idle-delay 0.01
                  helm-mode-fuzzy-match t
                  helm-org-headings-fontify t
                  helm-recentf-fuzzy-match t
                  helm-split-window-in-side-p t
                  helm-truncate-lines nil)

            (when (executable-find "curl")
              (setq helm-google-suggest-use-curl-p t))

            (helm-mode t)

            ;; manipulating these lists must happen after helm-mode was called
            (add-to-list 'helm-boring-buffer-regexp-list "\\*CEDET Global\\*")

            (delete "\\.bbl$" helm-boring-file-regexp-list)
            (add-to-list 'helm-boring-file-regexp-list "\\.nav" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.out" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.snm" t)

            ;; rebind tab to do persistent action
            (bind-key "<tab>" 'helm-execute-persistent-action helm-map)
            ;; make TAB works in terminal
            (bind-key "C-i"   'helm-execute-persistent-action helm-map)
            ;; list actions using C-z
            (bind-key "C-z"   'helm-select-action             helm-map)
            )
  )
#+END_SRC

** Helm-ring

=helm-ring= makes the kill ring actually useful, let’s use it.

#+BEGIN_SRC emacs-lisp
  (use-package helm-ring
    :bind (("M-y" . helm-show-kill-ring)))
#+END_SRC

** [[https://github.com/ShingoFukuyama/helm-swoop][Helm-swoop]]

Use =helm-swoop= for most of buffer searching. If =isearch= is needed, reach for =C-M-s= which is bound to ~vr/isearch-forward~.

[[https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif]] ([[https://github.com/ShingoFukuyama/helm-swoop][source]])


*Tip*: You can edit =helm-swoop= buffers by pressing =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-swoop-pre-fill ()
  (thing-at-point 'symbol)) ;; I’m going back and forth what I prefer

(setq malb/helm-swoop-ignore-major-mode
      '(dired-mode paradox-menu-mode doc-view-mode pdf-view-mode mu4e-headers-mode))

(defun malb/swoop-or-search ()
  (interactive)
  (if (or (> (buffer-size) 1048576) ;; helm-swoop can be slow on big buffers
          (memq major-mode malb/helm-swoop-ignore-major-mode))
      (isearch-forward)
    (helm-swoop)
    ))

(use-package helm-swoop
  :ensure t
  :bind (("C-c o" . helm-multi-swoop-org)
         ("C-s"   . malb/swoop-or-search)
         ("C-S-s" . helm-multi-swoop-all)
         ("C-r"   . helm-resume))
  :config (progn
            (setq helm-swoop-pre-input-function
                  #'malb/helm-swoop-pre-fill)
            (setq helm-swoop-split-with-multiple-windows nil
                  helm-swoop-speed-or-color t)
            (bind-key "C-S-s" #'helm-multi-swoop-all-from-helm-swoop helm-swoop-map)

            (bind-key "C-r" #'helm-previous-line helm-swoop-map)
            (bind-key "C-s" #'helm-next-line helm-swoop-map)
            (bind-key "C-r" 'helm-previous-line helm-multi-swoop-map)
            (bind-key "C-s" 'helm-next-line helm-multi-swoop-map)
            ))
#+END_SRC

** [[https://github.com/syohex/emacs-helm-ag][Helm-ag]]

[[http://beyondgrep.com][Ack]] is “a tool like grep, optimized for programmers“. [[https://github.com/ggreer/the_silver_searcher][Ag]] is like =ack=, but faster. =Helm-ag= is a helm-based Emacs frontend to =ag=. We use =helm-ag= mainly via =helm-projectile-ag=, which allows us to =grep= through all project files quickly.

[[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif]] ([[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif][source]])

*Note:* You can switch to edit mode with =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t
  :config (setq helm-ag-base-command "ag --nocolor --nogroup --ignore-case"
                helm-ag-command-option "--all-text"
                helm-ag-insert-at-point 'symbol
                helm-ag-fuzzy-match t
                helm-ag-use-grep-ignore-list t
                helm-ag-use-agignore t))
#+END_SRC

** Helm-themes

Switch themes with helm.

#+BEGIN_SRC emacs-lisp
(use-package helm-themes
  :ensure t)
#+END_SRC

** [[https://github.com/xuchunyang/helm-commandlinefu][Helm-commandlinefu]]

Helm interface to http://www.commandlinefu.com/.

#+BEGIN_SRC emacs-lisp
(use-package helm-commandlinefu
  :ensure t)
#+END_SRC

** Helm-baloo

[[https://community.kde.org/Baloo][Baloo]] is KDE’s desktop search. Below we implement a tiny helm interface to it.

#+BEGIN_SRC emacs-lisp
(defcustom helm-baloo-file-limit 100
  "Limit number of entries returned by baloo to this number."
  :group 'helm-baloo
  :type '(integer :tag "Limit"))


(defun baloo-search (pattern)
  (start-process "baloosearch" nil "baloosearch" (format "-l %d " helm-baloo-file-limit) pattern))

(defun helm-baloo-search ()
  (baloo-search helm-pattern))

(defun helm-baloo-transform (cs)
  (let '(helm-baloo-clean-up-regexp (rx (or
                                         control
                                         (seq "[0;31m" (+ (not (any "["))) "[0;0m")
                                         "[0;32m"
                                         "[0;0m")))
    (mapcar (function (lambda (c)
                        (replace-regexp-in-string
                         (rx (seq bol (+ space))) ""
                         (replace-regexp-in-string helm-baloo-clean-up-regexp "" c))))
            cs)))

(defvar helm-source-baloo
  (helm-build-async-source "Baloo"
    :candidates-process #'helm-baloo-search
    :candidate-transformer #'helm-baloo-transform
    :action '(("Open" . (lambda (x) (find-file x)
                          )))))

(defun helm-baloo ()
  (interactive)
  (helm :sources helm-source-baloo
        :buffer "*helm baloo*"))
#+END_SRC

* Recent Files

Don’t include boring or remote stuff in list of recently visited files.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config  (setq recentf-max-saved-items 50
                 recentf-exclude '("COMMIT_EDITMSG"
                                   "~$"
                                   "/tmp/"
                                   "/ssh:"
                                   "/sudo:"
                                   "/scp:")))
#+END_SRC

* IMenu

Make sure to auto automatically rescan for imenu change.

#+BEGIN_SRC emacs-lisp
(set-default 'imenu-auto-rescan t)
#+END_SRC

[[https://github.com/vspinu/imenu-anywhere][IMenu items for all buffers]] with the same major mode as the current one.

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :ensure t)
#+END_SRC

** TODO do we need ~helm-imenu-anywhere~ or is ~helm-imenu-in-all-buffers~ sufficient?

* Parenthesis

See [[https://ebzzry.github.io/emacs-pairs.html][here]] for an introduction to [[https://github.com/Fuco1/smartparens][smartparens]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn
            (require 'smartparens-config)
            (require 'smartparens-latex)

            (smartparens-global-mode t)
            (setq sp-autodelete-wrap t)
            (setq sp-autoescape-string-quote nil) ;; don't escape quotes in strings
            (bind-key "C-M-d" 'sp-down-sexp sp-keymap)
            (bind-key "C-M-u" 'sp-backward-up-sexp sp-keymap)

            (bind-key "C-M-a" 'sp-beginning-of-sexp sp-keymap)
            (bind-key "C-M-e" 'sp-end-of-sexp sp-keymap)

            (bind-key "M-<right>" 'sp-next-sexp sp-keymap)
            (bind-key "M-<left>" 'sp-previous-sexp sp-keymap)

            (bind-key "C-M-t" 'sp-transpose-sexp sp-keymap)
            (bind-key "M-d" 'sp-kill-sexp sp-keymap)
            (bind-key "M-<backspace>" 'sp-backward-unwrap-sexp sp-keymap)

            (bind-key "C-<right>" 'sp-forward-slurp-sexp sp-keymap)
            (bind-key "C-<left>" 'sp-forward-barf-sexp sp-keymap)

            (bind-key "C-M-<backspace>" 'sp-splice-sexp-killing-backward sp-keymap)
            (bind-key "C-S-<backspace>" 'sp-splice-sexp-killing-around sp-keymap)

            (add-to-list 'sp-ignore-modes-list 'org-mode) ; too slow
            (add-to-list 'sp-ignore-modes-list 'python-mode) ; too slow
            (add-to-list 'sp-ignore-modes-list 'cython-mode) ; too slow
            (add-to-list 'sp-navigate-consider-stringlike-sexp 'latex-mode)
            ))
#+END_SRC

** Misc

A better ~C-a~. ([[http://www.wilfred.me.uk/.emacs.d/init.html][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/beginning-of-line-dwim ()
  "Toggles between moving point to the first non-whitespace character, and
  the start of the line."
  (interactive)
  (let ((start-position (point)))
    ;; Move to the first non-whitespace character.
    (back-to-indentation)

    ;; If we haven't moved position, go to start of the line.
    (when (= (point) start-position)
      (move-beginning-of-line nil))))


(bind-key "C-a" #'malb/beginning-of-line-dwim)
(bind-key "<home>"  #'malb/beginning-of-line-dwim python-mode-map)
(bind-key "<home>"  #'malb/beginning-of-line-dwim lisp-mode-map)

#+END_SRC

* Projects

#+BEGIN_QUOTE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. […]

This library provides easy project management and navigation. The concept of a project is pretty basic – just a folder containing special file. Currently git, mercurial, darcs and bazaar repos are considered projects by default. So are lein, maven, sbt, scons, rebar and bundler projects. If you want to mark a folder manually as a project just create an empty =.projectile= file in it. Some of Projectile's features:

- jump to a file in project
- jump to files at point in project
- jump to a directory in project
- jump to a file in a directory
- jump to a project buffer
- jump to a test in project
- toggle between files with same names but different extensions (e.g. =.h= <-> =.c/.cpp=, =Gemfile= <-> =Gemfile.lock=)
- toggle between code and its test (e.g. =main.service.js= <-> =main.service.spec.js=)
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- =multi-occur= in project buffers
- grep in project
- regenerate project =etags= or =gtags= (requires =ggtags=).
- visit project in =dired=
- run make in a project with a single key chord
#+END_QUOTE

[[https://raw.githubusercontent.com/bbatsov/projectile/master/screenshots/projectile.png]] ([[https://github.com/bbatsov/projectile/blob/master/screenshots/projectile.png][source]])

*Commands:*

- =C-c p D=   ~projectile-dired~
- =C-c p F=   ~helm-projectile-find-file-in-known-projects~
- =C-c p P=   ~projectile-test-project~
- =C-c p S=   ~projectile-save-project-buffers~
- =C-c p b=   ~helm-projectile-switch-to-buffer~
- =C-c p f=   ~helm-projectile-find-file~
- =C-c p g=   ~helm-projectile-find-file-dwim~
- =C-c p h=   ~helm-projectile~
- =C-c p p=   ~helm-projectile-switch-project~
- =C-c p r=   ~projectile-replace~
- =C-c p s s= ~helm-projectile-ag~

*When switching projects:*

- ~C-d~ open Dired in project's directory
- ~M-g~ open project root in vc-dir or magit
- ~M-e~ switch to Eshell: Open a project in Eshell.
- ~C-s~ grep in projects (add prefix C-u to recursive grep)
- ~C-c~ Compile project: Run a compile command at the project root.
- ~M-D~ Remove project(s): Delete marked projects from the list of known projects.
- ~C-c @~ insert the current file that highlight bar is on as an org link.

*Note*: =next-error= has nothing to do with projectile, but =<f5>= and =<f6>= kind of go together. ~previous-error~ is bound to =M-g p=.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind (("<f5>" . projectile-compile-project)
         ("<f6>" . next-error))
  :config (progn
            (require 'magit) ;; this is ugly but we need it here for now
            (require 'helm-projectile)
            (helm-projectile-on)

            (defun malb/projectile-ignored-project-function (project-root)
              (progn
                (or (file-remote-p project-root)
                    ;; don't litter project list with cryptobib subprojects
                    (and  (string-match (rx-to-string `(: "cryptobib/" eos) t)
                                        project-root) t))))

            (setq projectile-make-test-cmd "make check"
                  projectile-ignored-projects malb/projectile-ignored-projects
                  projectile-ignored-project-function #'malb/projectile-ignored-project-function
                  projectile-switch-project-action 'helm-projectile
                  projectile-mode-line  '(:eval
                                          (format " [%s]"
                                                  (projectile-project-name))))

            (projectile-global-mode)))

#+END_SRC

** [[https://tuhdo.github.io/helm-projectile.html][Helm-projectile]]

*Commands:*

- =C-c p h= for =helm-projectile= which combines buffer, file and project switching
- =C-c p F= for =helm-projectile-find-file-in-known-projects=

We add a “Create file“ action ([[https://www.reddit.com/r/emacs/comments/3m8i5r/helmprojectile_quickly_findcreate_new_file_in/][source]]).

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :config (progn
            (defvar malb/helm-source-file-not-found
              (helm-build-dummy-source
                  "Create file"
                :action 'find-file))
            (add-to-list 'helm-projectile-sources-list malb/helm-source-file-not-found t))
  )
#+END_SRC

* Org-mode all the things!

See [[http://orgmode.org/guide/Introduction.html][here]] for an introduction to [[http://orgmode.org/][org-mode]].

*Note:* Ideally, we’d want to put all org-mode stuff into one big =:config= blog, but that makes it harder to read/explain.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda))
  :mode ("\\.org$" . org-mode))
#+END_SRC

** Files

#+BEGIN_SRC emacs-lisp
(setq org-directory malb/org-files-dir)
(setq org-agenda-files malb/org-files)
(setq org-default-notes-file malb/inbox-org)
#+END_SRC

** Options

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers nil            ; hide markers for like *foo*
      org-ellipsis " […]"
      org-enforce-todo-dependencies t          ; enforce todo dependencies
      org-habit-graph-column 117
      org-use-speed-commands t
      org-catch-invisible-edits 'smart
      org-tags-column -110
      org-startup-folded 'fold
      org-log-into-drawer t
      org-log-done t
      org-highlight-latex-and-related '(latex)
      org-return-follows-link t          ; follow links by pressing ENTER on them
      org-clock-persist 'history
      org-special-ctrl-a/e t                   ; special begin/end of line to skip starts …
      org-special-ctrl-k t                     ; special keys for killing a headline
      org-src-fontify-natively t               ; fontify code blocks
      org-agenda-tags-column -117
      org-agenda-include-diary nil
      org-agenda-dim-blocked-tasks t
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-agenda-ignore-drawer-properties '(effort appt category)
      org-agenda-window-setup 'current-window  ; Overwrite the current window with the agenda
      org-agenda-sticky t                      ; Use sticky agenda's so they persist
      org-agenda-compact-blocks t              ; Compact the block agenda view
      org-edit-src-content-indentation 0       ; don't indent source code
      org-src-preserve-indentation t           ; preserve indentation inside of source blocks
      org-src-window-setup 'current-window     ; org-src windows set up when hitting C-c '
      org-reverse-note-order t
      )

(bind-key "<home>" #'org-beginning-of-line org-mode-map)
(bind-key "<end>" #'org-end-of-line org-mode-map)
(bind-key "C-c C-." #'org-time-stamp org-mode-map) ; ede binds C-c . too
(bind-key "C-c C-," #'org-time-stamp-inactive org-mode-map) ; fylcheck binds C-c ! too
#+END_SRC

**** TODO move org config to respective sections

** Images

Display images inline ([[http://doc.norang.ca/org-mode.html][source]])

#+BEGIN_SRC emacs-lisp
;;
(defun malb/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(add-hook 'org-babel-after-execute-hook #'malb/display-inline-images 'append)
#+END_SRC

** Org Babel

Working with source code in org-mode.

#+BEGIN_SRC emacs-lisp
(use-package ob

  :config (progn
            ;; load more languages for org-babel
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((python . t)
               (sh . t)
               (ditaa . t)
               (clojure . t)
               (plantuml . t)))

            (setq org-confirm-babel-evaluate nil
                  org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

            (add-to-list 'org-src-lang-modes (quote ("plantuml" . puml)))))
#+END_SRC

*** [[https://github.com/gregsexton/ob-ipython][Org iPython]]

#+BEGIN_SRC emacs-lisp
(use-package ob-ipython
  :ensure t)
#+END_SRC

** ToDo Keywords & Scheduling

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w@)" "|" "DELEGATED(e@/!)" "DONE(d)" "CANCELLED(c@/!)")
        (sequence "WRITE" "TRANSLATE(!)" "FEEDBACK(@/!)" "REVISE(!)"
                  "COAUTHOR(!/@)" "NATIVE(@)" "PUBLISH(!)" "SENDOUT(!)" "WAITING(@/!)"
                  "|"  "PUBLISHED(!)")
        (sequence "REPLY(r)" "|" "SENT")
        (sequence "PLAY" "LOAD" "|" "SEEN")))

(org-clock-persistence-insinuate)
#+END_SRC

delete SCHEDULED if new state is WAITING

#+BEGIN_SRC emacs-lisp
(defun malb/org-after-todo-state-change ()
  (when (or
         (string-equal org-state "WAITING")
         (string-equal org-state "COAUTHOR")
         (string-equal org-state "NATIVE")
         (string-equal org-state "SUBMITTED"))
    (org-remove-timestamp-with-keyword org-scheduled-string)))

(add-hook 'org-after-todo-state-change-hook 'malb/org-after-todo-state-change)
#+END_SRC

** Refiling

Targets include this file and any file contributing to the agenda - up to 9 levels deep
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 9))))
#+END_SRC

Stop using paths for refile targets - we file directly with helm
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path nil)
#+END_SRC

Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes '(confirm))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/verify-refile-target () ; Exclude DONE state tasks from refile targets
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'malb/verify-refile-target)
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
;; source http://endlessparentheses.com/ispell-and-org-mode.html
(defun malb/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))

(add-hook 'org-mode-hook #'malb/org-ispell)
(add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC

** Diminish Minor Modes

#+BEGIN_SRC emacs-lisp
(defun malb/diminish-org-indent-mode ()
  (ignore-errors
    (diminish 'org-indent-mode)))

(add-hook 'org-mode-hook #'malb/diminish-org-indent-mode)
#+END_SRC

** Archiving

Archive with tags intact and some order in target file preserved. ([[http://orgmode.org/worg/org-hacks.html][source]])

#+BEGIN_SRC emacs-lisp
;;
(defun malb/org-inherited-no-file-tags ()
  (let ((tags (org-entry-get nil "ALLTAGS" 'selective))
        (ltags (org-entry-get nil "TAGS")))
    (mapc (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (concat tag ":") "" tags)))
          (append org-file-tags (when ltags (split-string ltags ":" t))))
    (if (string= ":" tags) nil tags)))

(defadvice org-archive-subtree (around malb/org-archive-subtree-low-level activate)
  (let ((tags (malb/org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (> (org-outline-level) 1))
             (concat (car (split-string org-archive-location "::"))
                     "::* "
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))

#+END_SRC

** Habit

#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :config (add-to-list 'org-modules 'org-habit))
#+END_SRC

** Protocol

#+BEGIN_SRC emacs-lisp
(use-package org-protocol)
#+END_SRC

** Bullets

Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.

[[https://raw.githubusercontent.com/sabof/org-bullets/master/screenshot.png]] ([[https://raw.githubusercontent.com/sabof/org-bullets/master/screenshot.png][source]])

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :commands org-bullets-mode
  :init  (progn

           (defun malb/enable-org-bullets ()
             (org-bullets-mode 1))

           (add-hook 'org-mode-hook #'malb/enable-org-bullets)
           (setq org-bullets-bullet-list '("◉" "✸" "○" "○"))))
#+END_SRC

** Export

#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8)
#+END_SRC

*** iCalendar

#+BEGIN_SRC emacs-lisp
(use-package ox-icalendar
  :config (progn
            (setq org-icalendar-include-todo t
                  org-icalendar-combined-agenda-file malb/org-mode-ics
                  org-icalendar-categories '(category)
                  org-icalendar-use-scheduled '(todo-start event-if-not-todo)
                  org-icalendar-use-deadline '(todo-due)
                  org-icalendar-with-timestamps 'active
                  org-export-with-timestamps 'active
                  org-export-async-init-file (expand-file-name "org-export-init.el" user-emacs-directory))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar malb/org-icalendar-export-timer nil
  "Timer that `malb/org-icalendar-export-timer' used to reschedule itself, or nil.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/org-icalendar-export-with-delay (secs)
  (when malb/org-icalendar-export-timer
    (cancel-timer malb/org-icalendar-export-timer))
  (setq malb/org-icalendar-export-timer
        (run-with-idle-timer   (* 1 secs) nil (lambda ()
                                                ;; async, check org-export-init.el
                                                (org-icalendar-combine-agenda-files t)
                                                (org-agenda-redo)
                                                ))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/ox-export-after-save-hook ()
  (if (eq major-mode 'org-mode)
      (malb/org-icalendar-export-with-delay 600)))

(add-hook 'after-save-hook 'malb/ox-export-after-save-hook)
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package ox-md)
#+END_SRC

*** LaTeX

- We use [[http://www.xelatex.org][XeLaTeX]] because UTF-8 and fonts.
- We drop =\usepackage[T1]{fontenc}= because XeLaTeX doesn’t need it.
- We add [[https://www.ctan.org/pkg/tufte-latex?lang=en][tufte-handout]] as a class for our … handouts.

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :config (progn
            (setq org-latex-listings 't)
            (add-to-list 'org-latex-packages-alist '("" "listings"))
            (add-to-list 'org-latex-packages-alist '("" "color"))
            (setq org-latex-pdf-process
                  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                    "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                    "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
            (setq org-latex-default-packages-alist
                  (remove* '("T1" "fontenc" t) org-latex-default-packages-alist :test 'equal))
            (add-to-list 'org-latex-classes
                         '("tuftehandout"
                           "\\documentclass{tufte-handout}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
#+END_SRC

** Capture

If we are in a project we might add a TODO entry to the appropriate entry in =projects.org=.

#+BEGIN_SRC emacs-lisp
(defun malb/org-capture-projectile ()
  (if (projectile-project-p)
      (progn
        (let ((malb/projectile-name
               (projectile-project-name)))
          (find-file (expand-file-name "projects.org" malb/org-files-dir))
          (goto-char (point-min))
          (if (re-search-forward (concat "^\* " malb/projectile-name ".*\n") nil t)
              (newline 1)
            (progn
              (goto-char (point-max))
              (insert (concat "* " malb/projectile-name))
              (newline 1)
              ))))
    (progn
      (find-file malb/private-org)
      (goto-char (point-min))
      (re-search-forward "^\* Tasks" nil t)
      (newline 1))
    ))
#+END_SRC

*Template Expansions*

- =%[file]= Insert the contents of the file given by file.
- =%(sexp)= Evaluate Elisp sexp and replace with the result. For convenience, =%:keyword= (see below) placeholders within the expression will be expanded prior to this. The sexp must return a string.
- =%<...>= The result of format-time-string on the ... format specification.
- =%t= Timestamp, date only.
- =%T= Timestamp, with date and time.
- =%u, %U= Like the above, but inactive timestamps.
- =%i= Initial content, the region when capture is called while the region is active. The entire text will be indented like =%i= itself.
- =%a= Annotation, normally the link created with ~org-store-link~.
- =%A= Like =%a=, but prompt for the description part.
- =%l= Like =%a=, but only insert the literal link.
- =%c= Current kill ring head.
- =%x= Content of the X clipboard.
- =%K= Link to the currently clocked task.
- =%k= Title of the currently clocked task.
- =%n= User name (taken from user-full-name).
- =%f= File visited by current buffer when org-capture was called.
- =%F= Full path of the file or directory visited by current buffer.
- =%:keyword= Specific information for certain link types, see below.
- =%^g= Prompt for tags, with completion on tags in target file.
- =%^G= Prompt for tags, with completion all tags in all agenda files.
- =%^t= Like %t, but prompt for date. Similarly =%^T=, =%^u=, =%^U=. You may define a prompt like =%^{Birthday}t=.
- =%^L= Like %^C, but insert as link.
- =%^C= Interactive selection of which kill or clip to use.
- =%^{prop}p= Prompt the user for a value for property prop.
- =%^{prompt}= prompt the user for a string and replace this sequence with it. You may specify a default value and a completion table with =%^{prompt|default|completion2|completion3...}=. The arrow keys access a prompt-specific history.
- =%\n= Insert the text entered at the nth =%^{prompt}=, where n is a number, starting from 1.
- =%?= After completing the template, position cursor here.

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :bind ("<f9>" . org-capture)
  :config (setq org-capture-templates
                '(("t" "task"
                   entry (file malb/inbox-org)
                   "** TODO %?\n%i" :prepend t)

                  ("p" "project task" plain (function malb/org-capture-projectile)
                   "** TODO %?\n%a\n" :prepend t)

                  ("k" "respond to e-mail (KMail)"
                   entry (file+headline malb/inbox-org "Email")
                   "* REPLY to [[mailto:%link][%:description]]\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n\n[[mailto:%:link][%:link]] wrote:\n#+BEGIN_QUOTE\n%x\n#+END_QUOTE\n\n"
                   :immediate-finish t
                   :prepend t)

                  ("r" "respond ro e-mail (mu4e)"
                   entry (file+headline malb/inbox-org "Email")
                   "* REPLY to %:from on %a\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n%U\n\n"
                   :immediate-finish nil
                   :prepend t)

                  ("n" "note"
                   entry (file+headline malb/private-org "Notes" :prepend t)
                   "* %?\n  %i")

                  ("m" "music"
                   entry (file+headline malb/private-org "Music")
                   "* %?\n  %i")

                  ("j" "journal entry"
                   entry (file+datetree (expand-file-name "journal.org" malb/org-files-dir))
                   "** research\n%?\n** critique\n\n"))))

#+END_SRC

** Meeting Notes

#+BEGIN_QUOTE
I've notice that while I really like taking notes in a meeting, I don't always like the multiple windows I have opened, so I created this function that I can easily call to eliminate distractions enduring a meeting. ([[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org][source]])
#+END_QUOTE

    #+BEGIN_SRC elisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
  should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)                              ;; Select org-mode section
  (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
  (deactivate-mark)
  (delete-other-windows)                              ;; Get rid of other windows
  (text-scale-set 2)                                  ;; Text is now readable by others
  (fringe-mode 0)
  (olivetti-mode 1)
  (olivetti-set-width 110)
  (olivetti-toggle-hide-modeline)
  (message "When finished taking your notes, run meeting-done."))
    #+END_SRC

    #+BEGIN_SRC elisp
(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)                                       ;; Opposite of narrow-to-region
  (text-scale-set 0)                            ;; Reset the font size increase
  (fringe-mode 1)
  (olivetti-toggle-hide-modeline)
  (olivetti-mode 0)
  (winner-undo))                                ;; Put the windows back in place
    #+END_SRC

** Org Tree Slide

#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :ensure t
  :config (progn
            (bind-key "C-<left>"  #'org-tree-slide-move-previous-tree org-tree-slide-mode-map)
            (bind-key "C-<right>" #'org-tree-slide-move-next-tree org-tree-slide-mode-map)
            (bind-key "<f11>"   #'org-tree-slide-content org-tree-slide-mode-map)
            (setq org-tree-slide-skip-outline-level 2)))
#+END_SRC

** Tips
*** Agenda commands

| ~F~         | ~(org-agenda-follow-mode)~           | Toggle Follow mode                                     |
| ~L~         | ~(org-agenda-recenter)~              | Display original location and recenter that window.    |
| ~o~         |                                      | Delete other windows.                                  |
| ~f~         | ~(org-agenda-later)~                 | Go forward in time to display                          |
| ~b~         | ~(org-agenda-earlier)~               | Go backward in time to display earlier dates           |
| ~r~ and ~g~ | ~(org-agenda-redo)~                  | Recreate the agenda buffer.                            |
| ~C-c C-s~   | ~(org-agenda-schedule)~              | Schedule this item.                                    |
| ~C-c C-d~   | ~(org-agenda-deadline)~              | Set a deadline for this item.                          |
| ~S-<right>~ | ~(org-agenda-do-date-later)~         | Change the timestamp by one day into the future.       |
| ~S-<left>~  | ~(org-agenda-do-date-earlier)~       | Change the timestamp by one day into the past.         |
| ~>~         | ~(org-agenda-date-prompt)~           | Change the timestamp associated with the current line. |
| ~m~         | ~(org-agenda-bulk-mark)~             | Mark the entry at point for bulk action.               |
| ~*~         | ~(org-agenda-bulk-mark-all)~         | Mark all visible agenda entries for bulk action.       |
| ~u~         | ~(org-agenda-bulk-unmark)~           | Unmark entry at point for bulk action.                 |
| ~U~         | ~(org-agenda-bulk-remove-all-marks)~ | Unmark all marked entries for bulk action.             |
| ~B~         | ~(org-agenda-bulk-action)~           | Bulk action: act on all marked entries in the agenda.  |

*** Commands I easily forget

- =C-c C-j= calls ~(org-goto)~ which jumps to headlines in a file
- =C-c /= calls ~(org-sparse-tree)~ which reduces the tree to the nodes with some attribute

*** Style

-In org-mode we can style inline elements with *bold*, /italic/, _underlined_, =verbatim=, and ~code~. But this breaks if the character just inside the styling code is a non-smart single or double quote. =C-c ;= is styled; =C-c '= is not. We can fix that by inserting a zero-width space between the apostrophe and the = . The first time, we can put the cursor between the apostrophe and the = and enter ~C-x 8 RET ZERO WIDTH SPACE RET~, at which point =C-c '​= will display correctly.
* Git
** [[http://magit.vc][Magit]]

Magit is a very nice Git interface.

[[http://magit.vc/img/shot/top.png]] ([[http://magit.vc][source]])

We enable [[https://github.com/magit/magit-svn][magit-svn]] whenever necessary.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("<f7>" . magit-status)
  :config (progn
            (setq magit-push-always-verify nil
                  magit-last-seen-setup-instructions "2.1.0")
            ))

(use-package magit-svn
  :ensure t
  :config (progn
            (defun malb/magit-svn ()
              (if (file-exists-p (magit-git-dir "svn"))
                  (magit-svn-mode)))
            (add-hook 'magit-mode-hook #'malb/magit-svn)))
#+END_SRC

** [[https://github.com/sigma/magit-gh-pulls][Github pull requests]]

*Commands:*

- Press ~# g g~ to refresh the list of pull requests.
- Highlighting the desired PR and pressing ~# g f~ will fetch the commits associated with the PR.
- Press ~# g b~ on the PR to create a topic branch for this PR.
- Press ~# g m~ to merge the PR on top of the currently checked out branch.

#+BEGIN_SRC emacs-lisp
(require 'ert) ;; https://github.com/sigma/magit-gh-pulls/issues/32
(use-package magit-gh-pulls
  :ensure t)
#+END_SRC

*** TODO check if magit-gh-pulls can be enabled by default without causing delay

** [[https://github.com/pidu/git-timemachine#start-of-content][Git-timemachine]]

I don’t often use git-timemachine but when I do …

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t)
#+END_SRC

** [[https://github.com/rmuslimov/browse-at-remote][Browse on Github/Bitbucket]]

#+BEGIN_SRC emacs-lisp
  (use-package browse-at-remote
    :ensure t)
#+END_SRC

** [[https://github.com/magit/orgit][Org links to Magit buffers]]

#+BEGIN_SRC emacs-lisp
(use-package orgit
  :ensure t)
#+END_SRC

** [[https://github.com/defunkt/gist.el][Gist]]

To list gists, run ~gist-list~:

- =g= - reload the gist list from server
- =e= - edit current gist description
- =k= - delete current gist
- =+= - add a file to the current gist
- =–= - remove a file from the current gist

- =C-x C-s= - save a new version of the gist
- =C-x C-w= - rename some file

From a dired buffer, you can: =@= - make a gist out of marked files (with a prefix, make it private)

~gist-region-or-buffer~ - Post either the current region, or if mark is not set, the current buffer as a new paste at https://gist.github.com . Copies the URL into the kill ring. With a prefix argument, makes a private paste.

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :config (progn
            (setq gist-ask-for-description t)))
#+END_SRC

*** TODO Check out [[https://github.com/theanalyst/ix.el][ix]]
* Email

E-mail is fetched by [[http://isync.sourceforge.net/mbsync.html][mbsync]] and parsed by [[http://www.djcbsoftware.nl/code/mu/][mu]]. Then, we use [[http://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]].

- to use a bit of org-mode’s magic as well by pulling in [[http://orgmode.org/manual/Orgtbl-mode.html][orgtbl-mode]] and [[http://orgmode.org/manual/Orgstruct-mode.html][orgstruct++-mode]]
- also allow =format=flowed= ([[https://github.com/djcb/mu/issues/569][source]])
- render HTML e-mails in =eww= == =shr=
- use =<TAB>= to preview messages and =q= to close previews.

#+BEGIN_SRC emacs-lisp
(defun malb/compose-setup ()
  "Use hard newlines, so outgoing mails will have format=flowed."
  (use-hard-newlines t 'guess))

(defun malb/fill-column-72 ()
  (set-fill-column 72))

(use-package mu4e
  :commands mu4e-compose-mode-hook
  :config (progn
            (add-hook 'mu4e-compose-mode-hook #'malb/fill-column-72)
            (add-hook 'message-mode-hook #'flyspell-mode)
            (add-hook 'message-mode-hook #'turn-on-orgstruct)
            (add-hook 'message-mode-hook #'turn-on-orgstruct++)
            (add-hook 'message-mode-hook #'turn-on-orgtbl)
            (add-hook 'message-mode-hook #'typo-mode)
            (add-hook 'message-mode-hook #'olivetti-mode)

            (setq mu4e-maildir malb/mu4e-maildir
                  mu4e-drafts-folder "/[Google Mail]/.Drafts"
                  mu4e-sent-folder   "/[Google Mail]/.Sent Mail"
                  mu4e-trash-folder  "/[Google Mail]/.Bin")

            (setq mu4e-maildir-shortcuts
                  '(("/Inbox"                     . ?i)
                    ("/[Google Mail]/.Drafts"     . ?d)
                    ("/[Google Mail]/.Sent Mail"  . ?s)
                    ("/[Google Mail]/.Bin"        . ?t)))

            (setq mu4e-sent-messages-behavior 'delete ; don't save message, Gmail takes care of this
                  mu4e-headers-skip-duplicates t
                  mu4e-use-fancy-chars t
                  mu4e-view-show-images t
                  message-kill-buffer-on-exit t
                  mu4e-hide-index-messages t
                  mu4e-auto-retrieve-keys t
                  mu4e-compose-dont-reply-to-self t
                  mu4e-split-view 'horizontal
                  mu4e-headers-visible-columns 122
                  mu4e-headers-visible-lines 16)

            (add-to-list 'mu4e-bookmarks
                         '("mime:application/pdf"       "Messages with PDFs"     ?d) t)

            ;; use imagemagick, if available
            (when (fboundp 'imagemagick-register-types) (imagemagick-register-types))

            (defun malb/render-html-message ()
              (let ((dom (libxml-parse-html-region (point-min) (point-max))))
                (erase-buffer)
                (shr-insert-document dom)
                (goto-char (point-min))))

            (defun malb/preview-message ()
              (interactive)
              (mu4e-headers-view-message)
              (sleep-for 0.05) ;; this is a HACK
              (select-window (previous-window)))

            (require 'mu4e-view)
            (require 'mu4e-headers)

            ;; based on (mu4e-select-other-view)
            (defun malb/close-message-view ()
              (interactive)
              (let* ((other-buf mu4e~view-buffer)
                     (other-win (and other-buf (get-buffer-window other-buf))))
                (if (window-live-p other-win)
                    (progn
                      (select-window other-win)
                      (sleep-for 0.05)
                      (mu4e~view-quit-buffer))
                  (mu4e~headers-quit-buffer))
                ))

            (bind-key "<tab>" #'malb/preview-message mu4e-headers-mode-map)
            (bind-key "q" #'malb/close-message-view mu4e-headers-mode-map)
            (bind-key "z" #'malb/close-message-view mu4e-headers-mode-map)

            ;; allow for updating mail using 'U' in the main view:
            (setq mu4e-get-mail-command "mbsync googlemail-default"
                  mu4e-update-interval 1200
                  mu4e-html2text-command #'malb/render-html-message)

            (add-hook 'mu4e-view-mode-hook #'olivetti-mode)

            (add-to-list 'mu4e-view-actions
                         '("browser" . mu4e-action-view-in-browser) t)
            ;; PGP
            (setq mml2015-encrypt-to-self t)
            (define-key mu4e-compose-mode-map (kbd "C-c s") 'mml-secure-message-sign-pgpmime)
            (define-key mu4e-compose-mode-map (kbd "C-c e") 'mml-secure-message-encrypt-pgpmime)
            (add-hook 'message-send-hook #'mml-secure-message-sign-pgpmime)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package mu4e-maildirs-extension
  :ensure t
  :config (progn
            (setq mu4e-maildirs-extension-insert-before-str "\n ")
            (setq mu4e-maildirs-extension-custom-list malb/mu4e-maildirs-custom-list)
            (mu4e-maildirs-extension)))
#+END_SRC


** Org-mu4e

Link to mu4e messages and threads.

#+BEGIN_SRC emacs-lisp
(use-package org-mu4e)
#+END_SRC

** [[https://github.com/emacs-helm/helm-mu][Helm-mu]]

Use =helm-mu= as default search for mu4e.

#+BEGIN_SRC emacs-lisp
(use-package helm-mu
  :ensure t
  :config (progn
            (bind-key "s" #'helm-mu mu4e-main-mode-map)
            (bind-key "S" #'mu4e-headers-search mu4e-main-mode-map)))
#+END_SRC

* Programming (languages)
** General
*** REPL

We want to pick previous inputs based on prefix ([[https://emacs.stackexchange.com/questions/14072/replicate-ipython-history-behaviour-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(use-package comint
  :config (progn
            (dolist (key '("C-<up>" "M-<up>" "M-p"))
              (bind-key key #'comint-previous-matching-input-from-input comint-mode-map))
            (dolist (key '("C-<down>" "M-<down>" "M-n"))
              (bind-key key #'comint-next-matching-input-from-input comint-mode-map))
            (setq comint-scroll-to-bottom-on-input t  ; always insert at the bottom
                  comint-input-ignoredups t           ; no duplicates in command history
                  )))
#+END_SRC

**** [[https://github.com/ffevotte/isend-mode.el][isend]] (poor person’s REPL)

1. Open, say, *Sage*.

2. =M-x= ~isend-associate~ RET *Sage* RET

3. Hitting =C-RET= will send the current line to the interpreter. If a region is active, all lines spanned by the region will be sent (i.e. no line will be only partially sent).

#+BEGIN_SRC emacs-lisp
(use-package isend-mode
  :ensure t
  :config (progn
            ;; If you work with python scripts using iPython
            (add-hook 'isend-mode-hook #'isend-default-ipython-setup)))
#+END_SRC

*** Spell checking

Enable spell checking in comments and documentation.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

*** [[https://github.com/flycheck/flycheck][Flycheck]]

[[http://www.flycheck.org/images/screencast.gif]] ([[http://www.flycheck.org/images/screencast.gif][source]])


Use flycheck to run static checkers on code. We use clang’s checker for flycheck for which we can load per directory configuration using =.dir-locals.el=, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((flycheck-clang-include-path . ("/FULL/PATH/TO/DIR1" "/FULL/PATH/TO/DIR2" ) ))))
#+END_SRC

Make flycheck prettier based on what spacemacs does.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :commands global-flycheck-mode
  :config (progn
            (global-flycheck-mode)

            (bind-key "C-c f n" #'flycheck-next-error flycheck-mode-map)
            (bind-key "C-c f p" #'flycheck-previous-error flycheck-mode-map)

            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (setq flycheck-standard-error-navigation nil)

            (setq flycheck-mode-line
                  '(:eval
                    (pcase flycheck-last-status-change
                      (`not-checked nil)
                      (`no-checker (propertize " " ))
                      (`running (propertize " "))
                      (`errored (propertize " "))
                      (`finished
                       (let* ((error-counts (flycheck-count-errors flycheck-current-errors))
                              (no-errors (cdr (assq 'error error-counts)))
                              (no-warnings (cdr (assq 'warning error-counts))))
                         (propertize (format " [%s/%s]" (or no-errors 0) (or no-warnings 0)))))
                      (`interrupted " ")
                      (`suspicious '(propertize " ")))))

            (when (fboundp 'define-fringe-bitmap)
              (define-fringe-bitmap 'my-flycheck-fringe-indicator
                (vector #b00000000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00011000
                        #b01111110
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b01111110
                        #b00011000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00000000)))


            (flycheck-define-error-level 'error
              :overlay-category 'flycheck-error-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-error)

            (flycheck-define-error-level 'warning
              :overlay-category 'flycheck-warning-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-warning)

            (flycheck-define-error-level 'info
              :overlay-category 'flycheck-info-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-info)
            ))
#+END_SRC

Use [[https://github.com/yasuyk/helm-flycheck][helm-flycheck]] because reasons.

#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :ensure t
  :config (progn
            (bind-key "C-c f l" #'helm-flycheck flycheck-mode-map)))

#+END_SRC

Use [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to display hints about potential issues.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :ensure t
  :config (progn
            ;; flycheck errors on a tooltip (doesnt work on console)
            (when (display-graphic-p (selected-frame))
              (eval-after-load 'flycheck
                '(custom-set-variables
                  '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
              )
            ))
#+END_SRC

*** Comments

Comments, as I mean, using [[https://github.com/remyferre/comment-dwim-2][comment-dwim-2]].

#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :ensure t
  :bind ("M-;" . comment-dwim-2))
#+END_SRC

*** [[https://github.com/Bruce-Connor/aggressive-indent-mode][Aggressive indenting]]

[[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif]] ([[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif][source]])


Enable it on a per-project basis in order to keep RC check ins clean: use it in own projects but not necessarily in projects where not the main contributor. Use =.dir-locals.el= to enable it, e.g.:

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((aggressive-indent-mode t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
            (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
            (unbind-key "C-c C-q" aggressive-indent-mode-map))
  :diminish aggressive-indent-mode)
#+END_SRC

*** Trailing whitespace

[[https://github.com/lewang/ws-butler][ws-buttler]] for not leaving trailing white spaces without being that guy™.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :config (progn
            ;; adding it to prog-mode-hook causes problems for emacsclient
            (add-hook 'c-mode-common-hook #'ws-butler-mode)
            (add-hook 'python-mode-hook #'ws-butler-mode)
            (add-hook 'cython-mode-hook #'ws-butler-mode)
            (add-hook 'emacs-lisp-mode-hook #'ws-butler-mode)
            (add-hook 'org-mode-hook #'ws-butler-mode)
            ))
#+END_SRC

*** Highlight FIXME and friends

#+BEGIN_SRC emacs-lisp
(defun malb/fixme-highlight ()
  (font-lock-add-keywords nil
                          '(("\\<\\(FIXME\\|TODO\\|HACK\\)" 1
                             font-lock-warning-face t))))

(add-hook 'prog-mode-hook #'malb/fixme-highlight)
(add-hook 'python-mode-hook #'malb/fixme-highlight)
#+END_SRC

*** Which function

Show function in mode-line ([[https://github.com/howardabrams/dot-files/blob/master/emacs-mode-line.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package which-func
  :config (progn
            (which-function-mode 1)
            (setq which-func-unknown ""
                  which-func-maxout 1024
                  which-func-modes '(latex-mode
                                     markdown-mode
                                     c-mode
                                     emacs-lisp-mode
                                     org-mode
                                     c++-mode))

            (setq which-func-format
                  `(" "
                    (:propertize which-func-current local-map
                                 (keymap
                                  (mode-line keymap
                                             (mouse-3 . end-of-defun)
                                             (mouse-2 . narrow-to-defun)
                                             (mouse-1 . beginning-of-defun)))
                                 face which-func
                                 mouse-face mode-line-highlight
                                 help-echo "mouse-1: go to beginning\n\
mouse-2: toggle rest visibility\n\
mouse-3: go to end")
                    " "))
            ))
#+END_SRC

*** Line numbers

We only enable it in ~markdown-mode~ for now.

#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :ensure t
  :config (progn
            (add-hook 'markdown-mode-hook #'nlinum-mode)))
#+END_SRC

** C/C++ development
*** Semantic

Enable [[http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html][semantic]] for C and C++ (cf. =malb/inhibit-semantic-p=). Also enable some useful minor modes (documentation from =C-h v RET semantic-default-submodes=):

- ~global-semanticdb-minor-mode~  Maintain tag database.
- ~global-semantic-idle-scheduler-mode~ Reparse buffer when idle.
- ~global-semantic-idle-summary-mode~ Show summary of tag at point.
- ~global-semantic-idle-completions-mode~ Show completions when idle.
- ~global-semantic-decoration-mode~ Additional tag decorations.
- ~global-semantic-highlight-func-mode~ Highlight the current tag.
- ~global-semantic-mru-bookmark-mode~ Provide `switch-to-buffer'-like keybinding for tag names.
- ~global-semantic-idle-local-symbol-highlight-mode~ - Highlight references of the symbol under point.
- ~global-semantic-stickyfunc-mode~ - show the title of a tag in the header line.

#+BEGIN_SRC emacs-lisp
(use-package semantic
  :init (progn
          (use-package semantic/ia)
          (use-package semantic/bovine/gcc)

          (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
          (add-to-list 'semantic-default-submodes 'global-semantic-idle-local-symbol-highlight-mode)
          (semanticdb-enable-gnu-global-databases 'c-mode t)
          (semanticdb-enable-gnu-global-databases 'c++-mode t)
          (setq semanticdb-default-save-directory (expand-file-name "semantic" user-emacs-directory))

          (semantic-mode 1)
          (global-ede-mode t)
          (ede-enable-generic-projects)

          (defun malb/inhibit-semantic-p ()
            (not (member major-mode '(c-mode c++-mode))))

          (add-to-list 'semantic-inhibit-functions #'malb/inhibit-semantic-p)))
#+END_SRC

Grey out ~#if 0~ blocks.

#+BEGIN_SRC emacs-lisp
(defun malb/c-mode-font-lock-if0 (limit)
  (save-restriction
    (widen)
    (save-excursion
      (goto-char (point-min))
      (let ((depth 0) str start start-depth)
        (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
          (setq str (match-string 1))
          (if (string= str "if")
              (progn
                (setq depth (1+ depth))
                (when (and (null start) (looking-at "\\s-+0"))
                  (setq start (match-end 0)
                        start-depth depth)))
            (when (and start (= depth start-depth))
              (c-put-font-lock-face start (match-beginning 0) 'font-lock-comment-face)
              (setq start nil))
            (when (string= str "endif")
              (setq depth (1- depth)))))
        (when (and start (> depth 0))
          (c-put-font-lock-face start (point) 'font-lock-comment-face)))))
  nil)

(defun malb/c-mode-common-hook ()
  (font-lock-add-keywords  nil
                           '((malb/c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))
#+END_SRC

Highlight member functions in C/C++ ([[https://www.reddit.com/r/emacs/comments/27eqwm/highlighting_c_member_function_calls/][source]])

#+BEGIN_SRC emacs-lisp
(dolist (major-mode '(c-mode c++-mode))
  (font-lock-add-keywords major-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-function-name-face t))))
#+END_SRC


The default key bindings of semantic are a bit awkward, rebind them.

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config (progn
            (add-hook 'c-mode-common-hook #'malb/c-mode-common-hook)

            (bind-key "M-?"   #'semantic-analyze-proto-impl-toggle c-mode-base-map)
            (bind-key "M-."   #'semantic-ia-fast-jump c-mode-base-map)
            (bind-key "C-M-." #'semantic-complete-jump c-mode-base-map)
            (bind-key "M-r"   #'semantic-symref-symbol c-mode-base-map)
            (bind-key "M-,"   #'pop-global-mark c-mode-base-map)
            (bind-key "<home>"  #'malb/beginning-of-line-dwim c-mode-map)
            ))
#+END_SRC

**** Force semantic parsing

The following code parses a complete project with semantic. This is useful for exploring a new project. ([[https://stackoverflow.com/questions/18230838/semantic-cedet-how-to-force-parsing-of-source-files][source]])

#+BEGIN_SRC emacs-lisp
(defvar malb/c-files-regex ".*\\.\\(c\\|cpp\\|h\\|hpp\\)"
  "A regular expression to match any c/c++ related files under a directory")

(defun malb/semantic-parse-dir (root regex)
  "This function is an attempt of mine to force semantic to
     parse all source files under a root directory. Arguments:
     -- root: The full path to the root directory
     -- regex: A regular expression against which to match all files in the directory"
  (let (
        ;;make sure that root has a trailing slash and is a dir
        (root (file-name-as-directory root))
        (files (directory-files root t ))
        )
    ;; remove current dir and parent dir from list
    (setq files (delete (format "%s." root) files))
    (setq files (delete (format "%s.." root) files))
    (while files
      (setq file (pop files))
      (if (not(file-accessible-directory-p file))
          ;;if it's a file that matches the regex we seek
          (progn (when (string-match-p regex file)
                   (save-excursion
                     (semanticdb-file-table-object file))
                   ))
        ;;else if it's a directory
        (malb/semantic-parse-dir file regex)
        )
      )
    )
  )

(defun malb/semantic-parse-current-dir (regex)
  "Parses all files under the current directory matching regex"
  (malb/semantic-parse-dir (file-name-directory(buffer-file-name)) regex))

(defun malb/parse-curdir-c ()
  "Parses all the c/c++ related files under the current directory
     and inputs their data into semantic"
  (interactive)
  (malb/semantic-parse-current-dir malb/c-files-regex))

(defun malb/parse-dir-c (dir)
  "Prompts the user for a directory and parses all c/c++ related files
     under the directory"
  (interactive (list (read-directory-name "Provide the directory to search in:")))
  (malb/semantic-parse-dir (expand-file-name dir) malb/c-files-regex))
#+END_SRC

*** Doxygen skeletons

Insert Doxygen skeleton on =C-c M-d=. Adapted from [[https://github.com/abo-abo/function-args][function-args]]'s =moo-doxygen=.

#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
  :ensure t)

(defun malb/doxygen ()
  "Generate a doxygen yasnippet and expand it with `aya-expand'.
  The point should be on the top-level function name."
  (interactive)
  (move-beginning-of-line nil)
  (let ((tag (semantic-current-tag)))
    (unless (semantic-tag-of-class-p tag 'function)
      (error "Expected function, got %S" tag))
    (let* ((name (semantic-tag-name tag))
           (attrs (semantic-tag-attributes tag))
           (args (plist-get attrs :arguments))
           (ord 1))
      (setq aya-current
            (format
             "/**
    @brief $1

  %s
    @return $%d
  ,*/

  "
             (mapconcat
              (lambda (x) (format "  @param %-16s $%d" (car x) (incf ord)))
              args
              "\n")
             (incf ord)))
      (aya-expand))))

(bind-key "C-c M-d" #'malb/doxygen c-mode-base-map)
#+END_SRC

*** GDB

#+BEGIN_SRC emacs-lisp
(setq gdb-find-source-frame t
      gdb-many-windows t)
#+END_SRC

*** [[http://valgrind.org/][Valgrind]]

This code allows to run valgrind and step through warnings/errors. We set =--error-errorcode=1= because we bury compilation buffers that finish with exit code zero automatically. By default, valgrind returns the exit code of the program it runs. ([[https://github.com/codemac/config/blob/master/emacs.d/boot.org][source]])

#+BEGIN_SRC emacs-lisp
(require 'compile "compile")

(defgroup valgrind nil
  "Run valgrind as inferior of Emacs, parse error messages."
  :group 'tools
  :group 'processes)


(defcustom valgrind-command "valgrind --error-exitcode=1 --leak-check=full"
  "*Last shell command used to run valgrind; default for next valgrind run.

Sometimes it is useful for files to supply local values for this variable.
You might also use mode hooks to specify it in certain modes, like this:

    (add-hook 'c-mode-hook
       (lambda ()
         (unless (or (file-exists-p \"makefile\")
                     (file-exists-p \"Makefile\"))
           (set (make-local-variable 'valgrind-command)
                (concat \"make -k \"
                        (file-name-sans-extension buffer-file-name))))))"
  :type 'string
  :group 'valgrind)

;; History of compile commands.
(defvar valgrind-history nil)

(defun valgrind (command)
  "Run valgrind.
Runs COMMAND, a shell command, in a separate process asynchronously
with output going to the buffer `*valgrind*'.

You can then use the command \\[next-error] to find the next error message
and move to the source code that caused it."
  (interactive
   (if (or compilation-read-command current-prefix-arg)
       (list (read-from-minibuffer "Valgrind command: "
                                   (eval valgrind-command) nil nil
                                   '(valgrind-history . 1)))
     (list (eval valgrind-command))))
  (unless (equal command (eval valgrind-command))
    (setq valgrind-command command))
  (compilation-start command t))
#+END_SRC

** Python

We use the “onetwo” style to fill docstrings in Python, i.e.:

#+BEGIN_SRC python :tangle no
"""Process foo, return bar."""

"""
Process foo, return bar.

If processing fails throw ProcessingError.

"""
#+END_SRC

Drop Python ffap stuff because it interacts badly with ~helm-find-files~ ([[https://answers.launchpad.net/python-mode/+question/221144][source]])

#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure t
  :config (progn
            (setq-default python-indent 4
                          py-docstring-style 'SYMMETRIC)

            (defun malb/remove-python-ffap ()
              (setq ffap-alist (remove '(python-mode . py-ffap-module-path) ffap-alist))
              (setq ffap-alist (remove '(python-mode . py-module-path) ffap-alist))
              (setq ffap-alist (remove '(inferior-python-mode . py-ffap-module-path) ffap-alist))
              )

            (add-hook 'python-mode-hook #'malb/remove-python-ffap)
            ))
#+END_SRC

*** Highlight indentation

It makes sense to [[https://github.com/antonj/Highlight-Indentation-for-Emacs/][highlight indentation]] in Python.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :ensure t
  :config (progn
            (add-hook 'python-mode-hook #'highlight-indentation-mode)))
#+END_SRC

**** TODO highlight indentation can be slow for huge buffers

 For example, editing Sage’s arguably massive [[https://github.com/sagemath/sage/blob/master/src/sage/rings/polynomial/multi_polynomial_ideal.py][multi_polynomial_ideal.py]] can be very slow.

*** Autocompletion

Use [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] for auto-completion and stuff, it runs [[https://github.com/tkf/emacs-jedi][jedi]] for us. In particular it offers:

- ~M-.~ Goto definition for thing at point.
- ~M-,​~ Switch to buffer of most recent marker.
- ~M-?~ Show documentation for context at point.
- ~M-r~ Show usage for thing at point.

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :diminish anaconda-mode
  :config (progn
            (bind-key "M-," #'anaconda-nav-pop-marker anaconda-mode-map)

            (add-hook 'python-mode-hook #'anaconda-mode)
            (add-hook 'python-mode-hook #'eldoc-mode)))
#+END_SRC

*** Docstrings
**** [[https://github.com/glyph/python-docstring-mode][Python docstring mode]]

Python docstring mode provides syntax highlighting for docstrings in both ReStructuredText and Epydoc formats, as well as an override for the fill-paragraph function when editing such a docstring that will wrap things according to Python community convention.

Manually fixed bugs:

- [[https://github.com/glyph/python-docstring-mode/issues/9][Problems locating `docstring_wrap.py` #9]]
- [[https://github.com/glyph/python-docstring-mode/issues/6][Using python-docstring- prefix consistently is not done yet? #6]]

#+BEGIN_SRC emacs-lisp
(use-package python-docstring
  :ensure t
  :config (progn
            (add-hook 'python-mode-hook #'python-docstring-mode)))
#+END_SRC

**** COMMENT MMM mode for ReST in Python

Disabled for now in favour of ~python-docstring-mode~.

#+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :ensure t
  :init (progn
          (setq mmm-global-mode nil))   ; mmm mode can be slow, so we don't enable it by default
  :config  (progn (mmm-add-classes
                   '((python-rst
                      :submode rst-mode
                      :front "^ *[ru]?\"\"\"[^\"]*$"
                      :back "^ *\"\"\""
                      :include-front t
                      :include-back t
                      :end-not-begin t)))
                  (mmm-add-mode-ext-class 'python-mode nil 'python-rst)
                  (mmm-add-mode-ext-class 'sage-shell:sage-mode nil 'python-rst)
                  ))
#+END_SRC

**** [[https://github.com/naiquevin/sphinx-doc.el][Sphinx-doc]]

An emacs minor mode for inserting docstring skeleton for Python functions and methods (=C-c M-d=). The structure of the docstring is as per the requirement of the Sphinx documentation generator.

#+BEGIN_SRC emacs-lisp
(use-package sphinx-doc
  :ensure t
  :diminish sphinx-doc-mode
  :config (progn
            (add-hook 'python-mode-hook #'sphinx-doc-mode)))
#+END_SRC

*** Cython

#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :ensure t
  :mode (("\\.pyx\\'"  . cython-mode)
         ("\\.spyx\\'" . cython-mode)
         ("\\.pxd\\'"  . cython-mode)
         ("\\.pxi\\'"  . cython-mode)))
#+END_SRC

*** Sage

Enable [[https://github.com/stakemori/sage-shell-mode][sage-shell-mode]] for running [[http://sagemath.org][Sage]] from within Emacs. It’s available on MELPA and hence easier to keep around when we switch Sage installs all the time. To edit a file in sage-shell-mode put ~# -*- mode: sage-shell:sage -*-~ on top. However, we usually don’t do that but use python-mode directly. For this, our setup is as follows.

In =.emacs.d= create a directory =sage-python/bin= which contains a file called =python= with the following content:

#+BEGIN_SRC bash
#!/bin/bash
sage -python "$@"
#+END_SRC

Then, in each project where we want to use Sage, we can add a =.dir-locals.el= file at the top level with

#+BEGIN_SRC emacs-lisp  :tangle no
((python-mode . ((python-shell-virtualenv-path . (concat user-emacs-directory "sage-devel-python")))))
#+END_SRC

which will tell ~anaconda-mode~ to run Sage’s python process instead of the system-wide one.

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config (progn
            (setq ac-delay 0.3
                  ac-auto-start 2)))

(use-package auto-complete-sage
  :ensure t)

(use-package sage-shell-mode
  :ensure t
  :config (progn
            (eval-after-load "auto-complete"
              '(setq ac-modes (append '(sage-shell-mode sage-shell:sage-mode) ac-modes)))
            (add-hook 'sage-shell:sage-mode-hook #'ac-sage-setup)
            (add-hook 'sage-shell:sage-mode-hook #'auto-complete-mode)
            (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)
            (add-hook 'sage-shell-mode-hook #'ac-sage-setup)
            (add-hook 'sage-shell-mode-hook #'auto-complete-mode)
            (add-hook 'sage-shell-mode-hook #'eldoc-mode)

            (setq sage-shell:input-history-cache-file (concat user-emacs-directory ".sage_shell_input_history")
                  sage-shell:sage-executable malb/sage-executable
                  ac-sage-show-quick-help t)

            (bind-key "C-<up>" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "C-<down>" #'comint-next-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-p" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-n" #'comint-next-matching-input-from-input sage-shell-mode-map)
            ))
#+END_SRC

*** [[https://github.com/tkf/emacs-ipython-notebook][iPython Notebook]]

An interface from Emacs to iPython.

[[https://github.com/tkf/emacs-ipython-notebook/raw/data/screenshots/zenburn_plots.png]] ([[https://github.com/tkf/emacs-ipython-notebook/raw/data/screenshots/zenburn_plots.png][source]])

On our system port 8888 is already taken.

#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  :config (progn
            (setq ein:use-auto-complete t
                  ein:default-url-or-port 8889)
            (add-hook 'ein:notebook-multilang-mode-hook #'auto-complete-mode)))
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :ensure t
  :diminish elisp-slime-nav-mode
  :config (progn

            (defun malb/elisp-hook ()
              (elisp-slime-nav-mode)
              (smartparens-strict-mode)
              (eldoc-mode))

            (setq eldoc-idle-delay 0.3)

            (add-hook 'emacs-lisp-mode-hook #'malb/elisp-hook)
            (add-hook 'lisp-interaction-mode-hook #'malb/elisp-hook)
            (add-hook 'ielm-mode-hook #'malb/elisp-hook)

            (bind-key "M-?" #'elisp-slime-nav-describe-elisp-thing-at-point
                      emacs-lisp-mode-map)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-z" #'ielm emacs-lisp-mode-map)
#+END_SRC

** Clojure

([[https://github.com/howardabrams/dot-files/blob/master/emacs-clojure.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config (progn
            (add-hook 'clojure-mode-hook #'eldoc-mode)
            (add-hook 'clojure-mode-hook #'smartparens-strict-mode)))
#+END_SRC

*** CIDER

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :config (progn
            (setq cider-repl-use-clojure-font-lock t
                  nrepl-hide-special-buffers t
                  cider-popup-stacktraces nil)
            (add-hook 'cider-mode-hook #'cider-turn-on-eldoc-mode)
            (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)))
#+END_SRC

*** Org-Mode

Enable CIDER in org-mode.

#+BEGIN_SRC emacs-lisp
(use-package ob-clojure
  :config (setq org-babel-clojure-backend 'cider))
#+END_SRC

*** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck-clojure
   :ensure t)
#+END_SRC

*** TODO check out [[https://github.com/losingkeys/4clojure.el][4clojure]] for learning Clojure

** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package json-mode
    :ensure t)
#+END_SRC

* Editing
** [[https://github.com/rejeep/drag-stuff.el][Dragging lines around]]

#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish drag-stuff-mode
    :bind (("M-<up>" . drag-stuff-up)
           ("M-<down>" . drag-stuff-down)))
#+END_SRC

** [[http://www.dr-qubit.org/undo-tree/undo-tree.el][Visualise the undo tree]]

*Tip:* Did you know that Emacs has undo in a region?

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config (progn
            (global-undo-tree-mode)
            (setq undo-tree-visualizer-timestamps t)
            (setq undo-tree-visualizer-diff t))
  )
#+END_SRC

** [[https://github.com/k-talo/volatile-highlights.el][Highlight last edits]]

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :commands volatile-highlights-mode
    :config (volatile-highlights-mode t)
    :diminish volatile-highlights-mode)
#+END_SRC

** [#A] Zap up to char

Kill everything up to character, e.g. if we have “Lorem| ipsum” typing ~M-z u~ would leave us with “Lorem|um”.

#+BEGIN_SRC emacs-lisp
(use-package avy-zap
  :ensure t
  :bind ("M-z" . avy-zap-up-to-char-dwim))
#+END_SRC

** Reverting buffers

Automatically revert buffers.

#+BEGIN_SRC emacs-lisp
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)

(global-auto-revert-mode 1)
#+END_SRC

** [[https://github.com/Vifon/focus-autosave-mode.el][Save buffer when loosing focus]]

This can be dangerous, so only enable on per project basis, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((markdown-mode . ((eval . (focus-autosave-local-mode 1)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package focus-autosave-mode
  :ensure t
  :config (progn
            (diminish 'focus-autosave-local-mode " ♻")))
#+END_SRC

** Regexp

Use [[https://github.com/benma/visual-regexp.el][visual-regexp]] for visual regular expressions and use [[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] for modern regexps. This makes Emacs regexp actually usable for me.

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp-steroids
  :ensure t)

(use-package visual-regexp
  :ensure t
  :bind (("C-c m" . vr/mc-mark)
         ("C-M-%" . vr/query-replace)
         ("M-%" . vr/query-replace)
         ("C-M-s" . vr/isearch-forward)
         ("C-M-r" . vr/isearch-backward)))
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]

[[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif]] ([[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif?zoom=2&w=620][source]])

Also see [[http://emacsrocks.com/e13.html][Emacs Rocks #13]], which is on ~multiple-cursors~.

*Tip:* When you have multiple active cursors, if you hit =C-' = it will hide lines that don't have an active cursor.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-*" . mc/mark-all-like-this-dwim))
  :config (progn
            (defun malb/mc-typo-mode ()
              (add-to-list 'mc/unsupported-minor-modes 'typo-mode))
            (add-hook 'multiple-cursors-mode-hook #'malb/mc-typo-mode))
  )
#+END_SRC

** [#A] Selecting
*** [#A] Recursively narrow

#+BEGIN_SRC emacs-lisp
(use-package recursive-narrow
  :ensure t
  :config (progn
            (defun malb/recursive-narrow-dwim-org ()
              (if (derived-mode-p 'org-mode)
                  (cond ((or (org-at-block-p) (org-in-src-block-p)) (org-narrow-to-block))
                        (t (org-narrow-to-subtree))))
              )
            (add-hook 'recursive-narrow-dwim-functions 'malb/recursive-narrow-dwim-org))
  :bind
  (("C-x n w" . recursive-widen)
   ("C-x n n" . recursive-narrow-or-widen-dwim)))
#+END_SRC

*** [[https://github.com/magnars/expand-region.el][Expand-region]]

See [[http://emacsrocks.com/e09.html][Emacs Rocks #9]] for an intro to ~expand-region~.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-`" . er/expand-region))
#+END_SRC
* Prose
** General
*** Tab completion

Use less tab completion in prose. ([[http://endlessparentheses.com/tab-completion-for-prose.html][souce]])

#+BEGIN_SRC emacs-lisp
(defun malb/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 3)
  (setq-local company-idle-delay 0.5))

(add-hook 'text-mode-hook #'malb/config-prose-completion)
#+END_SRC

*** Line wrapping

Put everything back on one line and use ~visual-line-mode~ to do the work of wrapping text for us. ([[http://www.emacswiki.org/emacs/UnfillParagraph][source]])

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'turn-on-visual-line-mode)
(diminish 'visual-line-mode)

(defun malb/unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn
                 (barf-if-buffer-read-only)
                 (list t)))
  (let ((fill-column (point-max)))
    (fill-paragraph nil region)))

(bind-key "M-Q" 'malb/unfill-paragraph)
#+END_SRC

Indent correctly in ~visual-line-mode~ (~org-mode~ has its own thing).

#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :ensure t
  :config (progn
            (add-hook 'markdown-mode-hook #'adaptive-wrap-prefix-mode)
            (add-hook 'LaTeX-mode-hook #'adaptive-wrap-prefix-mode)
            ))
#+END_SRC

For hard wraps, allow for a bit more characters per line.

#+BEGIN_SRC emacs-lisp
(setq fill-column 100)
#+END_SRC

*** Typography

[[https://github.com/jorgenschaefer/typoel][typo]] is a minor mode that will change a number of normal keys to make them insert typographically useful unicode characters. Some of those keys can be used repeatedly to cycle through variations. This includes in particular quotation marks and dashes.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :ensure t
  :diminish typo-mode
  :config (progn
            (setq-default  typo-language "English")
            (add-hook 'markdown-mode-hook #'typo-mode)
            (add-hook 'org-mode-hook #'typo-mode)
            (add-hook 'rst-mode-hook #'typo-mode)))
#+END_SRC

Replace ~’~ with ~​'​~ before sending it to ispell ([[http://endlessparentheses.com/ispell-and-apostrophes.html][source]])

*Note:* Below, we adapt "en_GB" (our default) instead of =nil= (the global default) because otherwise we [[http://endlessparentheses.com/ispell-and-apostrophes.html#comment-2258586606][can’t change dictionaries]].

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :config (progn
            (setq ispell-dictionary "en_GB")

            ;; Tell ispell.el that ’ can be part of a word. ;
            (setq ispell-local-dictionary-alist
                  '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]"
                     "['\x2019]" nil ("-d" "en_GB") nil utf-8)))

            ;; Don't send ’ to the subprocess.
            (defun malb/replace-apostrophe (args)
              (cons (replace-regexp-in-string
                     "’" "'" (car args))
                    (cdr args)))

            (advice-add #'ispell-send-string :filter-args #'malb/replace-apostrophe)

            ;; Convert ' back to ’ from the subprocess.
            (defun malb/replace-quote (args)
              (if (not (or (derived-mode-p 'org-mode)
                           (derived-mode-p 'markdown-mode)
                           (derived-mode-p 'rst-mode)))
                  args
                (cons (replace-regexp-in-string
                       "'" "’" (car args))
                      (cdr args))))

            (advice-add #'ispell-parse-output :filter-args #'malb/replace-quote)))
#+END_SRC

*** Olivetti

Adapt text width to nice to read/edit width.

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure t
  :bind (("C-M-S-<right>" . olivetti-expand)
         ("C-M-S-<left>" . olivetti-shrink))
  :config (progn
            (setq-default olivetti-body-width 90)))
#+END_SRC

*** Sentences

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
(bind-key "C-x C-t" #'transpose-sentences)
#+END_SRC

We [[http://bug-gnu-emacs.gnu.narkive.com/SOVjcGqY/kill-sentence-trailing-whitespace-intentions][also delete trailing whitespaces]] when we delete a sentence.

#+BEGIN_SRC emacs-lisp
  (defadvice kill-sentence (after delete-horizontal-space activate)
    "Delete trailing spaces and tabs as well."
    (delete-horizontal-space))
#+END_SRC

*** [#A] Highlighting sentences & paragraphs

Use [[https://github.com/milkypostman/hl-sentence][hl-sentence-mode]] in ~markdown-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package hl-sentence
    :ensure t
    :config (add-hook 'markdown-mode-hook #'hl-sentence-mode))
#+END_SRC

Also use [[https://github.com/larstvei/Focus][focus-mode]] occationally.

#+BEGIN_SRC emacs-lisp
  (use-package focus
    :ensure t)
#+END_SRC

*** Spell Checking

Use [[https://github.com/cute-jumper/ace-flyspell][ace-flyspell]] for fixing typos. I find myself pressing =C-.= in other programs these days just to be frustrated that it doesn’t just work™

#+BEGIN_SRC emacs-lisp
(use-package ace-flyspell
  :ensure t
  :bind ("C-." . ace-flyspell-dwim)
  :init (progn
          (eval-after-load "flyspell"
            '(bind-key  "C-." #'ace-flyspell-dwim flyspell-mode-map)))
  )
#+END_SRC

Diminish ~flyspell-mode~ as we always use it.

#+BEGIN_SRC emacs-lisp
(eval-after-load "flyspell"
  '(diminish 'flyspell-mode))
#+END_SRC

**** Abbreviations

([[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-45][source]])

#+NAME: abbrev
| Base | Expansion                             |
|------+---------------------------------------|
| bc   | because                               |
| wo   | without                               |
| qm   | martinralbrecht@googlemail.com        |
| qb   | https://martinralbrecht.wordpress.com |

#+BEGIN_SRC emacs-lisp :var data=abbrev
(mapc (lambda (x) (define-global-abbrev (car x) (cadr x))) (cddr data))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
(diminish 'abbrev-mode)
#+END_SRC

*** Grammar check

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :ensure t
  :config (progn
            (setq langtool-language-tool-jar (expand-file-name "languagetool-commandline.jar"
                                                               (concat user-emacs-directory "langtool"))
                  langtool-default-language "en-GB")
            (bind-key "C-x 4 w" #'langtool-check)
            (bind-key "C-x 4 W" #'langtool-check-done)
            (bind-key "C-x 4 l" #'langtool-switch-default-language)
            (bind-key "C-x 4 4" #'langtool-show-message-at-point)
            (bind-key "C-x 4 c" #'langtool-correct-buffer)
            )
  )
#+END_SRC

*** [#A] Dictionary

Use [[http://oremacs.com/2015/05/22/define-word/][define-word]] to get a quick reference on a word.

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :bind (("C-c d" . define-word-at-point)
         ("C-c D" . define-word)
         ))
#+END_SRC

*** [#A] Translating

#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :ensure t
  :bind ("C-c t" . google-translate-smooth-translate)
  :config (progn
            (setq google-translate-translation-directions-alist
                  '(("de" . "en") ("en" . "de") ("de" . "fr") ("fr" . "de")))))
#+END_SRC

** Notes ([[http://jblevins.org/projects/deft/][deft]])

[[http://jblevins.org/projects/deft/deft-v0.6.gif]] ([[http://jblevins.org/projects/deft/deft-v0.6.gif][source]])


#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . deft)
  :config (progn
            (setq deft-extensions '("org" "md")
                  deft-directory (expand-file-name "deft" malb/sync-dir)
                  deft-text-mode 'org-mode
                  deft-use-filename-as-title nil
                  deft-auto-save-interval 5.0
                  deft-use-filter-string-for-filename t
                  deft-current-sort-method 'title
                  deft-file-naming-rules '((noslash . "-")
                                           (nospace . "-")
                                           (case-fn . downcase))
                  )
            (add-hook 'deft-mode-hook #'hl-line-mode)))
#+END_SRC

** [[http://jblevins.org/projects/markdown-mode/][Markdown]]

Standard setup and also a quick preview ([[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-markdown.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.text\\'" . markdown-mode)
         ("\\.txt\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode)
         )
  :config (progn
            (defvar malb/markdown.css
              (expand-file-name "themes/foghorn.css" user-emacs-directory))

            (setq markdown-command (concat "pandoc --smart -s -f markdown -t html -c" malb/markdown.css)
                  markdown-css-paths (list malb/markdown.css)
                  markdown-enable-math t)

            (defun malb/markdown-preview-buffer ()
              (interactive)
              (require 'shr)
              (let* ((buf-this (buffer-name (current-buffer)))
                     (buf-html (get-buffer-create
                                (format "*md-html (%s)*" buf-this))))
                (markdown-other-window (buffer-name buf-html))
                (shr-render-buffer buf-html)
                (kill-buffer buf-html)))

            (bind-key "M-." #'markdown-jump markdown-mode-map)
            (bind-key "C-c C-e o" #'malb/markdown-preview-buffer markdown-mode-map) ;; inspired by org-mode-export
            (add-hook 'markdown-mode-hook #'flyspell-mode)))
#+END_SRC

*** Pandoc

Use [[https://joostkremers.github.io/pandoc-mode/][pandoc-mode]] to call [[http://johnmacfarlane.net/pandoc/][pandoc]] for converting markdown to everything else.

#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :ensure t
  :config (progn
            (add-hook 'markdown-mode-hook #'pandoc-mode)
            (add-hook 'org-mode-hook #'conditionally-turn-on-pandoc)
            (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings)
            (delight 'pandoc-mode
                     '(:eval (concat " ▣[" (pandoc--get 'write) "]")))
            ))
#+END_SRC

** ReST

Python’s distutils [[http://bugs.python.org/issue11913][mandate]] =README.txt= or =README= in ReST. Hence, we add =README.txt= as the kind of file which wants ReST and use [[http://docutils.sourceforge.net/docs/user/emacs.html][rst-mode]] to edit it.

#+BEGIN_SRC emacs-lisp
  (use-package rst-mode
    :commands rst-mode-hook
    :mode "README\\.txt")
#+END_SRC

** AUCTeX

Force a parse of the BibTeX database ([[http://stackoverflow.com/questions/9682592/setting-up-reftex-tab-completion-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/get-bibtex-keys (file)
  (with-current-buffer (find-file-noselect file)
    (mapcar #'car (bibtex-parse-keys))))

(defun malb/latex-parse-bibtex ()
  (interactive)
  (mapc 'LaTeX-add-bibitems
        (apply 'append
               (mapcar #'malb/get-bibtex-keys (reftex-get-bibfile-list)))))
#+END_SRC

*Tip*: Forward search with ~C-c C-g~.

#+BEGIN_SRC emacs-lisp
(use-package tex
  :commands LaTeX-mode-hook
  :ensure auctex
  :defer t
  :config (progn
            (add-hook 'LaTeX-mode-hook #'visual-line-mode)
            (add-hook 'LaTeX-mode-hook #'flyspell-mode)
            (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
            (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
            (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)

            (setq TeX-view-program-list '(("Okular" "okular --unique %o#src:%n%b")
                                          ("Emacs" "emacsclient -n -e '(find-file-other-window \"%o\")'")))
            (setq TeX-view-program-selection '(((output-dvi style-pstricks) "dvips and gv")
                                               (output-dvi "Okular")
                                               (output-pdf "Emacs")
                                               (output-html "xdg-open")))

            (defun malb/latex-add-environments ()
              (LaTeX-add-environments
               '("lemma" LaTeX-env-label)
               '("theorem" LaTeX-env-label)))

            (add-hook 'LaTeX-mode-hook #'malb/latex-add-environments)

            (bind-key "C-<tab>" #'TeX-fold-dwim LaTeX-mode-map)

            (setq TeX-auto-save t)
            (setq TeX-parse-self t)
            (setq-default TeX-master nil)
            (setq reftex-plug-into-AUCTeX t)
            (setq TeX-PDF-mode t)
            (setq TeX-source-correlate-mode 1)
            (setq TeX-save-query nil)
            (setq-default TeX-auto-local (expand-file-name "auctex-auto" user-emacs-directory))

            (add-to-list 'LaTeX-verbatim-environments "lstlisting")))
#+END_SRC

*** [[https://github.com/tmalsburg/helm-bibtex/][Helm-bibtex]]

[[https://github.com/tmalsburg/helm-bibtex/raw/master/screenshot.png]] ([[https://github.com/tmalsburg/helm-bibtex/][source]])

My standard BibTeX sources are

- =crypto_crossref.bib= and =abbrev3.bib= are from [[http://cryptobib.di.ens.fr/][crypto.bib]] which has most references relevant to crypto,
- =jacm.bib= is for the Journal of the ACM provided by the [[http://ftp.math.utah.edu/pub/tex/bib/jacm.html][University of Utah]],
- =rfc.bib= is for RFCs and provided by [[http://tm.uka.de/~bless/bibrfcindex.html][Roland Bless]].

These are stored in some =common-latex= folder which has my [[https://bitbucket.org/malb/paper-template][paper-template]] as a subfolder.

#+BEGIN_SRC emacs-lisp
(defvar malb/common-latex (concat (file-name-as-directory malb/projects-dir) "common-latex"))
(defvar malb/crypto-bib (concat (file-name-as-directory
                                 (concat
                                  (file-name-as-directory malb/common-latex) "paper-template")) "cryptobib"))

(use-package helm-bibtex
  :ensure t
  :config (progn
            (setq helm-bibtex-bibliography (list (expand-file-name "crypto_crossref.bib" malb/crypto-bib)
                                                 (expand-file-name "abbrev3.bib" malb/crypto-bib)
                                                 (expand-file-name "rfc.bib" malb/common-latex)
                                                 (expand-file-name "jacm.bib" malb/common-latex))
                  helm-bibtex-library-path malb/literature-dir
                  helm-bibtex-notes-path malb/literature-notes-dir)

            (defun helm-bibtex-find-pdf (key)
              "Searches in all directories in `helm-bibtex-library-path' for a PDF whose name is KEY + \".pdf\".  Returns the first matching PDF."
              (-first 'f-exists?
                      (--map (f-join it (s-concat (s-replace ":" "_" key) ".pdf"))
                             (-flatten (list helm-bibtex-library-path)))))

            (helm-delete-action-from-source "Insert BibTeX key" helm-source-bibtex)
            (helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-key helm-source-bibtex 0)
            ))
#+END_SRC

*** [[https://github.com/politza/pdf-tools][Pdf tools]]

A reasonable PDF viewer for Emacs

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :init (progn
          (add-hook 'pdf-view-mode-hook 'auto-revert-mode))
  :config (progn
            (pdf-tools-install)
            (setq-default pdf-view-display-size 'fit-page)))
#+END_SRC

We make ~scroll-other-window~ work for PDF tools ([[https://github.com/politza/pdf-tools/issues/55][source]])

#+BEGIN_SRC emacs-lisp
(defvar malb/scroll-functions
  '(("default" :down scroll-down :up scroll-up)
    (pdf-view-mode :down pdf-view-scroll-down-or-previous-page :up pdf-view-scroll-up-or-next-page)
    (help-mode :down Info-scroll-down :up Info-scroll-up)
    )
  "The functions that should be used when scrolling other windows of a particular buffer type.
If buffer type is not included, 'default' will be used. Used by malb/smart-other-scroll")

(defun malb/smart-other-scroll (dir)
  "Scroll the other window with appropriate function; `dir' should be :up or :down "
  (interactive)
  (let* ((other-buffer-mode (with-current-buffer (window-buffer (other-window-for-scrolling)) major-mode))
	 (fun (or (plist-get (cdr (assoc other-buffer-mode malb/scroll-functions)) dir)
		  (plist-get (cdr (assoc "default" malb/scroll-functions)) dir))))
    (if fun
	(with-selected-window (other-window-for-scrolling)
	  (call-interactively fun))
      )))

(defun malb/other-scroll-up ()
  "use `malb/smart-other-scroll' :up"
  (interactive) (malb/smart-other-scroll :up))

(defun malb/other-scroll-down ()
  "use `malb/smart-other-scroll' :down"
  (interactive) (malb/smart-other-scroll :down))

(define-key global-map (kbd "C-M-v") 'malb/other-scroll-up)
(define-key global-map (kbd "C-M-S-v") 'malb/other-scroll-down)
#+END_SRC

*** [[https://github.com/jsinglet/latex-preview-pane][LaTeX preview pane]]

#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :diminish latex-preview-pane-mode
  :ensure t)
#+END_SRC

*** Setup everything

Setup everything for LaTeX (this can be slow, hence we call it manually)

#+BEGIN_SRC emacs-lisp
(defun malb/latex-init ()
  (interactive)
  (ignore-errors
    (malb/latex-parse-bibtex))          ; don't die if there's no bibtex file
  (olivetti-mode 1)
  (latex-preview-pane-mode 1))
#+END_SRC

* Dired

=dired-listing-switches= explained:

- =l=: Is the only mandatory one.
- =a=: Means to list invisible files.
- =G=: Don't show group information.
- =h=: Human readable sizes, such as M for mebibytes.
- =1v=: Affects the sorting of digits, hopefully in a positive way.
- =--group-directories-first=: self-explanatory

Note, you can use =dired-toggle-read-only= (=C-x C-q=) to make a Dired buffer editable to batch-rename.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config (progn
            (setq dired-listing-switches "-laGh1v --group-directories-first")

            (defvar malb/unimportant-files
              (mapconcat 'identity '("\\.idx" "\\.run\\.xml$" "\\.bcf$" ".blg$"
                                     "-blx.bib$" "\\.snm$"
                                     "\\.synctex\\.gz$" "\\.tex\\.backup$" "\\.bib\\.backup$"
                                     "\\.fdb_latexmk$" "\\.fls$"
                                     "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|out\\|nav\\|orig\\|rej\\|toc\\|vrb\\|pyg\\)\\)\\'")
                         "\\|"))

            (push ".brf" dired-latex-unclean-extensions)
            (push ".bmt" dired-latex-unclean-extensions)
            (push ".out" dired-latex-unclean-extensions)
            (push ".nav" dired-latex-unclean-extensions)
            (push ".snm" dired-latex-unclean-extensions)
            (push ".vrb" dired-latex-unclean-extensions)

            (setq dired-garbage-files-regexp malb/unimportant-files)
            (setq dired-omit-files malb/unimportant-files)

            (setq dired-recursive-copies 'always)
            (setq dired-recursive-deletes 'always)
            (setq dired-dwim-target t)

            ;; For the few times I’m using Dired, I prefer it not spawning an endless amount of
            ;; buffers. In fact, I’d prefer it using one buffer unless another one is explicitly
            ;; created, but you can’t have everything.
            ;; https://github.com/wasamasa/dotemacs/blob/master/init.org

            (bind-key "RET" #'dired-find-alternate-file dired-mode-map)

            (put 'dired-find-alternate-file 'disabled nil)

            (bind-key "F" 'find-name-dired dired-mode-map)
            (bind-key "M-o" 'dired-omit-mode dired-mode-map)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package dired-x)
#+END_SRC

** [[https://github.com/ralesi/ranger][Ranger]]

[[https://github.com/ralesi/ranger.el/raw/master/screenshots/hello-ranger.gif]] ([[https://github.com/ralesi/ranger.el/raw/master/screenshots/hello-ranger.gif][source]])

*Commands*

| =C-p=    | toggle ranger in dired buffer               |
| =j=      | navigate down                               |
| =k=      | navigate up                                 |
| =C-j=    | scroll preview window down                  |
| =C-k=    | scroll preview window up                    |
| =f=      | search for file names                       |
| =i=      | show preview of current file                |
| =H=      | search through history                      |
| =zi=     | toggle showing literal / full-text previews |
| =zh=     | toggle showing dotfiles                     |
| =o=      | sort options                                |
| =h=      | go up directory                             |
| =1/ RET= | find file / enter directory                 |
| =q=      | quit                                        |
| =r=      | revert buffer                               |
| =z-=     | reduce number of parents                    |
| =z+=     | increment number of parents                 |
| =v=      | toggle all marks                            |
| =V=      | visually select lines                       |
| =S=      | enter shell                                 |
| =C-SPC=  | mark current file                           |

#+BEGIN_SRC emacs-lisp
(use-package ranger
  :ensure t
  :config (progn
            (setq ranger-cleanup-on-disable t
                  ranger-cleanup-eagerly t)))
#+END_SRC

* Diff

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config (progn
            (setq ediff-window-setup-function 'ediff-setup-windows-plain
                  ediff-split-window-function 'split-window-horizontally
                  ediff-diff-options "-w")
            ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq diff-switches "-u")
#+END_SRC

* EShell

Open eshell at point and clean up when closing with =q= ([[http://www.howardism.org/Technical/Emacs/eshell-fun.html][source]]) and other stuff ([[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][source]])


#+BEGIN_SRC emacs-lisp
(use-package eshell
  :config (progn
            (defun malb/eshell-here ()
              "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
              (interactive)
              (let* ((parent (if (buffer-file-name)
                                 (file-name-directory (buffer-file-name))
                               default-directory))
                     (height (/ (window-total-height) 3))
                     (name   (car (last (split-string parent "/" t)))))
                (split-window-vertically (- height))
                (other-window 1)
                (eshell "new")
                (rename-buffer (concat "*eshell: " name "*"))
                (insert (concat "ls"))
                (eshell-send-input)))

            (bind-key "C-!" #'malb/eshell-here)
            (bind-key "M-l" #'helm-eshell-history eshell-mode-map)
            ;; https://github.com/bbatsov/emacs-dev-kit/blob/master/eshell-config.el
            (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
                      '(lambda ()
                         (bind-key "<home>" #'eshell-bol eshell-mode-map)))


            (setenv "PAGER" "cat") ;; https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
            (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))

            (defun malb/eshell-add-visual-commands ()
              (add-to-list 'eshell-visual-commands "htop"))

            (add-hook 'eshell-mode-hook #'malb/eshell-add-visual-commands)

            ;; mapped to 'q' in eshell
            (defun eshell/q ()
              (delete-window)
              (eshell/exit))

            (defun malb/config-eshell-completion ()
              "Don't do idle complete in eshell"
              (setq-local company-idle-delay nil)
              (bind-key "<tab>" #'company-complete eshell-mode-map))

            (add-hook 'eshell-mode-hook #'malb/config-eshell-completion)

            (setq eshell-scroll-to-bottom-on-input t)
            ))
#+END_SRC

* Diagrams
** [[http://plantuml.com/][PlantUML]]

#+BEGIN_SRC emacs-lisp
(use-package puml-mode
  :ensure t
  :init (progn
            (setq puml-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")))
#+END_SRC

*Example*

#+BEGIN_SRC plantuml :file foo.svg :tangle no
skinparam monochrome true
skinparam dpi 150
skinparam backgroundColor transparent
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam handwritten true

title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+END_SRC

- [[http://plantuml.com/latex.html][TikZ export]]
- See also https://github.com/josteink/wsd-mode for https://www.websequencediagrams.com/

* SX

[[https://github.com/vermiculus/sx.el/][Stack Exchange for Emacs]]

[[https://github.com/vermiculus/sx.el/raw/master/list-and-question.png]] ([[https://github.com/vermiculus/sx.el/raw/master/list-and-question.png][source]])

#+BEGIN_SRC emacs-lisp
  (use-package sx
    :ensure t)
#+END_SRC

* Misc
** Settings

Use the built-in ~show-paren-mode~ to highlight matching parentheses.

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0.2)
(show-paren-mode 1)
#+END_SRC

Characterise files with the same name by their path.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config (setq uniquify-buffer-name-style 'forward))
#+END_SRC

I hate tabs.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Pressing =y= or =n= is sufficent.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Overwrite a selection by typing over it.

#+BEGIN_SRC emacs-lisp
(pending-delete-mode t)
#+END_SRC

Kill whole line not just content on =C-k=.

#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC

In emacs minibuffer prompt, when you press the left arrow key, the cursor will move back all the way over the prompt text. This is annoying because user often will hold down ~Alt+b~ to move back by word to edit, and when user starts to type something, emacs will say ’This is read-only’. Then you have to manually move cursor out of the prompt. You can try it now by calling query-replace or shell-command. Here's how to set the cursor not going into prompt. ([[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][source]])

#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties (quote (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
#+END_SRC

A file is large if it is 32MB in my world.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 33554432)
#+END_SRC

Make command history persistent ([[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][source]])

#+BEGIN_SRC emacs-lisp
(savehist-mode t)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

Always prefer to load newer files, instead of giving precedence to the .elc files.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

Smoother scrolling and better defaults for recentering with =C-l=

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10000
      scroll-preserve-screen-position t)
#+END_SRC

Use ~kill -pUSR1~ to kill Emacs. ([[https://github.com/wasamasa/dotemacs/blob/master/init.org][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/quit-emacs-unconditionally ()
  (interactive)
  (my-quit-emacs '(4)))

(define-key special-event-map (kbd "<sigusr1>") #'malb/quit-emacs-unconditionally)
#+END_SRC

** Functions

Add a function for renaming the file being edited ([[https://github.com/bodil/ohai-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+END_SRC

Copy filename to clipboard ([[http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** Scratch
*** Unkillable scratch

We don’t want the *scratch* buffer to be killed ever.

#+BEGIN_SRC emacs-lisp
(use-package unkillable-scratch
  :ensure t
  :config (progn
            (unkillable-scratch 1)))
#+END_SRC

*** Get a [[https://github.com/ieure/scratch-el][scratch]] for every mode quickly

#+BEGIN_SRC emacs-lisp
(use-package scratch
  :ensure t)
#+END_SRC

*** We know what scratch is for

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC

** [[https://github.com/Malabarba/elisp-bug-hunter][Bug-hunter]]

Debug startup failures. If your Emacs init file signals an error during startup, but you don't know why, simply issue ~M-x bug-hunter-init-file RET RET~ and The Bug Hunter will find it for you.

#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :ensure t)
#+END_SRC

** [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Emacs from Chrome]]

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :ensure t
  :config (progn
            (edit-server-start)))
#+END_SRC

** [[https://github.com/doublep/logview][Logs]]

#+BEGIN_SRC emacs-lisp
(use-package logview
  :ensure t
  :config (setq logview-auto-revert-mode 'auto-revert-tail-mode))
#+END_SRC

* Page Breaks

Inspired by this [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][post]], make use of page break characters by using [[https://github.com/purcell/page-break-lines][page-break-lines]] and [[https://github.com/david-christiansen/helm-pages][helm-pages]]. ([[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/][source]])

- Insert a new page break with =C-q C-l=.

- Use =C-x [= and =C-x ]= to move backward and forward through pages, respectively.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :config (progn
            (global-page-break-lines-mode)
            (diminish 'page-break-lines-mode)))

(use-package helm-pages
  :ensure t)
#+END_SRC

* X11

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq x-select-enable-clipboard t                  ; use clipboard for copy and paste
        mouse-autoselect-window    -1                ; Focus follows mouse after 2 seconds without movement
        save-interprogram-paste-before-kill t        ; keep a copy of clipboard stuff around
        mouse-yank-at-point t
        x-select-enable-primary t
        x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

Use GTK printing interface.

#+BEGIN_SRC emacs-lisp
(setq lpr-command "gtklp")
#+END_SRC

* Autosave & Backups

Put autosave files (ie =#foo#=) in one place, not scattered across the file system.

#+BEGIN_SRC emacs-lisp
(defvar malb/autosave-dir
  (expand-file-name "autosaves" user-emacs-directory))

(make-directory malb/autosave-dir t)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat malb/autosave-dir
          (if buffer-file-name
              (concat "#" (file-name-nondirectory buffer-file-name) "#")
            (expand-file-name
             (concat "#%" (buffer-name) "#")))))
#+END_SRC

Put backup files (ie =foo~=) in one place too. The ~backup-directory-alist~ list contains regexp → directory mappings. Filenames matching a regexp are backed up in the corresponding directory. Emacs will mkdir it if necessary.

#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "autosaves" user-emacs-directory))
(setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC

* UTF-8

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

(setq current-language-environment "UTF-8")
(setq default-input-method "rfc1345")

(prefer-coding-system 'utf-8)
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
(malb/set-menu-key "a" #'helm-imenu-anywhere)
(malb/set-menu-key "b" #'malb/helm-omni)
(malb/set-menu-key "c" #'helm-calcul-expression)
(malb/set-menu-key "e" #'malb/eshell-here)
(malb/set-menu-key "f" #'helm-find-files)
(malb/set-menu-key "g" #'magit-status)
(malb/set-menu-key "i" #'helm-semantic-or-imenu)
(malb/set-menu-key "j" #'ace-jump-mode)
(malb/set-menu-key "k" #'helm-baloo)
(malb/set-menu-key "l" #'helm-bibtex)
(malb/set-menu-key "m" #'mu4e)
(malb/set-menu-key "o" #'helm-org-agenda-files-headings)
(malb/set-menu-key "p" #'pandoc-main-hydra/body)
(malb/set-menu-key "s" #'helm-swoop)
(malb/set-menu-key "w" #'olivetti-mode)
(malb/set-menu-key "x" #'helm-M-x)
(malb/set-menu-key "z" #'ace-jump-zap-up-to-char-dwim)
#+END_SRC

Easily change the text size:

#+BEGIN_SRC emacs-lisp
(bind-key "C-+" #'text-scale-increase)
(bind-key "C--" #'text-scale-decrease)
(bind-key "C-<mouse-4>" #'text-scale-increase)
(bind-key "C-<mouse-5>" #'text-scale-decrease)
#+END_SRC

Remap join-line to ~M-j~ where it's easier to get to. ~join-line~ will join the line you're on with the line above it in a reasonable manner for the type of file you're editing.

#+BEGIN_SRC emacs-lisp
(bind-key "M-j" #'join-line)
#+END_SRC

=C-z= only annoys me, use =C-x C-z= when you need it

#+BEGIN_SRC emacs-lisp
(bind-key "C-z" nil)
#+END_SRC

** Learn key bindings

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config (progn
            (which-key-mode 1)))
#+END_SRC

* Look
** Theme

It looks like this:

[[./screenshot.png]]

#+BEGIN_SRC emacs-lisp
(when (bound-and-true-p malb/solarized-p)
  (use-package solarized
    :ensure solarized-theme
    :config (progn
              (setq solarized-use-variable-pitch nil
                    solarized-high-contrast-mode-line nil
                    solarized-height-minus-1 1.0
                    solarized-height-plus-1  1.0
                    solarized-height-plus-2  1.0
                    solarized-height-plus-3  1.0
                    solarized-height-plus-4  1.0
                    solarized-use-less-bold nil
                    solarized-emphasize-indicators t
                    solarized-scale-org-headlines nil
                    x-underline-at-descent-line t)

              (load-theme 'solarized-light t)

              (setq org-todo-keyword-faces
                    '(("CANCELLED" :foreground "gray" :weight bold)
                      ("DISABLED" :foreground "gray" :weight bold)
                      ("SUBMITTED" :foreground "gray" :weight bold)
                      ("DELEGATED" :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
                      ("WAITING"   :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
                      ("COAUTHOR"  :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
                      ("NATIVE"    :foreground "dark orange" :weight bold :box (:line-width 1 :color "#D8ABA7") :background "#FFE6E4")
                      ))

              ;; steal org style from Leuven
              (set-face-attribute 'font-lock-doc-face nil :foreground "#93a1a1" :slant 'normal)
              (set-face-attribute 'org-checkbox nil :weight 'bold :box '(:line-width 1 :style 'pressed-button) :foreground "white" :background "light gray")
              (set-face-attribute 'org-done nil :weight 'bold :box '(:line-width 1 :color "#BBBBBB") :foreground "#8BB300" :background "#F0F0F0")
              (set-face-attribute 'org-scheduled-previously nil :foreground "#cb4b16")
              (set-face-attribute 'org-tag nil :weight 'normal :box '(:line-width 1 :color "#BBBBBB") :foreground "#9A9FA4")
              (set-face-attribute 'org-todo nil :weight 'bold :box '(:line-width 1 :color "#D8ABA7") :foreground "#cb4b16" :background "#FFE6E4")
              (set-face-attribute 'org-block-begin-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
              (set-face-attribute 'org-block-end-line nil :inherit 'org-meta-line :background "#eee8d5" :foreground "#657b83" :slant 'normal)
              (set-face-attribute 'org-block-background nil :background "#FDF8EC")

              (when (boundp 'mmm-mode)
                (set-face-attribute 'mmm-default-submode-face nil :background "#FDF8EC"))
              (when (boundp 'hl-sentence-mode)
                (set-face-attribute 'hl-sentence-face nil :background "#FDF9EF"))

              ;; steal spacemacs flycheck style
              (eval-after-load "fylcheck"
                (progn
                  (set-face-attribute 'flycheck-error   nil :underline "#dc322f")
                  (set-face-attribute 'flycheck-warning nil :underline "#b58900")
                  (set-face-attribute 'flycheck-info    nil :underline "#268bd2")
                  (set-face-attribute 'flycheck-fringe-error   nil :background "#fdf6e3" :foreground "#dc322f" :weight 'bold)
                  (set-face-attribute 'flycheck-fringe-warning nil :background "#fdf6e3" :foreground "#DEB542" :weight 'bold)
                  (set-face-attribute 'flycheck-fringe-info    nil :background "#fdf6e3" :foreground "#69B7F0" :weight 'bold)
                  ))
              )))



(when (bound-and-true-p malb/material-p)
  (use-package material-theme
    :ensure t
    :config (progn
              (load-theme 'material-light t)
              (set-face-attribute 'org-level-1 nil :height 1.0)
              (set-face-attribute 'org-level-2 nil :height 1.0 :background nil)
              (set-face-attribute 'org-level-3 nil :height 1.0 :background nil)
              (set-face-attribute 'org-document-info nil :height 1.0)
              (set-face-attribute 'org-document-info-keyword nil :height 1.0)
              (set-face-attribute 'org-document-title nil :height 1.0)

              (eval-after-load "fylcheck"
                (progn
                  (set-face-attribute 'flycheck-error   nil :underline "#dc322f")
                  (set-face-attribute 'flycheck-warning nil :underline "#b58900")
                  (set-face-attribute 'flycheck-info    nil :underline "#268bd2")
                  (set-face-attribute 'flycheck-fringe-error   nil :background "#fdf6e3" :foreground "#dc322f" :weight 'bold)
                  (set-face-attribute 'flycheck-fringe-warning nil :background "#fdf6e3" :foreground "#DEB542" :weight 'bold)
                  (set-face-attribute 'flycheck-fringe-info    nil :background "#fdf6e3" :foreground "#69B7F0" :weight 'bold)
                  ))
              ))

  )
#+END_SRC

Set transparency because reasons ([[https://github.com/codemac/config/blob/master/emacs.d/boot.org][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

*** TODO clean up Solarized config
** Powerline

We use [[https://github.com/TheBB/spaceline/tree/master][Spaceline]] which customises [[https://github.com/milkypostman/powerline][Powerline]].

[[https://github.com/TheBB/spaceline/raw/master/screen.png]] ([[https://github.com/TheBB/spaceline/tree/master][source]])

#+BEGIN_SRC emacs-lisp
;; (use-package powerline
;;   :ensure t
;;   :commands powerline-default-theme
;;   :init (powerline-default-theme)
;;   :config (progn
;;             (if malb/solarized-p
;;                 (progn
;;                   (set-face-attribute 'powerline-active1 nil :background "grey22" :foreground "white smoke")
;;                   (set-face-attribute 'powerline-active2 nil :background "grey40" :foreground "gainsboro")
;;                   (set-face-attribute 'powerline-inactive1 nil :background "grey55" :foreground "white smoke")
;;                   (set-face-attribute 'powerline-inactive2 nil :background "grey65" :foreground "gainsboro")
;;                   )
;;               )
;;             ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package spaceline-config
  :ensure spaceline
  :config (progn
            (setq spaceline-workspace-numbers-unicode t)
            (spaceline-spacemacs-theme)

            (set-face-attribute 'powerline-active1 nil :background "grey22" :foreground "white smoke")
            (set-face-attribute 'powerline-active2 nil :background "grey40" :foreground "gainsboro")
            (set-face-attribute 'powerline-inactive1 nil :background "grey55" :foreground "white smoke")
            (set-face-attribute 'powerline-inactive2 nil :background "grey65" :foreground "gainsboro")
            (powerline-reset)
            ))
#+END_SRC

** Rainbow mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'rainbow-mode))
  :diminish rainbow-mode)
#+END_SRC

** Centered window mode

When only one window is open, center it using [[https://github.com/anler/centered-window-mode][centered-window-mode]]. Don’t enable by default because the wide fringe interacts badly with flycheck.

#+BEGIN_SRC emacs-lisp
(use-package centered-window-mode
  :ensure t)
#+END_SRC

*** TODO I don’t think I use centred-window-mode ever

** [[https://github.com/sabof/stripe-buffer][Stripe Buffer]]

[[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png]] ([[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png][source]])

Makes it vastly easier to read tables and friends. We apply this [[https://github.com/sabof/stripe-buffer/pull/14][patch]] for performance.

#+BEGIN_SRC emacs-lisp
  (use-package stripe-buffer
    :ensure t
    :config (progn
              (add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
              (add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
              ))
#+END_SRC

* ToDos
** TODO AucTeX
- ~\begin{comment}…\end{comment}~ does not work as expected
** TODO check out [[http://emacs.stackexchange.com/q/8069][.el.gpg]]
** TODO check out [[https://github.com/rejeep/prodigy.el][prodigy]]
** TODO check out [[https://github.com/wasamasa/firestarter][firestarter]]
:PROPERTIES:
:ID:       01e6ff33-8437-4b06-967c-85dd8df6e7b6
:END:
** TODO check out [[https://github.com/bastibe/annotate.el][annotate]]
** TODO check out [[https://github.com/bling/fzf.el][fzf]]
** Org Mode
- [[https://org-trello.github.io/trello-setup.html][org-trello]] - sync with trello
- [[https://github.com/christopherjwhite/org-toodledo][org-toodledo]] - sync with toodledo
- [[https://github.com/howardabrams/dot-files/blob/master/emacs-mail.org][org-mime]] - reading and sending email
- [[https://github.com/IvanMalison/org-projectile][org-projectile]] - per project todo lists
- [[https://github.com/rexim/org-cliplink][org-cliplink]] - insert URL’s with titles
- [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-screen.html][org-babel-screen]] - interactive shells and org-mode
* Notes
** Compile .emacs

#+BEGIN_SRC emacs-lisp :tangle no
(byte-recompile-directory (expand-file-name "elpa" user-emacs-directory) nil t)
#+END_SRC

** Commands to remember

- You can scroll the other window with ~C-M-v~ and ~C-M-S-v~.
- =C-x SPC= rectangle-mark-mode
- =C-x C-SPC= jump back
- =C-x z= repeat last command (and again with just =z=)
- =align-regexp= to align on regexp
- =C-c == reftex-toc
- =C-h c= invokes describe-key-briefly.
- =%&= in =dired= marks garbage files
- =M-a= and =M-e= to move through sentences and
- =C-<down>= and =C-<up>= to move backwards and forwards through paragraphs
- ~M-|~ to send the contents of a region to a shell command
- =C-x 4 C-o= (~display-buffer~) opens another window, but instead if showing the same buffer, shows another one, the name of which is read from the minibuffer. Note that the newly opened window does not get selected!
- =C-x 4 0= (~kill-buffer-and-window~), which not only deletes the current window (like ~C-x 0~), but also kills its buffer.
- ~C-x 4 c~ (~clone-indirect-buffer-other-window~) splits the current window, clones the current buffer and visits the clone in the newly opened window.

** TRAMP syntax

To SSH to host do =/ssh:host:/=

** C++ mode ([[https://stackoverflow.com/questions/3312114/how-to-tell-emacs-to-open-h-file-in-c-mode][source]])

Another approach for using both c-mode and c++-mode as appropriate, is to use directory local variables to set the mode.

Directory variables are evaluated after the mode has been set, so you can actually write a =.dir-locals.el= file for your C++ project containing this:

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((mode . c++))))
#+END_SRC

And Emacs will change the mode to ~c++-mode~ whenever it had initially set it to ~c-mode~.

* Technical Artefacts

# Local Variables:
# eval: (ws-butler-mode 1)
# End:
